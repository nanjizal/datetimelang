<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<abstract path="Any" params="" file="/usr/local/lib/haxe/std/Any.hx">
		<from><icast field="__cast"><c path="__cast.T"/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<meta><m n=":forward.variance"/></meta>
		<impl><class path="_Any.Any_Impl_" params="" file="/usr/local/lib/haxe/std/Any.hx" private="1" module="Any" final="1">
	<__promote params="T" get="inline" set="null" line="37" static="1">
		<f a="this">
			<d/>
			<c path="__promote.T"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":to"/>
		</meta>
	</__promote>
	<__cast params="T" get="inline" set="null" line="40" static="1">
		<f a="value">
			<c path="__cast.T"/>
			<x path="Any"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":from"/>
		</meta>
	</__cast>
	<toString get="inline" set="null" line="43" static="1">
		<f a="this">
			<d/>
			<c path="String"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</toString>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="_Any.Any_Impl_" params="" file="/usr/local/lib/haxe/std/Any.hx" private="1" module="Any" final="1">
		<__promote params="T" get="inline" set="null" line="37" static="1">
			<f a="this">
				<d/>
				<c path="__promote.T"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":to"/>
			</meta>
		</__promote>
		<__cast params="T" get="inline" set="null" line="40" static="1">
			<f a="value">
				<c path="__cast.T"/>
				<x path="Any"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":from"/>
			</meta>
		</__cast>
		<toString get="inline" set="null" line="43" static="1">
			<f a="this">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</toString>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Array" params="T" file="/usr/local/lib/haxe/std/js/_std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<iterator public="1" get="inline" set="null" line="88">
			<f a=""><c path="haxe.iterators.ArrayIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Class" params="T" file="/usr/local/lib/haxe/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/usr/local/lib/haxe/std/js/_std/Date.hx" extern="1">
		<now public="1" get="inline" set="null" line="46" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" get="inline" set="null" line="50" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the timestamp (in milliseconds) `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" get="inline" set="null" line="54" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the formatted string `s`. The following formats are
		accepted by the function:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats expressed a date in local time. The third is a time
		relative to the UTC epoch.</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp (in milliseconds) of `this` date.
		On cpp and neko, this function only has a second resolution, so the
		result will always be a multiple of `1000.0`, e.g. `1454698271000.0`.
		To obtain the current timestamp with better precision on cpp and neko,
		see the `Sys.time` API.

		For measuring time differences with millisecond accuracy on
		all platforms, see `haxe.Timer.stamp`.</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in the local timezone.</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in the local timezone.</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in the local timezone.
		Note that the month number is zero-based.</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in the local timezone.</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in the local timezone.</haxe_doc>
		</getDay>
		<getUTCHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in UTC.</haxe_doc>
		</getUTCHours>
		<getUTCMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCMinutes>
		<getUTCSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCSeconds>
		<getUTCFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in UTC.</haxe_doc>
		</getUTCFullYear>
		<getUTCMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in UTC.
		Note that the month number is zero-based.</haxe_doc>
		</getUTCMonth>
		<getUTCDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in UTC.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in UTC.</haxe_doc>
		</getUTCDay>
		<getTimezoneOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time zone difference of `this` Date in the current locale
		to UTC, in minutes.

		Assuming the function is executed on a machine in a UTC+2 timezone,
		`Date.now().getTimezoneOffset()` will return `-120`.</haxe_doc>
		</getTimezoneOffset>
		<toString public="1" get="inline" set="null" line="42">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date in the local timezone
		using the standard format `YYYY-MM-DD HH:MM:SS`. See `DateTools.format` for
		other formatting rules.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11 (note that this is zero-based)
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970 UTC.

	## Supported range

	Due to platform limitations, only dates in the range 1970 through 2038 are
	supported consistently. Some targets may support dates outside this range,
	depending on the OS at runtime. The `Date.fromTime` method will not work with
	timestamps outside the range on any target.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="js.lib.RegExp" params="" file="/usr/local/lib/haxe/std/js/lib/RegExp.hx" extern="1">
		<global public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the "g" flag is used with the regular expression.</haxe_doc>
		</global>
		<ignoreCase public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the "i" flag is used with the regular expression.</haxe_doc>
		</ignoreCase>
		<multiline public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the "m" flag is used with the regular expression.</haxe_doc>
		</multiline>
		<source public="1" set="null">
			<c path="String"/>
			<haxe_doc>The source text of the regexp object, it doesn't contain the two forward slashes on both sides and any flags.</haxe_doc>
		</source>
		<lastIndex public="1">
			<x path="Int"/>
			<haxe_doc>The index at which to start the next match.</haxe_doc>
		</lastIndex>
		<exec public="1" set="method">
			<f a="str">
				<c path="String"/>
				<x path="Null"><c path="js.lib.RegExpMatch"/></x>
			</f>
			<haxe_doc>Execute a search for a match in a specified string.
		Returns a result array, or null.</haxe_doc>
		</exec>
		<test public="1" set="method">
			<f a="str">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Execute a search for a match between a regular expression and a specified string.
		Returns true or false.</haxe_doc>
		</test>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return a string representing the regular expression.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="pattern:?flags">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a regular expression object for matching text with a pattern.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Native JavaScript regular expressions.

	For cross-platform regular expressions, use Haxe `EReg` class or
	[regexp literals](https://haxe.org/manual/std-regex.html).

	@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp>]]></haxe_doc>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
	</class>
	<class path="_EReg.HaxeRegExp" params="" file="/usr/local/lib/haxe/std/js/_std/EReg.hx" private="1" module="EReg" extern="1">
		<extends path="js.lib.RegExp"/>
		<m public="1"><c path="js.lib.RegExpMatch"/></m>
		<s public="1"><c path="String"/></s>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
	</class>
	<abstract path="Enum" params="T" file="/usr/local/lib/haxe/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/usr/local/lib/haxe/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="/usr/local/lib/haxe/std/EnumValue.hx" private="1" module="EnumValue" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="js.Syntax" params="" file="/usr/local/lib/haxe/std/js/Syntax.hx" extern="1">
		<code public="1" set="method" static="1">
			<f a="code:args">
				<c path="String"/>
				<t path="haxe.extern.Rest"><d/></t>
				<d/>
			</f>
			<haxe_doc>Inject `code` directly into generated source.

		`code` must be a string constant.

		Additional `args` are supported to provide code interpolation, for example:
		```haxe
		Syntax.code("console.log({0}, {1})", "hi", 42);
		```
		will generate
		```haxe
		console.log("hi", 42);
		```

		Emits a compilation error if the count of `args` does not match the count of placeholders in `code`.</haxe_doc>
		</code>
		<plainCode public="1" set="method" static="1">
			<f a="code">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Inject `code` directly into generated source.
		The same as `js.Syntax.code` except this one does not provide code interpolation.</haxe_doc>
		</plainCode>
		<construct public="1" params="T" set="method" static="1">
			<f a="cl:args">
				<x path="Class"><c path="construct.T"/></x>
				<t path="haxe.extern.Rest"><d/></t>
				<c path="construct.T"/>
			</f>
			<haxe_doc>Generate `new cl(...args)` expression.</haxe_doc>
			<overloads><construct public="1" set="method">
	<f a="cl:args">
		<c path="String"/>
		<t path="haxe.extern.Rest"><d/></t>
		<d/>
	</f>
	<haxe_doc>Generate `new cl(...args)` expression.</haxe_doc>
</construct></overloads>
		</construct>
		<instanceof public="1" set="method" static="1">
			<f a="v:cl">
				<d/>
				<x path="Class"><d/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Generate `v instanceof cl` expression.</haxe_doc>
		</instanceof>
		<typeof public="1" set="method" static="1">
			<f a="o">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Generate `typeof o` expression.</haxe_doc>
		</typeof>
		<strictEq public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Genearte `a === b` expression.</haxe_doc>
		</strictEq>
		<strictNeq public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Genearte `a !== b` expression.</haxe_doc>
		</strictNeq>
		<delete public="1" set="method" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Generate `delete o[f]` expression.</haxe_doc>
			<overloads><delete public="1" set="method">
	<f a="o:f">
		<d/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<haxe_doc>Generate `delete o[f]` expression.</haxe_doc>
</delete></overloads>
		</delete>
		<field public="1" set="method" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Generate `o.f` expression, if `f` is a constant string,
		or `o[f]` if it's any other expression.</haxe_doc>
		</field>
		<haxe_doc>Generate JavaScript syntax not directly supported by Haxe.
	Use only at low-level when specific target-specific code-generation is required.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noClosure"/>
		</meta>
	</class>
	<class path="js.lib.Date" params="" file="/usr/local/lib/haxe/std/js/lib/Date.hx" extern="1">
		<fromHaxeDate public="1" get="inline" set="null" line="40" static="1">
			<f a="date">
				<t path="_Date.HaxeDate"/>
				<c path="js.lib.Date"/>
			</f>
			<haxe_doc>Cast Haxe's Date to js.lib.Date.</haxe_doc>
		</fromHaxeDate>
		<toHaxeDate public="1" get="inline" set="null" line="47" static="1">
			<f a="date">
				<c path="js.lib.Date"/>
				<t path="_Date.HaxeDate"/>
			</f>
			<haxe_doc>Cast js.lib.Date to Haxe's Date.</haxe_doc>
		</toHaxeDate>
		<now public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the numeric value corresponding to the current time - the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC, with leap seconds ignored</haxe_doc>
		</now>
		<parse public="1" set="method" static="1">
			<f a="str">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Parses a string representation of a date and returns the number of milliseconds since 1 January, 1970, 00:00:00, UTC, with leap seconds ignored.</haxe_doc>
		</parse>
		<UTC public="1" set="method" static="1">
			<f a="year:month:?day:?hours:?minutes:?seconds:?milliseconds">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the number of milliseconds since January 1, 1970, 00:00:00 UTC, with leap seconds ignored.</haxe_doc>
		</UTC>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the month (1-31) for the specified date according to local time.</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week (0-6) for the specified date according to local time.</haxe_doc>
		</getDay>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the year (4 digits for 4-digit years) of the specified date according to local time.</haxe_doc>
		</getFullYear>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hour (0-23) in the specified date according to local time.</haxe_doc>
		</getHours>
		<getMilliseconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the milliseconds (0-999) in the specified date according to local time.</haxe_doc>
		</getMilliseconds>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes (0-59) in the specified date according to local time.</haxe_doc>
		</getMinutes>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month (0-11) in the specified date according to local time.</haxe_doc>
		</getMonth>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds (0-59) in the specified date according to local time.</haxe_doc>
		</getSeconds>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the numeric value of the specified date as the number of milliseconds since January 1, 1970, 00:00:00 UTC (negative for prior times).</haxe_doc>
		</getTime>
		<getTimezoneOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time-zone offset in minutes for the current locale.</haxe_doc>
		</getTimezoneOffset>
		<getUTCDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day (date) of the month (1-31) in the specified date according to universal time.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week (0-6) in the specified date according to universal time.</haxe_doc>
		</getUTCDay>
		<getUTCFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the year (4 digits for 4-digit years) in the specified date according to universal time.</haxe_doc>
		</getUTCFullYear>
		<getUTCHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours (0-23) in the specified date according to universal time.</haxe_doc>
		</getUTCHours>
		<getUTCMilliseconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the milliseconds (0-999) in the specified date according to universal time.</haxe_doc>
		</getUTCMilliseconds>
		<getUTCMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes (0-59) in the specified date according to universal time.</haxe_doc>
		</getUTCMinutes>
		<getUTCMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month (0-11) in the specified date according to universal time.</haxe_doc>
		</getUTCMonth>
		<getUTCSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds (0-59) in the specified date according to universal time.</haxe_doc>
		</getUTCSeconds>
		<setDate public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the day of the month for a specified date according to local time.</haxe_doc>
		</setDate>
		<setFullYear public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to local time.</haxe_doc>
		</setFullYear>
		<setHours public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the hours for a specified date according to local time.</haxe_doc>
		</setHours>
		<setMilliseconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the milliseconds for a specified date according to local time.</haxe_doc>
		</setMilliseconds>
		<setMinutes public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the minutes for a specified date according to local time.</haxe_doc>
		</setMinutes>
		<setMonth public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the month for a specified date according to local time.</haxe_doc>
		</setMonth>
		<setSeconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the seconds for a specified date according to local time.</haxe_doc>
		</setSeconds>
		<setTime public="1" set="method">
			<f a="value">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC, allowing for negative numbers for times prior.</haxe_doc>
		</setTime>
		<setUTCDate public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the day of the month for a specified date according to universal time.</haxe_doc>
		</setUTCDate>
		<setUTCFullYear public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to universal time.</haxe_doc>
		</setUTCFullYear>
		<setUTCHours public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the hour for a specified date according to universal time.</haxe_doc>
		</setUTCHours>
		<setUTCMilliseconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the milliseconds for a specified date according to universal time.</haxe_doc>
		</setUTCMilliseconds>
		<setUTCMinutes public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the minutes for a specified date according to universal time.</haxe_doc>
		</setUTCMinutes>
		<setUTCMonth public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the month for a specified date according to universal time.</haxe_doc>
		</setUTCMonth>
		<setUTCSeconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the seconds for a specified date according to universal time.</haxe_doc>
		</setUTCSeconds>
		<toDateString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the "date" portion of the Date as a human-readable string.</haxe_doc>
		</toDateString>
		<toISOString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Converts a date to a string following the ISO 8601 Extended Format.</haxe_doc>
		</toISOString>
		<toJSON public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the Date using toISOString(). Intended for use by JSON.stringify().</haxe_doc>
		</toJSON>
		<toLocaleDateString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<d><d/></d>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string with a locality sensitive representation of the date portion of this date based on system settings.</haxe_doc>
			<overloads><toLocaleDateString public="1" set="method">
	<f a="?locales:?options">
		<c path="Array"><c path="String"/></c>
		<d><d/></d>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a string with a locality sensitive representation of the date portion of this date based on system settings.</haxe_doc>
</toLocaleDateString></overloads>
		</toLocaleDateString>
		<toLocaleFormat public="1" set="method">
			<f a="format">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts a date to a string, using a format string.</haxe_doc>
		</toLocaleFormat>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<d><d/></d>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string with a locality sensitive representation of this date. Overrides the Object.prototype.toLocaleString() method.</haxe_doc>
			<overloads><toLocaleString public="1" set="method">
	<f a="?locales:?options">
		<c path="Array"><c path="String"/></c>
		<d><d/></d>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a string with a locality sensitive representation of this date. Overrides the Object.prototype.toLocaleString() method.</haxe_doc>
</toLocaleString></overloads>
		</toLocaleString>
		<toLocaleTimeString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<d><d/></d>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string with a locality sensitive representation of the time portion of this date based on system settings.</haxe_doc>
			<overloads><toLocaleTimeString public="1" set="method">
	<f a="?locales:?options">
		<c path="Array"><c path="String"/></c>
		<d><d/></d>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a string with a locality sensitive representation of the time portion of this date based on system settings.</haxe_doc>
</toLocaleTimeString></overloads>
		</toLocaleTimeString>
		<toSource public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the source for an equivalent Date object; you can use this value to create a new object. Overrides the Object.prototype.toSource() method.</haxe_doc>
		</toSource>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the specified Date object. Overrides the Object.prototype.toString() method.</haxe_doc>
		</toString>
		<toTimeString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the "time" portion of the Date as a human-readable string.</haxe_doc>
		</toTimeString>
		<toUTCString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Converts a date to a string using the UTC timezone.</haxe_doc>
		</toUTCString>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="dateString">
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="year:month:?day:?hours:?minutes:?seconds:?milliseconds">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<haxe_doc>Creates a JavaScript Date instance that represents a single moment in time. Date objects are based on a time value that is the number of milliseconds since 1 January 1970 UTC.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Date"</e></m>
		</meta>
	</class>
	<class path="Math" params="" file="/usr/local/lib/haxe/std/js/_std/Math.hx" extern="1">
		<ceil public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></ceil>
		<floor public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></floor>
		<round public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></round>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":keepInit"/>
		</meta>
	</class>
	<class path="String" params="" file="/usr/local/lib/haxe/std/js/_std/String.hx" extern="1">
		<fromCharCode public="1" get="inline" set="null" line="43" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`.

		If `startIndex` exceeds `this.length`, -1 is returned.

		If `startIndex` is negative, the result is unspecifed.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `startIndex` is negative, the result is unspecifed.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<charCodeAt public="1" get="inline" set="null" line="35">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<substr public="1" get="inline" set="null" line="39">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Std" params="" file="/usr/local/lib/haxe/std/js/_std/Std.hx">
		<string public="1" set="method" line="47" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<parseInt public="1" set="method" line="56" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If `x` is null, the result is unspecified.
		If `x` cannot be parsed as integer, the result is `null`.</haxe_doc>
		</parseInt>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":keepInit"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="StringTools" params="" file="/usr/local/lib/haxe/std/StringTools.hx">
		<lpad public="1" set="method" line="365" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Concatenates `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String `""` or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</lpad>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<enum path="datetime.DTPeriod" params="" file="/usr/local/lib/haxeLibrary/datetime/git/src/datetime/DateTime.hx" module="datetime.DateTime">
		<Year a="n"><x path="Int"/></Year>
		<Month a="n"><x path="Int"/></Month>
		<Day a="n"><x path="Int"/></Day>
		<Hour a="n"><x path="Int"/></Hour>
		<Minute a="n"><x path="Int"/></Minute>
		<Second a="n"><x path="Int"/></Second>
		<Week a="n"><x path="Int"/></Week>
		<haxe_doc>* Time periods for date math
*</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<abstract path="datetime.DTWeekDay" params="" file="/usr/local/lib/haxeLibrary/datetime/git/src/datetime/DateTime.hx" module="datetime.DateTime">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>* Days of week
*</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="datetime._DateTime.DTWeekDay_Impl_" params="" file="/usr/local/lib/haxeLibrary/datetime/git/src/datetime/DateTime.hx" private="1" module="datetime.DateTime" extern="1" final="1">
	<Sunday public="1" get="inline" set="null" expr="cast 0" line="35" static="1">
		<x path="datetime.DTWeekDay"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Sunday>
	<Monday public="1" get="inline" set="null" expr="cast 1" line="36" static="1">
		<x path="datetime.DTWeekDay"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Monday>
	<Tuesday public="1" get="inline" set="null" expr="cast 2" line="37" static="1">
		<x path="datetime.DTWeekDay"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Tuesday>
	<Wednesday public="1" get="inline" set="null" expr="cast 3" line="38" static="1">
		<x path="datetime.DTWeekDay"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Wednesday>
	<Thursday public="1" get="inline" set="null" expr="cast 4" line="39" static="1">
		<x path="datetime.DTWeekDay"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Thursday>
	<Friday public="1" get="inline" set="null" expr="cast 5" line="40" static="1">
		<x path="datetime.DTWeekDay"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Friday>
	<Saturday public="1" get="inline" set="null" expr="cast 6" line="41" static="1">
		<x path="datetime.DTWeekDay"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Saturday>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="datetime._DateTime.DTWeekDay_Impl_" params="" file="/usr/local/lib/haxeLibrary/datetime/git/src/datetime/DateTime.hx" private="1" module="datetime.DateTime" extern="1" final="1">
		<Sunday public="1" get="inline" set="null" expr="cast 0" line="35" static="1">
			<x path="datetime.DTWeekDay"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Sunday>
		<Monday public="1" get="inline" set="null" expr="cast 1" line="36" static="1">
			<x path="datetime.DTWeekDay"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Monday>
		<Tuesday public="1" get="inline" set="null" expr="cast 2" line="37" static="1">
			<x path="datetime.DTWeekDay"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Tuesday>
		<Wednesday public="1" get="inline" set="null" expr="cast 3" line="38" static="1">
			<x path="datetime.DTWeekDay"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Wednesday>
		<Thursday public="1" get="inline" set="null" expr="cast 4" line="39" static="1">
			<x path="datetime.DTWeekDay"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Thursday>
		<Friday public="1" get="inline" set="null" expr="cast 5" line="40" static="1">
			<x path="datetime.DTWeekDay"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Friday>
		<Saturday public="1" get="inline" set="null" expr="cast 6" line="41" static="1">
			<x path="datetime.DTWeekDay"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Saturday>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="datetime.DTMonth" params="" file="/usr/local/lib/haxeLibrary/datetime/git/src/datetime/DateTime.hx" module="datetime.DateTime">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>* Months
*</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="datetime._DateTime.DTMonth_Impl_" params="" file="/usr/local/lib/haxeLibrary/datetime/git/src/datetime/DateTime.hx" private="1" module="datetime.DateTime" extern="1" final="1">
	<January public="1" get="inline" set="null" expr="cast 1" line="50" static="1">
		<x path="datetime.DTMonth"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</January>
	<February public="1" get="inline" set="null" expr="cast 2" line="51" static="1">
		<x path="datetime.DTMonth"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</February>
	<March public="1" get="inline" set="null" expr="cast 3" line="52" static="1">
		<x path="datetime.DTMonth"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</March>
	<April public="1" get="inline" set="null" expr="cast 4" line="53" static="1">
		<x path="datetime.DTMonth"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</April>
	<May public="1" get="inline" set="null" expr="cast 5" line="54" static="1">
		<x path="datetime.DTMonth"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</May>
	<June public="1" get="inline" set="null" expr="cast 6" line="55" static="1">
		<x path="datetime.DTMonth"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</June>
	<July public="1" get="inline" set="null" expr="cast 7" line="56" static="1">
		<x path="datetime.DTMonth"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</July>
	<August public="1" get="inline" set="null" expr="cast 8" line="57" static="1">
		<x path="datetime.DTMonth"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</August>
	<September public="1" get="inline" set="null" expr="cast 9" line="58" static="1">
		<x path="datetime.DTMonth"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</September>
	<October public="1" get="inline" set="null" expr="cast 10" line="59" static="1">
		<x path="datetime.DTMonth"/>
		<meta>
			<m n=":value"><e>cast 10</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</October>
	<November public="1" get="inline" set="null" expr="cast 11" line="60" static="1">
		<x path="datetime.DTMonth"/>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</November>
	<December public="1" get="inline" set="null" expr="cast 12" line="61" static="1">
		<x path="datetime.DTMonth"/>
		<meta>
			<m n=":value"><e>cast 12</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</December>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="datetime._DateTime.DTMonth_Impl_" params="" file="/usr/local/lib/haxeLibrary/datetime/git/src/datetime/DateTime.hx" private="1" module="datetime.DateTime" extern="1" final="1">
		<January public="1" get="inline" set="null" expr="cast 1" line="50" static="1">
			<x path="datetime.DTMonth"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</January>
		<February public="1" get="inline" set="null" expr="cast 2" line="51" static="1">
			<x path="datetime.DTMonth"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</February>
		<March public="1" get="inline" set="null" expr="cast 3" line="52" static="1">
			<x path="datetime.DTMonth"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</March>
		<April public="1" get="inline" set="null" expr="cast 4" line="53" static="1">
			<x path="datetime.DTMonth"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</April>
		<May public="1" get="inline" set="null" expr="cast 5" line="54" static="1">
			<x path="datetime.DTMonth"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</May>
		<June public="1" get="inline" set="null" expr="cast 6" line="55" static="1">
			<x path="datetime.DTMonth"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</June>
		<July public="1" get="inline" set="null" expr="cast 7" line="56" static="1">
			<x path="datetime.DTMonth"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</July>
		<August public="1" get="inline" set="null" expr="cast 8" line="57" static="1">
			<x path="datetime.DTMonth"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</August>
		<September public="1" get="inline" set="null" expr="cast 9" line="58" static="1">
			<x path="datetime.DTMonth"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</September>
		<October public="1" get="inline" set="null" expr="cast 10" line="59" static="1">
			<x path="datetime.DTMonth"/>
			<meta>
				<m n=":value"><e>cast 10</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</October>
		<November public="1" get="inline" set="null" expr="cast 11" line="60" static="1">
			<x path="datetime.DTMonth"/>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</November>
		<December public="1" get="inline" set="null" expr="cast 12" line="61" static="1">
			<x path="datetime.DTMonth"/>
			<meta>
				<m n=":value"><e>cast 12</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</December>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="datetime.DTSnapDirection" params="" file="/usr/local/lib/haxeLibrary/datetime/git/src/datetime/DateTime.hx" module="datetime.DateTime">
		<this><x path="Int"/></this>
		<haxe_doc>* Snap directions for date/time snapping. See DateTime.snap()
*</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="datetime._DateTime.DTSnapDirection_Impl_" params="" file="/usr/local/lib/haxeLibrary/datetime/git/src/datetime/DateTime.hx" private="1" module="datetime.DateTime" extern="1" final="1">
	<Up public="1" get="inline" set="null" expr="cast 1" line="70" static="1">
		<x path="datetime.DTSnapDirection"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Up>
	<Down public="1" get="inline" set="null" expr="cast -1" line="71" static="1">
		<x path="datetime.DTSnapDirection"/>
		<meta>
			<m n=":value"><e>cast -1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Down>
	<Nearest public="1" get="inline" set="null" expr="cast 0" line="72" static="1">
		<x path="datetime.DTSnapDirection"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Nearest>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="datetime._DateTime.DTSnapDirection_Impl_" params="" file="/usr/local/lib/haxeLibrary/datetime/git/src/datetime/DateTime.hx" private="1" module="datetime.DateTime" extern="1" final="1">
		<Up public="1" get="inline" set="null" expr="cast 1" line="70" static="1">
			<x path="datetime.DTSnapDirection"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Up>
		<Down public="1" get="inline" set="null" expr="cast -1" line="71" static="1">
			<x path="datetime.DTSnapDirection"/>
			<meta>
				<m n=":value"><e>cast -1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Down>
		<Nearest public="1" get="inline" set="null" expr="cast 0" line="72" static="1">
			<x path="datetime.DTSnapDirection"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Nearest>
		<meta><m n=":enum"/></meta>
	</class>
	<enum path="datetime.DTSnap" params="" file="/usr/local/lib/haxeLibrary/datetime/git/src/datetime/DateTime.hx" module="datetime.DateTime">
		<Year a="direction"><x path="datetime.DTSnapDirection"/></Year>
		<Month a="direction"><x path="datetime.DTSnapDirection"/></Month>
		<Day a="direction"><x path="datetime.DTSnapDirection"/></Day>
		<Hour a="direction"><x path="datetime.DTSnapDirection"/></Hour>
		<Minute a="direction"><x path="datetime.DTSnapDirection"/></Minute>
		<Second a="direction"><x path="datetime.DTSnapDirection"/></Second>
		<Week a="direction:day">
			<x path="datetime.DTSnapDirection"/>
			<x path="datetime.DTWeekDay"/>
		</Week>
		<haxe_doc>* Time periods for date/time snapping. See DateTime.snap()
*</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<abstract path="datetime.DateTime" params="" file="/usr/local/lib/haxeLibrary/datetime/git/src/datetime/DateTime.hx">
		<from>
			<icast field="fromTime"><x path="Float"/></icast>
			<icast field="fromString"><c path="String"/></icast>
			<icast field="fromDate"><c path="Date"/></icast>
		</from>
		<this><x path="Float"/></this>
		<to>
			<icast field="getTime"><x path="Float"/></icast>
			<icast field="getDate"><c path="Date"/></icast>
		</to>
		<haxe_doc>* DateTime implementation based on amount of seconds since unix epoch.
* By default all date/time data returned is in UTC.
*</haxe_doc>
		<meta>
			<m n=":access"><e>datetime</e></m>
			<m n=":allow"><e>datetime</e></m>
		</meta>
		<impl><class path="datetime._DateTime.DateTime_Impl_" params="" file="/usr/local/lib/haxeLibrary/datetime/git/src/datetime/DateTime.hx" private="1" module="datetime.DateTime" final="1">
	<UNIX_EPOCH_DIFF get="inline" set="null" expr="62135596800.0" line="104" static="1">
		<x path="Float"/>
		<meta><m n=":value"><e>62135596800.0</e></m></meta>
		<haxe_doc>Difference bitween unix epoch and internal number of seconds</haxe_doc>
	</UNIX_EPOCH_DIFF>
	<SECONDS_IN_MINUTE public="1" get="inline" set="null" expr="60" line="106" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>60</e></m></meta>
	</SECONDS_IN_MINUTE>
	<SECONDS_IN_HOUR public="1" get="inline" set="null" expr="3600" line="107" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>3600</e></m></meta>
	</SECONDS_IN_HOUR>
	<SECONDS_IN_DAY public="1" get="inline" set="null" expr="86400" line="108" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>86400</e></m></meta>
	</SECONDS_IN_DAY>
	<SECONDS_IN_WEEK public="1" get="inline" set="null" expr="604800" line="109" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>604800</e></m></meta>
	</SECONDS_IN_WEEK>
	<SECONDS_IN_YEAR public="1" get="inline" set="null" expr="31536000" line="110" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>31536000</e></m></meta>
	</SECONDS_IN_YEAR>
	<SECONDS_IN_LEAP_YEAR public="1" get="inline" set="null" expr="31622400" line="111" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>31622400</e></m></meta>
	</SECONDS_IN_LEAP_YEAR>
	<SECONDS_IN_3_YEARS get="inline" set="null" expr="94608000" line="113" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>94608000</e></m></meta>
		<haxe_doc>3 normal years</haxe_doc>
	</SECONDS_IN_3_YEARS>
	<SECONDS_IN_QUAD get="inline" set="null" expr="126230400.0" line="115" static="1">
		<x path="Float"/>
		<meta><m n=":value"><e>126230400.0</e></m></meta>
		<haxe_doc>Amount of seconds in 4 years (3 normal years + 1 leap year)</haxe_doc>
	</SECONDS_IN_QUAD>
	<SECONDS_IN_HALF_QUAD get="inline" set="null" expr="63072000.0" line="117" static="1">
		<x path="Float"/>
		<meta><m n=":value"><e>63072000.0</e></m></meta>
		<haxe_doc>normal year + normal year</haxe_doc>
	</SECONDS_IN_HALF_QUAD>
	<SECONDS_IN_HALF_QUAD_LEAP get="inline" set="null" expr="63158400.0" line="119" static="1">
		<x path="Float"/>
		<meta><m n=":value"><e>63158400.0</e></m></meta>
		<haxe_doc>normal year + leap year</haxe_doc>
	</SECONDS_IN_HALF_QUAD_LEAP>
	<SECONDS_IN_3_PART_QUAD get="inline" set="null" expr="94694400.0" line="121" static="1">
		<x path="Float"/>
		<meta><m n=":value"><e>94694400.0</e></m></meta>
		<haxe_doc>normal year + normal year + leap year</haxe_doc>
	</SECONDS_IN_3_PART_QUAD>
	<SECONDS_IN_CQUAD get="inline" set="null" expr="12622780800.0" line="123" static="1">
		<x path="Float"/>
		<meta><m n=":value"><e>12622780800.0</e></m></meta>
		<haxe_doc>4 centuries, where the last century is leap (last year is leap), while others are not</haxe_doc>
	</SECONDS_IN_CQUAD>
	<SECONDS_IN_CENTURY get="inline" set="null" expr="3155673600.0" line="125" static="1">
		<x path="Float"/>
		<meta><m n=":value"><e>3155673600.0</e></m></meta>
		<haxe_doc>seconds in century, where the last (xx00-year) is not leap</haxe_doc>
	</SECONDS_IN_CENTURY>
	<SECONDS_IN_LEAP_CENTURY get="inline" set="null" expr="3155760000.0" line="127" static="1">
		<x path="Float"/>
		<meta><m n=":value"><e>3155760000.0</e></m></meta>
		<haxe_doc>seconds in century, where the last (xx00-year) is leap</haxe_doc>
	</SECONDS_IN_LEAP_CENTURY>
	<now public="1" get="inline" set="null" line="134" static="1">
		<f a=""><x path="datetime.DateTime"/></f>
		<haxe_doc><![CDATA[* Get current UTC date&time
    *]]></haxe_doc>
	</now>
	<local public="1" set="method" line="166" static="1">
		<f a=""><x path="datetime.DateTime"/></f>
		<haxe_doc><![CDATA[* Get current local date&time.
    *
    * Returns user's local date/time.]]></haxe_doc>
	</local>
	<make public="1" get="inline" set="null" line="184" static="1">
		<f a="?year:?month:?day:?hour:?minute:?second" v="1970:1:1:0:0:0">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":value"><e>{ second : 0, minute : 0, hour : 0, day : 1, month : 1, year : 1970 }</e></m></meta>
		<haxe_doc>* Build DateTime using specified components
    *
    * Builds UTC time.
    *
    * @param year
    * @param month  - 1-12
    * @param day    - 1-31
    * @param hour   - 0-23
    * @param minute - 0-59
    * @param second - 0-59</haxe_doc>
	</make>
	<fromTime public="1" get="inline" set="null" line="201" static="1">
		<f a="time">
			<x path="Float"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>* Make DateTime from unix timestamp (amount of seconds)
    *
    * Returns UTC time.</haxe_doc>
	</fromTime>
	<fromString public="1" get="inline" set="null" line="216" static="1">
		<f a="str">
			<c path="String"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>* Convert 'YYYY-MM-DD hh:mm:ss' or 'YYYY-MM-DD' or 'YYYY-MM-DDThh:mm:ss[.SSS]Z' to DateTime
    *
    * Assumes provided string represents UTC time.
    *
    * Returns UTC time.
    *
    * @throws String - if provided string is not in correct format</haxe_doc>
	</fromString>
	<fromDate public="1" get="inline" set="null" line="227" static="1">
		<f a="date">
			<c path="Date"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>* Make DateTime instance using unix timestamp retreived from `date`
    *
    * Returns UTC time.</haxe_doc>
	</fromDate>
	<daysInMonth public="1" get="inline" set="null" line="236" static="1">
		<f a="month:?isLeapYear" v=":false">
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Int"/>
		</f>
		<meta><m n=":value"><e>{ isLeapYear : false }</e></m></meta>
		<haxe_doc>* Get amount of days in specified `month` (1-12). If `month` is 2 (February), you need to
    * specify whether you want to get amount of days in leap year or not.</haxe_doc>
	</daysInMonth>
	<weeksInYear public="1" set="method" line="245" static="1">
		<f a="year">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<haxe_doc>* Get amount of weeks in `year` (52 or 53)
    *</haxe_doc>
	</weeksInYear>
	<isLeap public="1" get="inline" set="null" line="261" static="1">
		<f a="year">
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>* Check if specified `year` is a leap year
    *</haxe_doc>
	</isLeap>
	<getLocalOffset public="1" set="method" line="274" static="1">
		<f a=""><x path="Int"/></f>
		<haxe_doc>* Get current local time offset (in seconds) relative to UTC time.
    *</haxe_doc>
	</getLocalOffset>
	<_new public="1" get="inline" set="null" line="287" static="1">
		<f a="time">
			<x path="Float"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>* Constructor
    *
    * @param time - unix timestamp (amount of seconds since `1970-01-01 00:00:00`)</haxe_doc>
	</_new>
	<utc public="1" set="method" line="303" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="datetime.DateTime"/>
		</f>
		<haxe_doc>* Assuming this instance is your local time, convert it ot UTC using current
    * time offset of your timezone.
    *
    * Does not use your timezone data, just current time offset.
    *
    * If you dont care about your timezone and just need to convert your local time to utc,
    * use this method instead of `Timezone` class.
    *
    * Returns new DateTime instance</haxe_doc>
	</utc>
	<getYear public="1" set="method" line="312" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<haxe_doc>* Get year number (4 digits)
    *</haxe_doc>
	</getYear>
	<yearStart set="method" line="333" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<haxe_doc>* Get unix timestamp of a first second of this year
    *</haxe_doc>
	</yearStart>
	<monthStart set="method" line="356" static="1">
		<f a="this:?month" v=":0">
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":value"><e>{ month : 0 }</e></m></meta>
		<haxe_doc>* Get unix timestamp of the first second for specified `month` in this year (1-12)
    *
    * If `month` == 0, returns timestamp of current month of this DateTime instance.
    *</haxe_doc>
	</monthStart>
	<getMonthStart public="1" get="inline" set="null" line="366" static="1">
		<f a="this:month">
			<x path="Float"/>
			<x path="datetime.DTMonth"/>
			<x path="datetime.DateTime"/>
		</f>
		<haxe_doc>* Get date/time of the first second of specified `month`.
    *</haxe_doc>
	</getMonthStart>
	<isLeapYear public="1" set="method" line="375" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>* Check if this is leap year
    *</haxe_doc>
	</isLeapYear>
	<getMonth public="1" get="inline" set="null" line="384" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<haxe_doc>* Get month number (1-12)
    *</haxe_doc>
	</getMonth>
	<getDay public="1" get="inline" set="null" line="394" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<haxe_doc>* Get day number (1-31)
    *</haxe_doc>
	</getDay>
	<daysInThisMonth public="1" get="inline" set="null" line="404" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<haxe_doc>* Return amount of days in current month
    *</haxe_doc>
	</daysInThisMonth>
	<getYearDay public="1" get="inline" set="null" line="414" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<haxe_doc>* Get day number within a year (1-366)
    *</haxe_doc>
	</getYearDay>
	<weeksInThisYear public="1" set="method" line="423" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<haxe_doc>* Get amount of weeks in this year (52 or 53)
    *</haxe_doc>
	</weeksInThisYear>
	<getWeekDay public="1" set="method" line="436" static="1">
		<f a="this:?mondayBased" v=":false">
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Int"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
		<haxe_doc>* Get day of the week.
    *
    * Returns 0-6 (Sunday-Saturday) by default.
    *
    * Returns 1-7 (Monday-Sunday) if `mondayBased` = true
    *</haxe_doc>
	</getWeekDay>
	<getWeekDayNum public="1" get="inline" set="null" line="455" static="1">
		<f a="this:weekDay:?num" v="::1">
			<x path="Float"/>
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":value"><e>{ num : 1 }</e></m></meta>
		<haxe_doc>* Get DateTime of a specified `weekDay` in this month, which is the `num`st in current month.
    *
    *   E.g. get DateTime of the second Sunday in current month.
    *   If `num` is negative, then required `weekDay` will be searched from the end of this month.
    *   If `num` == 0, returns a copy of this DateTime instance</haxe_doc>
	</getWeekDayNum>
	<getWeek public="1" set="method" line="464" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<haxe_doc>* Get current week number within a year according to the ISO 8601 date and time standard
    *</haxe_doc>
	</getWeek>
	<getHour public="1" get="inline" set="null" line="480" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<haxe_doc>* Get hour number (0-23)
    *</haxe_doc>
	</getHour>
	<getHour12 public="1" set="method" line="489" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<haxe_doc>* Get hour number in 12-hour-clock
    *</haxe_doc>
	</getHour12>
	<getMinute public="1" get="inline" set="null" line="505" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<haxe_doc>* Get minumte number (0-59)
    *</haxe_doc>
	</getMinute>
	<getSecond public="1" get="inline" set="null" line="514" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<haxe_doc>* Get second number (0-59)
    *</haxe_doc>
	</getSecond>
	<add public="1" set="method" line="523" static="1">
		<f a="this:period">
			<x path="Float"/>
			<e path="datetime.DTPeriod"/>
			<x path="datetime.DateTime"/>
		</f>
		<haxe_doc>* Add time period to this timestamp.
    * Returns new DateTime.</haxe_doc>
	</add>
	<sub set="method" line="542" static="1">
		<f a="this:period">
			<x path="Float"/>
			<e path="datetime.DTPeriod"/>
			<x path="datetime.DateTime"/>
		</f>
		<haxe_doc>* Substruct time period from this timestamp.
    * This method is used for operator overloading.</haxe_doc>
	</sub>
	<snap public="1" set="method" line="561" static="1">
		<f a="this:period">
			<x path="Float"/>
			<e path="datetime.DTSnap"/>
			<x path="datetime.DateTime"/>
		</f>
		<haxe_doc>* Snap to nearest year, month, day, hour, minute, second or week.
    * Returns new DateTime.</haxe_doc>
	</snap>
	<toString public="1" set="method" line="580" static="1">
		<f a="this">
			<x path="Float"/>
			<c path="String"/>
		</f>
		<haxe_doc>* Convert to string representation in format YYYY-MM-DD HH:MM:SS
    *</haxe_doc>
	</toString>
	<format public="1" set="method" line="642" static="1">
		<f a="this:format">
			<x path="Float"/>
			<c path="String"/>
			<c path="String"/>
		</f>
		<haxe_doc>* Format this timestamp according to `format`
    *
    * Day
    *
    *   - `%d`  Two-digit day of the month (with leading zeros) 01 to 31
    *   - `%e`  Day of the month, with a space preceding single digits. 1 to 31
    *   - `%j`  Day of the year, 3 digits with leading zeros    001 to 366
    *   - `%u`  ISO-8601 numeric representation of the day of the week  1 (for Monday) though 7 (for Sunday)
    *   - `%w`  Numeric representation of the day of the week   0 (for Sunday) through 6 (for Saturday)
    *
    * Month
    *
    *   - `%m`  Two digit representation of the month   01 (for January) through 12 (for December)
    *
    * Year
    *
    *   - `%C`  Two digit representation of the century (year divided by 100, truncated to an integer)  19 for the 20th Century
    *   - `%y`  Two digit representation of the year    Example: 09 for 2009, 79 for 1979
    *   - `%Y`  Four digit representation for the year  Example: 2038
    *
    * Week
    *
    *   - `%V`  ISO-8601:1988 week number of the given year, starting with the first week of the year with at least 4 weekdays,
    *   -     with Monday being the start of the week 01 through 53
    *
    * Time
    *
    *   - `%H`  Two digit representation of the hour in 24-hour format  00 through 23
    *   - `%k`  Two digit representation of the hour in 24-hour format, with a space preceding single digits    0 through 23
    *   - `%I`  Two digit representation of the hour in 12-hour format  01 through 12
    *   - `%l`  (lower-case 'L') Hour in 12-hour format, with a space preceding single digits    1 through 12
    *   - `%M`  Two digit representation of the minute  00 through 59
    *   - `%p`  upper-case 'AM' or 'PM' based on the given time Example: AM for 00:31, PM for 22:23
    *   - `%P`  lower-case 'am' or 'pm' based on the given time Example: am for 00:31, pm for 22:23
    *   - `%r`  Same as "%I:%M:%S %p"   Example: 09:34:17 PM for 21:34:17
    *   - `%R`  Same as "%H:%M" Example: 00:35 for 12:35 AM, 16:44 for 4:44 PM
    *   - `%S`  Two digit representation of the second  00 through 59
    *   - `%T`  Same as "%H:%M:%S"  Example: 21:34:17 for 09:34:17 PM
    *
    * Time and Date Stamps
    *
    *   - `%D`  Same as "%m/%d/%y"  Example: 02/05/09 for February 5, 2009
    *   - `%F`  Same as "%Y-%m-%d" (commonly used in database datestamps)   Example: 2009-02-05 for February 5, 2009
    *   - `%s`  Unix Epoch Time timestamp Example: 305815200 for September 10, 1979 08:40:00 AM
    *
    * Miscellaneous
    *
    *   - `%%`  A literal percentage character ("%")</haxe_doc>
	</format>
	<getTime public="1" get="inline" set="null" line="652" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":to"/></meta>
		<haxe_doc>* Get unix timestamp (amount of seconds)
    *</haxe_doc>
	</getTime>
	<getDate public="1" get="inline" set="null" line="662" static="1">
		<f a="this">
			<x path="Float"/>
			<c path="Date"/>
		</f>
		<meta><m n=":to"/></meta>
		<haxe_doc>* Create standart `Date` class instance using unix timestamp of this one
    *</haxe_doc>
	</getDate>
	<gt get="inline" set="null" line="671" static="1">
		<f a="this:dt">
			<x path="Float"/>
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		<haxe_doc>* DateTime comparison
    *</haxe_doc>
	</gt>
	<gte get="inline" set="null" line="672" static="1">
		<f a="this:dt">
			<x path="Float"/>
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gte>
	<lt get="inline" set="null" line="673" static="1">
		<f a="this:dt">
			<x path="Float"/>
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</lt>
	<lte get="inline" set="null" line="674" static="1">
		<f a="this:dt">
			<x path="Float"/>
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lte>
	<eq get="inline" set="null" line="675" static="1">
		<f a="this:dt">
			<x path="Float"/>
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
	</eq>
	<neq get="inline" set="null" line="676" static="1">
		<f a="this:dt">
			<x path="Float"/>
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
	</neq>
	<mathPlus1 get="inline" set="null" line="683" static="1">
		<f a="this:period">
			<x path="Float"/>
			<e path="datetime.DTPeriod"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc>* Operator overloading for simple writing `.add()` method
    *</haxe_doc>
	</mathPlus1>
	<mathPlus2 get="inline" set="null" line="684" static="1">
		<f a="this:period">
			<x path="Float"/>
			<e path="datetime.DTPeriod"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":op"><e>B + A</e></m></meta>
	</mathPlus2>
	<mathPlus3 get="inline" set="null" line="685" static="1">
		<f a="this:period">
			<x path="Float"/>
			<e path="datetime.DTPeriod"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":op"><e>A += B</e></m></meta>
	</mathPlus3>
	<mathMinus1 get="inline" set="null" line="686" static="1">
		<f a="this:period">
			<x path="Float"/>
			<e path="datetime.DTPeriod"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</mathMinus1>
	<mathMinus2 get="inline" set="null" line="687" static="1">
		<f a="this:period">
			<x path="Float"/>
			<e path="datetime.DTPeriod"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":op"><e>A -= B</e></m></meta>
	</mathMinus2>
	<dtiCreate get="inline" set="null" line="694" static="1">
		<f a="this:begin">
			<x path="Float"/>
			<x path="datetime.DateTime"/>
			<x path="datetime.DateTimeInterval"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc>* Operator overloading for simple usage of DateTimeInterval
    *</haxe_doc>
	</dtiCreate>
	<dtiMinus get="inline" set="null" line="695" static="1">
		<f a="this:dti">
			<x path="Float"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</dtiMinus>
	<dtiPlus1 get="inline" set="null" line="696" static="1">
		<f a="this:dti">
			<x path="Float"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</dtiPlus1>
	<dtiPlus2 get="inline" set="null" line="697" static="1">
		<f a="this:dti">
			<x path="Float"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":op"><e>B + A</e></m></meta>
	</dtiPlus2>
	<dtiMinus2 get="inline" set="null" line="698" static="1">
		<f a="this:dti">
			<x path="Float"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":op"><e>A -= B</e></m></meta>
	</dtiMinus2>
	<dtiPlus3 get="inline" set="null" line="699" static="1">
		<f a="this:dti">
			<x path="Float"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":op"><e>A += B</e></m></meta>
	</dtiPlus3>
	<meta>
		<m n=":directlyUsed"/>
		<m n=":allow"><e>datetime</e></m>
		<m n=":access"><e>datetime</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="datetime._DateTime.DateTime_Impl_" params="" file="/usr/local/lib/haxeLibrary/datetime/git/src/datetime/DateTime.hx" private="1" module="datetime.DateTime" final="1">
		<UNIX_EPOCH_DIFF get="inline" set="null" expr="62135596800.0" line="104" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>62135596800.0</e></m></meta>
			<haxe_doc>Difference bitween unix epoch and internal number of seconds</haxe_doc>
		</UNIX_EPOCH_DIFF>
		<SECONDS_IN_MINUTE public="1" get="inline" set="null" expr="60" line="106" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>60</e></m></meta>
		</SECONDS_IN_MINUTE>
		<SECONDS_IN_HOUR public="1" get="inline" set="null" expr="3600" line="107" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3600</e></m></meta>
		</SECONDS_IN_HOUR>
		<SECONDS_IN_DAY public="1" get="inline" set="null" expr="86400" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>86400</e></m></meta>
		</SECONDS_IN_DAY>
		<SECONDS_IN_WEEK public="1" get="inline" set="null" expr="604800" line="109" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>604800</e></m></meta>
		</SECONDS_IN_WEEK>
		<SECONDS_IN_YEAR public="1" get="inline" set="null" expr="31536000" line="110" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>31536000</e></m></meta>
		</SECONDS_IN_YEAR>
		<SECONDS_IN_LEAP_YEAR public="1" get="inline" set="null" expr="31622400" line="111" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>31622400</e></m></meta>
		</SECONDS_IN_LEAP_YEAR>
		<SECONDS_IN_3_YEARS get="inline" set="null" expr="94608000" line="113" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>94608000</e></m></meta>
			<haxe_doc>3 normal years</haxe_doc>
		</SECONDS_IN_3_YEARS>
		<SECONDS_IN_QUAD get="inline" set="null" expr="126230400.0" line="115" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>126230400.0</e></m></meta>
			<haxe_doc>Amount of seconds in 4 years (3 normal years + 1 leap year)</haxe_doc>
		</SECONDS_IN_QUAD>
		<SECONDS_IN_HALF_QUAD get="inline" set="null" expr="63072000.0" line="117" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>63072000.0</e></m></meta>
			<haxe_doc>normal year + normal year</haxe_doc>
		</SECONDS_IN_HALF_QUAD>
		<SECONDS_IN_HALF_QUAD_LEAP get="inline" set="null" expr="63158400.0" line="119" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>63158400.0</e></m></meta>
			<haxe_doc>normal year + leap year</haxe_doc>
		</SECONDS_IN_HALF_QUAD_LEAP>
		<SECONDS_IN_3_PART_QUAD get="inline" set="null" expr="94694400.0" line="121" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>94694400.0</e></m></meta>
			<haxe_doc>normal year + normal year + leap year</haxe_doc>
		</SECONDS_IN_3_PART_QUAD>
		<SECONDS_IN_CQUAD get="inline" set="null" expr="12622780800.0" line="123" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>12622780800.0</e></m></meta>
			<haxe_doc>4 centuries, where the last century is leap (last year is leap), while others are not</haxe_doc>
		</SECONDS_IN_CQUAD>
		<SECONDS_IN_CENTURY get="inline" set="null" expr="3155673600.0" line="125" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>3155673600.0</e></m></meta>
			<haxe_doc>seconds in century, where the last (xx00-year) is not leap</haxe_doc>
		</SECONDS_IN_CENTURY>
		<SECONDS_IN_LEAP_CENTURY get="inline" set="null" expr="3155760000.0" line="127" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>3155760000.0</e></m></meta>
			<haxe_doc>seconds in century, where the last (xx00-year) is leap</haxe_doc>
		</SECONDS_IN_LEAP_CENTURY>
		<now public="1" get="inline" set="null" line="134" static="1">
			<f a=""><x path="datetime.DateTime"/></f>
			<haxe_doc><![CDATA[* Get current UTC date&time
    *]]></haxe_doc>
		</now>
		<local public="1" set="method" line="166" static="1">
			<f a=""><x path="datetime.DateTime"/></f>
			<haxe_doc><![CDATA[* Get current local date&time.
    *
    * Returns user's local date/time.]]></haxe_doc>
		</local>
		<make public="1" get="inline" set="null" line="184" static="1">
			<f a="?year:?month:?day:?hour:?minute:?second" v="1970:1:1:0:0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":value"><e>{ second : 0, minute : 0, hour : 0, day : 1, month : 1, year : 1970 }</e></m></meta>
			<haxe_doc>* Build DateTime using specified components
    *
    * Builds UTC time.
    *
    * @param year
    * @param month  - 1-12
    * @param day    - 1-31
    * @param hour   - 0-23
    * @param minute - 0-59
    * @param second - 0-59</haxe_doc>
		</make>
		<fromTime public="1" get="inline" set="null" line="201" static="1">
			<f a="time">
				<x path="Float"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>* Make DateTime from unix timestamp (amount of seconds)
    *
    * Returns UTC time.</haxe_doc>
		</fromTime>
		<fromString public="1" get="inline" set="null" line="216" static="1">
			<f a="str">
				<c path="String"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>* Convert 'YYYY-MM-DD hh:mm:ss' or 'YYYY-MM-DD' or 'YYYY-MM-DDThh:mm:ss[.SSS]Z' to DateTime
    *
    * Assumes provided string represents UTC time.
    *
    * Returns UTC time.
    *
    * @throws String - if provided string is not in correct format</haxe_doc>
		</fromString>
		<fromDate public="1" get="inline" set="null" line="227" static="1">
			<f a="date">
				<c path="Date"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>* Make DateTime instance using unix timestamp retreived from `date`
    *
    * Returns UTC time.</haxe_doc>
		</fromDate>
		<daysInMonth public="1" get="inline" set="null" line="236" static="1">
			<f a="month:?isLeapYear" v=":false">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ isLeapYear : false }</e></m></meta>
			<haxe_doc>* Get amount of days in specified `month` (1-12). If `month` is 2 (February), you need to
    * specify whether you want to get amount of days in leap year or not.</haxe_doc>
		</daysInMonth>
		<weeksInYear public="1" set="method" line="245" static="1">
			<f a="year">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get amount of weeks in `year` (52 or 53)
    *</haxe_doc>
		</weeksInYear>
		<isLeap public="1" get="inline" set="null" line="261" static="1">
			<f a="year">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Check if specified `year` is a leap year
    *</haxe_doc>
		</isLeap>
		<getLocalOffset public="1" set="method" line="274" static="1">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get current local time offset (in seconds) relative to UTC time.
    *</haxe_doc>
		</getLocalOffset>
		<_new public="1" get="inline" set="null" line="287" static="1">
			<f a="time">
				<x path="Float"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>* Constructor
    *
    * @param time - unix timestamp (amount of seconds since `1970-01-01 00:00:00`)</haxe_doc>
		</_new>
		<utc public="1" set="method" line="303" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="datetime.DateTime"/>
			</f>
			<haxe_doc>* Assuming this instance is your local time, convert it ot UTC using current
    * time offset of your timezone.
    *
    * Does not use your timezone data, just current time offset.
    *
    * If you dont care about your timezone and just need to convert your local time to utc,
    * use this method instead of `Timezone` class.
    *
    * Returns new DateTime instance</haxe_doc>
		</utc>
		<getYear public="1" set="method" line="312" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get year number (4 digits)
    *</haxe_doc>
		</getYear>
		<yearStart set="method" line="333" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Get unix timestamp of a first second of this year
    *</haxe_doc>
		</yearStart>
		<monthStart set="method" line="356" static="1">
			<f a="this:?month" v=":0">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ month : 0 }</e></m></meta>
			<haxe_doc>* Get unix timestamp of the first second for specified `month` in this year (1-12)
    *
    * If `month` == 0, returns timestamp of current month of this DateTime instance.
    *</haxe_doc>
		</monthStart>
		<getMonthStart public="1" get="inline" set="null" line="366" static="1">
			<f a="this:month">
				<x path="Float"/>
				<x path="datetime.DTMonth"/>
				<x path="datetime.DateTime"/>
			</f>
			<haxe_doc>* Get date/time of the first second of specified `month`.
    *</haxe_doc>
		</getMonthStart>
		<isLeapYear public="1" set="method" line="375" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Check if this is leap year
    *</haxe_doc>
		</isLeapYear>
		<getMonth public="1" get="inline" set="null" line="384" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get month number (1-12)
    *</haxe_doc>
		</getMonth>
		<getDay public="1" get="inline" set="null" line="394" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get day number (1-31)
    *</haxe_doc>
		</getDay>
		<daysInThisMonth public="1" get="inline" set="null" line="404" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Return amount of days in current month
    *</haxe_doc>
		</daysInThisMonth>
		<getYearDay public="1" get="inline" set="null" line="414" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get day number within a year (1-366)
    *</haxe_doc>
		</getYearDay>
		<weeksInThisYear public="1" set="method" line="423" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get amount of weeks in this year (52 or 53)
    *</haxe_doc>
		</weeksInThisYear>
		<getWeekDay public="1" set="method" line="436" static="1">
			<f a="this:?mondayBased" v=":false">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
			<haxe_doc>* Get day of the week.
    *
    * Returns 0-6 (Sunday-Saturday) by default.
    *
    * Returns 1-7 (Monday-Sunday) if `mondayBased` = true
    *</haxe_doc>
		</getWeekDay>
		<getWeekDayNum public="1" get="inline" set="null" line="455" static="1">
			<f a="this:weekDay:?num" v="::1">
				<x path="Float"/>
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":value"><e>{ num : 1 }</e></m></meta>
			<haxe_doc>* Get DateTime of a specified `weekDay` in this month, which is the `num`st in current month.
    *
    *   E.g. get DateTime of the second Sunday in current month.
    *   If `num` is negative, then required `weekDay` will be searched from the end of this month.
    *   If `num` == 0, returns a copy of this DateTime instance</haxe_doc>
		</getWeekDayNum>
		<getWeek public="1" set="method" line="464" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get current week number within a year according to the ISO 8601 date and time standard
    *</haxe_doc>
		</getWeek>
		<getHour public="1" get="inline" set="null" line="480" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get hour number (0-23)
    *</haxe_doc>
		</getHour>
		<getHour12 public="1" set="method" line="489" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get hour number in 12-hour-clock
    *</haxe_doc>
		</getHour12>
		<getMinute public="1" get="inline" set="null" line="505" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get minumte number (0-59)
    *</haxe_doc>
		</getMinute>
		<getSecond public="1" get="inline" set="null" line="514" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get second number (0-59)
    *</haxe_doc>
		</getSecond>
		<add public="1" set="method" line="523" static="1">
			<f a="this:period">
				<x path="Float"/>
				<e path="datetime.DTPeriod"/>
				<x path="datetime.DateTime"/>
			</f>
			<haxe_doc>* Add time period to this timestamp.
    * Returns new DateTime.</haxe_doc>
		</add>
		<sub set="method" line="542" static="1">
			<f a="this:period">
				<x path="Float"/>
				<e path="datetime.DTPeriod"/>
				<x path="datetime.DateTime"/>
			</f>
			<haxe_doc>* Substruct time period from this timestamp.
    * This method is used for operator overloading.</haxe_doc>
		</sub>
		<snap public="1" set="method" line="561" static="1">
			<f a="this:period">
				<x path="Float"/>
				<e path="datetime.DTSnap"/>
				<x path="datetime.DateTime"/>
			</f>
			<haxe_doc>* Snap to nearest year, month, day, hour, minute, second or week.
    * Returns new DateTime.</haxe_doc>
		</snap>
		<toString public="1" set="method" line="580" static="1">
			<f a="this">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Convert to string representation in format YYYY-MM-DD HH:MM:SS
    *</haxe_doc>
		</toString>
		<format public="1" set="method" line="642" static="1">
			<f a="this:format">
				<x path="Float"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Format this timestamp according to `format`
    *
    * Day
    *
    *   - `%d`  Two-digit day of the month (with leading zeros) 01 to 31
    *   - `%e`  Day of the month, with a space preceding single digits. 1 to 31
    *   - `%j`  Day of the year, 3 digits with leading zeros    001 to 366
    *   - `%u`  ISO-8601 numeric representation of the day of the week  1 (for Monday) though 7 (for Sunday)
    *   - `%w`  Numeric representation of the day of the week   0 (for Sunday) through 6 (for Saturday)
    *
    * Month
    *
    *   - `%m`  Two digit representation of the month   01 (for January) through 12 (for December)
    *
    * Year
    *
    *   - `%C`  Two digit representation of the century (year divided by 100, truncated to an integer)  19 for the 20th Century
    *   - `%y`  Two digit representation of the year    Example: 09 for 2009, 79 for 1979
    *   - `%Y`  Four digit representation for the year  Example: 2038
    *
    * Week
    *
    *   - `%V`  ISO-8601:1988 week number of the given year, starting with the first week of the year with at least 4 weekdays,
    *   -     with Monday being the start of the week 01 through 53
    *
    * Time
    *
    *   - `%H`  Two digit representation of the hour in 24-hour format  00 through 23
    *   - `%k`  Two digit representation of the hour in 24-hour format, with a space preceding single digits    0 through 23
    *   - `%I`  Two digit representation of the hour in 12-hour format  01 through 12
    *   - `%l`  (lower-case 'L') Hour in 12-hour format, with a space preceding single digits    1 through 12
    *   - `%M`  Two digit representation of the minute  00 through 59
    *   - `%p`  upper-case 'AM' or 'PM' based on the given time Example: AM for 00:31, PM for 22:23
    *   - `%P`  lower-case 'am' or 'pm' based on the given time Example: am for 00:31, pm for 22:23
    *   - `%r`  Same as "%I:%M:%S %p"   Example: 09:34:17 PM for 21:34:17
    *   - `%R`  Same as "%H:%M" Example: 00:35 for 12:35 AM, 16:44 for 4:44 PM
    *   - `%S`  Two digit representation of the second  00 through 59
    *   - `%T`  Same as "%H:%M:%S"  Example: 21:34:17 for 09:34:17 PM
    *
    * Time and Date Stamps
    *
    *   - `%D`  Same as "%m/%d/%y"  Example: 02/05/09 for February 5, 2009
    *   - `%F`  Same as "%Y-%m-%d" (commonly used in database datestamps)   Example: 2009-02-05 for February 5, 2009
    *   - `%s`  Unix Epoch Time timestamp Example: 305815200 for September 10, 1979 08:40:00 AM
    *
    * Miscellaneous
    *
    *   - `%%`  A literal percentage character ("%")</haxe_doc>
		</format>
		<getTime public="1" get="inline" set="null" line="652" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":to"/></meta>
			<haxe_doc>* Get unix timestamp (amount of seconds)
    *</haxe_doc>
		</getTime>
		<getDate public="1" get="inline" set="null" line="662" static="1">
			<f a="this">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<meta><m n=":to"/></meta>
			<haxe_doc>* Create standart `Date` class instance using unix timestamp of this one
    *</haxe_doc>
		</getDate>
		<gt get="inline" set="null" line="671" static="1">
			<f a="this:dt">
				<x path="Float"/>
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
			<haxe_doc>* DateTime comparison
    *</haxe_doc>
		</gt>
		<gte get="inline" set="null" line="672" static="1">
			<f a="this:dt">
				<x path="Float"/>
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gte>
		<lt get="inline" set="null" line="673" static="1">
			<f a="this:dt">
				<x path="Float"/>
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</lt>
		<lte get="inline" set="null" line="674" static="1">
			<f a="this:dt">
				<x path="Float"/>
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lte>
		<eq get="inline" set="null" line="675" static="1">
			<f a="this:dt">
				<x path="Float"/>
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
		</eq>
		<neq get="inline" set="null" line="676" static="1">
			<f a="this:dt">
				<x path="Float"/>
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
		</neq>
		<mathPlus1 get="inline" set="null" line="683" static="1">
			<f a="this:period">
				<x path="Float"/>
				<e path="datetime.DTPeriod"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc>* Operator overloading for simple writing `.add()` method
    *</haxe_doc>
		</mathPlus1>
		<mathPlus2 get="inline" set="null" line="684" static="1">
			<f a="this:period">
				<x path="Float"/>
				<e path="datetime.DTPeriod"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":op"><e>B + A</e></m></meta>
		</mathPlus2>
		<mathPlus3 get="inline" set="null" line="685" static="1">
			<f a="this:period">
				<x path="Float"/>
				<e path="datetime.DTPeriod"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":op"><e>A += B</e></m></meta>
		</mathPlus3>
		<mathMinus1 get="inline" set="null" line="686" static="1">
			<f a="this:period">
				<x path="Float"/>
				<e path="datetime.DTPeriod"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</mathMinus1>
		<mathMinus2 get="inline" set="null" line="687" static="1">
			<f a="this:period">
				<x path="Float"/>
				<e path="datetime.DTPeriod"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":op"><e>A -= B</e></m></meta>
		</mathMinus2>
		<dtiCreate get="inline" set="null" line="694" static="1">
			<f a="this:begin">
				<x path="Float"/>
				<x path="datetime.DateTime"/>
				<x path="datetime.DateTimeInterval"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc>* Operator overloading for simple usage of DateTimeInterval
    *</haxe_doc>
		</dtiCreate>
		<dtiMinus get="inline" set="null" line="695" static="1">
			<f a="this:dti">
				<x path="Float"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</dtiMinus>
		<dtiPlus1 get="inline" set="null" line="696" static="1">
			<f a="this:dti">
				<x path="Float"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</dtiPlus1>
		<dtiPlus2 get="inline" set="null" line="697" static="1">
			<f a="this:dti">
				<x path="Float"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":op"><e>B + A</e></m></meta>
		</dtiPlus2>
		<dtiMinus2 get="inline" set="null" line="698" static="1">
			<f a="this:dti">
				<x path="Float"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":op"><e>A -= B</e></m></meta>
		</dtiMinus2>
		<dtiPlus3 get="inline" set="null" line="699" static="1">
			<f a="this:dti">
				<x path="Float"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":op"><e>A += B</e></m></meta>
		</dtiPlus3>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>datetime</e></m>
			<m n=":access"><e>datetime</e></m>
		</meta>
	</class>
	<abstract path="datetime.DateTimeInterval" params="" file="/usr/local/lib/haxeLibrary/datetime/git/src/datetime/DateTimeInterval.hx">
		<from><icast><c path="datetime.cores.DateTimeIntervalCore"/></icast></from>
		<this><c path="datetime.cores.DateTimeIntervalCore"/></this>
		<to><icast><c path="datetime.cores.DateTimeIntervalCore"/></icast></to>
		<haxe_doc>* Intervals implementation.
*</haxe_doc>
		<meta><m n=":forward">
	<e>negative</e>
	<e>getYears</e>
	<e>getMonths</e>
	<e>getDays</e>
	<e>getHours</e>
	<e>getMinutes</e>
	<e>getSeconds</e>
	<e>getTotalMonths</e>
	<e>getTotalDays</e>
	<e>getTotalHours</e>
	<e>getTotalMinutes</e>
	<e>getTotalSeconds</e>
	<e>getTotalWeeks</e>
</m></meta>
		<impl><class path="datetime._DateTimeInterval.DateTimeInterval_Impl_" params="" file="/usr/local/lib/haxeLibrary/datetime/git/src/datetime/DateTimeInterval.hx" private="1" module="datetime.DateTimeInterval" final="1">
	<create public="1" set="method" line="22" static="1">
		<f a="begin:end">
			<x path="datetime.DateTime"/>
			<x path="datetime.DateTime"/>
			<x path="datetime.DateTimeInterval"/>
		</f>
		<haxe_doc>* Create interval as difference between two DateTime instances
    *</haxe_doc>
	</create>
	<_new public="1" get="inline" set="null" line="36" static="1">
		<f a="dtic">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="datetime.DateTimeInterval"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>* Constructor.
    *</haxe_doc>
	</_new>
	<invert public="1" get="inline" set="null" line="45" static="1">
		<f a="this">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="datetime.DateTimeInterval"/>
		</f>
		<haxe_doc>* Invert the sign of this interval. Modifies internal state. Returns itself.
    *</haxe_doc>
	</invert>
	<addTo public="1" set="method" line="56" static="1">
		<f a="this:dt">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="datetime.DateTime"/>
			<x path="datetime.DateTime"/>
		</f>
		<haxe_doc>* Add this interval to specified DateTime instance.
    *
    * Returns new DateTime.</haxe_doc>
	</addTo>
	<subFrom public="1" set="method" line="66" static="1">
		<f a="this:dt">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="datetime.DateTime"/>
			<x path="datetime.DateTime"/>
		</f>
		<haxe_doc>* Substract this interval from specified DateTime instance.
    *
    * Returns new DateTime.</haxe_doc>
	</subFrom>
	<toString public="1" set="method" line="75" static="1">
		<f a="this">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<c path="String"/>
		</f>
		<haxe_doc>* Get string representation of this interval.
    *</haxe_doc>
	</toString>
	<sign public="1" get="inline" set="null" line="99" static="1">
		<f a="this">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="Int"/>
		</f>
		<haxe_doc>*  Returns -1 if this is a negative interval, +1 otherwise
    *</haxe_doc>
	</sign>
	<format public="1" get="inline" set="null" line="128" static="1">
		<f a="this:format">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<c path="String"/>
			<c path="String"/>
		</f>
		<haxe_doc>* Formats the interval
    *
    *   - `%%` Literal %. Example:   %
    *   - `%Y` Years, numeric, at least 2 digits with leading 0. Example:    01, 03
    *   - `%y` Years, numeric. Example:  1, 3
    *   - `%M` Months, numeric, at least 2 digits with leading 0. Example:   01, 03, 12
    *   - `%m` Months, numeric. Example: 1, 3, 12
    *   - `%b` Total number of months. Example:   2, 15, 36
    *   - `%D` Days, numeric, at least 2 digits with leading 0. Example: 01, 03, 31
    *   - `%d` Days, numeric. Example:   1, 3, 31
    *   - `%a` Total number of days. Example:   4, 18, 8123
    *   - `%H` Hours, numeric, at least 2 digits with leading 0. Example:    01, 03, 23
    *   - `%h` Hours, numeric. Example:  1, 3, 23
    *   - `%c` Total number of hours. Example:   4, 18, 8123
    *   - `%I` Minutes, numeric, at least 2 digits with leading 0. Example:  01, 03, 59
    *   - `%i` Minutes, numeric. Example:    1, 3, 59
    *   - `%e` Total number of minutes. Example:   4, 18, 8123
    *   - `%S` Seconds, numeric, at least 2 digits with leading 0. Example:  01, 03, 57
    *   - `%s` Seconds, numeric. Example:    1, 3, 57
    *   - `%f` Total number of seconds. Example:   4, 18, 8123
    *   - `%R` Sign "-" when negative, "+" when positive. Example:   -, +
    *   - `%r` Sign "-" when negative, empty when positive. Example: -,</haxe_doc>
	</format>
	<formatPartial public="1" get="inline" set="null" line="144" static="1">
		<f a="this:format">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<c path="Array"><c path="String"/></c>
			<c path="Array"><c path="String"/></c>
		</f>
		<haxe_doc>* Formats  each string in `format` array. Each string can have only one placeholder.
    *
    * Supported placeholders: see `format()` method description except `r,R,%` placeholders.
    *
    * Returns new array with elements, whose corresponding strings in `format` array were filled with non-zero values.
    *
    * Example: if interval contains 0 years, 2 months and 10 days, then
    * `interval.format(['%y years', '%m months', '%d days']).join(',')` will return `'2 months, 10 days'`
    *</haxe_doc>
	</formatPartial>
	<eq get="inline" set="null" line="153" static="1">
		<f a="this:dtic">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc>* DateTimeInterval comparison
    *</haxe_doc>
	</eq>
	<gt get="inline" set="null" line="158" static="1">
		<f a="this:dtic">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gt>
	<gte get="inline" set="null" line="165" static="1">
		<f a="this:dtic">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gte>
	<lt get="inline" set="null" line="166" static="1">
		<f a="this:dtic">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</lt>
	<lte get="inline" set="null" line="167" static="1">
		<f a="this:dtic">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lte>
	<neq get="inline" set="null" line="168" static="1">
		<f a="this:dtic">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
	</neq>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="datetime._DateTimeInterval.DateTimeInterval_Impl_" params="" file="/usr/local/lib/haxeLibrary/datetime/git/src/datetime/DateTimeInterval.hx" private="1" module="datetime.DateTimeInterval" final="1">
		<create public="1" set="method" line="22" static="1">
			<f a="begin:end">
				<x path="datetime.DateTime"/>
				<x path="datetime.DateTime"/>
				<x path="datetime.DateTimeInterval"/>
			</f>
			<haxe_doc>* Create interval as difference between two DateTime instances
    *</haxe_doc>
		</create>
		<_new public="1" get="inline" set="null" line="36" static="1">
			<f a="dtic">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="datetime.DateTimeInterval"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>* Constructor.
    *</haxe_doc>
		</_new>
		<invert public="1" get="inline" set="null" line="45" static="1">
			<f a="this">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="datetime.DateTimeInterval"/>
			</f>
			<haxe_doc>* Invert the sign of this interval. Modifies internal state. Returns itself.
    *</haxe_doc>
		</invert>
		<addTo public="1" set="method" line="56" static="1">
			<f a="this:dt">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="datetime.DateTime"/>
				<x path="datetime.DateTime"/>
			</f>
			<haxe_doc>* Add this interval to specified DateTime instance.
    *
    * Returns new DateTime.</haxe_doc>
		</addTo>
		<subFrom public="1" set="method" line="66" static="1">
			<f a="this:dt">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="datetime.DateTime"/>
				<x path="datetime.DateTime"/>
			</f>
			<haxe_doc>* Substract this interval from specified DateTime instance.
    *
    * Returns new DateTime.</haxe_doc>
		</subFrom>
		<toString public="1" set="method" line="75" static="1">
			<f a="this">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Get string representation of this interval.
    *</haxe_doc>
		</toString>
		<sign public="1" get="inline" set="null" line="99" static="1">
			<f a="this">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="Int"/>
			</f>
			<haxe_doc>*  Returns -1 if this is a negative interval, +1 otherwise
    *</haxe_doc>
		</sign>
		<format public="1" get="inline" set="null" line="128" static="1">
			<f a="this:format">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Formats the interval
    *
    *   - `%%` Literal %. Example:   %
    *   - `%Y` Years, numeric, at least 2 digits with leading 0. Example:    01, 03
    *   - `%y` Years, numeric. Example:  1, 3
    *   - `%M` Months, numeric, at least 2 digits with leading 0. Example:   01, 03, 12
    *   - `%m` Months, numeric. Example: 1, 3, 12
    *   - `%b` Total number of months. Example:   2, 15, 36
    *   - `%D` Days, numeric, at least 2 digits with leading 0. Example: 01, 03, 31
    *   - `%d` Days, numeric. Example:   1, 3, 31
    *   - `%a` Total number of days. Example:   4, 18, 8123
    *   - `%H` Hours, numeric, at least 2 digits with leading 0. Example:    01, 03, 23
    *   - `%h` Hours, numeric. Example:  1, 3, 23
    *   - `%c` Total number of hours. Example:   4, 18, 8123
    *   - `%I` Minutes, numeric, at least 2 digits with leading 0. Example:  01, 03, 59
    *   - `%i` Minutes, numeric. Example:    1, 3, 59
    *   - `%e` Total number of minutes. Example:   4, 18, 8123
    *   - `%S` Seconds, numeric, at least 2 digits with leading 0. Example:  01, 03, 57
    *   - `%s` Seconds, numeric. Example:    1, 3, 57
    *   - `%f` Total number of seconds. Example:   4, 18, 8123
    *   - `%R` Sign "-" when negative, "+" when positive. Example:   -, +
    *   - `%r` Sign "-" when negative, empty when positive. Example: -,</haxe_doc>
		</format>
		<formatPartial public="1" get="inline" set="null" line="144" static="1">
			<f a="this:format">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<c path="Array"><c path="String"/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>* Formats  each string in `format` array. Each string can have only one placeholder.
    *
    * Supported placeholders: see `format()` method description except `r,R,%` placeholders.
    *
    * Returns new array with elements, whose corresponding strings in `format` array were filled with non-zero values.
    *
    * Example: if interval contains 0 years, 2 months and 10 days, then
    * `interval.format(['%y years', '%m months', '%d days']).join(',')` will return `'2 months, 10 days'`
    *</haxe_doc>
		</formatPartial>
		<eq get="inline" set="null" line="153" static="1">
			<f a="this:dtic">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc>* DateTimeInterval comparison
    *</haxe_doc>
		</eq>
		<gt get="inline" set="null" line="158" static="1">
			<f a="this:dtic">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gt>
		<gte get="inline" set="null" line="165" static="1">
			<f a="this:dtic">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gte>
		<lt get="inline" set="null" line="166" static="1">
			<f a="this:dtic">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</lt>
		<lte get="inline" set="null" line="167" static="1">
			<f a="this:dtic">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lte>
		<neq get="inline" set="null" line="168" static="1">
			<f a="this:dtic">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
		</neq>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="datetime.cores.DateTimeIntervalCore" params="" file="/usr/local/lib/haxeLibrary/datetime/git/src/datetime/cores/DateTimeIntervalCore.hx">
		<negative public="1" set="null" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>Indicates if this is negative interval</haxe_doc>
		</negative>
		<begin>
			<x path="datetime.DateTime"/>
			<haxe_doc>DateTime instance of the beginning of this interval</haxe_doc>
		</begin>
		<end>
			<x path="datetime.DateTime"/>
			<haxe_doc>DateTime instance of the end of this interval</haxe_doc>
		</end>
		<years expr="-1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
			<haxe_doc>amount of years</haxe_doc>
		</years>
		<months expr="-1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
			<haxe_doc>amount of months</haxe_doc>
		</months>
		<days expr="-1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
			<haxe_doc>amount of days</haxe_doc>
		</days>
		<hours expr="-1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
			<haxe_doc>amount of hours</haxe_doc>
		</hours>
		<minutes expr="-1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
			<haxe_doc>amount of minutes</haxe_doc>
		</minutes>
		<seconds expr="-1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
			<haxe_doc>amount of seconds</haxe_doc>
		</seconds>
		<getYears public="1" set="method" line="54">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get amount of full years in this interval.
    *</haxe_doc>
		</getYears>
		<getMonths public="1" set="method" line="93">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get amount of full months in this interval (always less then 12)
    *</haxe_doc>
		</getMonths>
		<getTotalMonths public="1" set="method" line="134">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get total amount of months in this interval.
    *   E.g. DateTimeInterval.fromString('(3y,5m)').getTotalMonths() returns 3 * 12 + 5 = 41
    *</haxe_doc>
		</getTotalMonths>
		<getDays public="1" set="method" line="143">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get amount of full days in this interval (always less then 31)
    *</haxe_doc>
		</getDays>
		<getTotalDays public="1" set="method" line="177">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get total amount of days in this interval.
    *</haxe_doc>
		</getTotalDays>
		<getHours public="1" set="method" line="186">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get amount of full hours in this interval (always less then 24)
    *</haxe_doc>
		</getHours>
		<getTotalHours public="1" set="method" line="214">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get total amount of hours in this interval.
    *</haxe_doc>
		</getTotalHours>
		<getMinutes public="1" set="method" line="223">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get amount of full minutes in this interval (always less then 60)
    *</haxe_doc>
		</getMinutes>
		<getTotalMinutes public="1" set="method" line="247">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get total amount of minutes in this interval.
    *</haxe_doc>
		</getTotalMinutes>
		<getSeconds public="1" set="method" line="256">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get amount of full seconds in this interval (always less then 60)
    *</haxe_doc>
		</getSeconds>
		<getTotalSeconds public="1" set="method" line="276">
			<f a=""><x path="Float"/></f>
			<haxe_doc>* Get total amount of seconds in this interval.
    *</haxe_doc>
		</getTotalSeconds>
		<getTotalWeeks public="1" set="method" line="285">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get total amount of weeks in this interval.
    *   Not calendar weeks, but each 7 days.</haxe_doc>
		</getTotalWeeks>
		<new set="method" line="45">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Constructor.
    * Manual instantiation is not allowed.
    *</haxe_doc>
		</new>
		<haxe_doc>* Time interval representation.
*   Stores difference in seconds between two DateTime instances.
*   Amounts of years/months/days/hours/minutes/seconds are calculated accounting leap years.
*   Maximum allowed interval is ~4100 years.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>datetime</e></m>
			<m n=":access"><e>datetime</e></m>
		</meta>
	</class>
	<class path="datetime.utils.DateTimeIntervalUtils" params="" file="/usr/local/lib/haxeLibrary/datetime/git/src/datetime/utils/DateTimeIntervalUtils.hx">
		<strftime set="method" line="21" static="1">
			<f a="dti:format">
				<x path="datetime.DateTimeInterval"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Limited strftime implementation
    *</haxe_doc>
		</strftime>
		<formatPartial set="method" line="106" static="1">
			<f a="dti:format">
				<x path="datetime.DateTimeInterval"/>
				<c path="Array"><c path="String"/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>* Format each string in `format` but only fill one placeholder in each string.
    *</haxe_doc>
		</formatPartial>
		<new set="method" line="199">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Instantiating is not allowed
    *</haxe_doc>
		</new>
		<haxe_doc>* Utility functions for DateTimeInterval
*</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>datetime</e></m>
			<m n=":access"><e>datetime</e></m>
		</meta>
	</class>
	<class path="datetime.utils.DateTimeMonthUtils" params="" file="/usr/local/lib/haxeLibrary/datetime/git/src/datetime/utils/DateTimeMonthUtils.hx">
		<days set="method" line="19" static="1">
			<f a="month:?isLeapYear" v=":false">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ isLeapYear : false }</e></m></meta>
			<haxe_doc>* Returns amount of days in specified month (1-12)
    *</haxe_doc>
		</days>
		<getMonth set="method" line="41" static="1">
			<f a="days:?isLeapYear" v=":false">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ isLeapYear : false }</e></m></meta>
			<haxe_doc>* Get month number based on number of `days` passed since start of a year
    *</haxe_doc>
		</getMonth>
		<getMonthDay set="method" line="75" static="1">
			<f a="days:?isLeapYear" v=":false">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ isLeapYear : false }</e></m></meta>
			<haxe_doc>* Get day number (1-31) based on number of `days` passed since start of a year
    *</haxe_doc>
		</getMonthDay>
		<toSeconds set="method" line="109" static="1">
			<f a="month:?isLeapYear" v=":false">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ isLeapYear : false }</e></m></meta>
			<haxe_doc>* Convert month number to amount of seconds passed since year start
    *</haxe_doc>
		</toSeconds>
		<new set="method" line="144">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Instantiating is not allowed
    *</haxe_doc>
		</new>
		<haxe_doc>* Month-related helper methods
*</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>datetime</e></m>
			<m n=":access"><e>datetime</e></m>
		</meta>
	</class>
	<class path="datetime.utils.DateTimeSnapUtils" params="" file="/usr/local/lib/haxeLibrary/datetime/git/src/datetime/utils/DateTimeSnapUtils.hx">
		<snapYear set="method" line="22" static="1">
			<f a="dt:direction">
				<x path="datetime.DateTime"/>
				<x path="datetime.DTSnapDirection"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Snap to nearest year.
    * Returns unix timestamp.</haxe_doc>
		</snapYear>
		<snapMonth set="method" line="48" static="1">
			<f a="dt:direction">
				<x path="datetime.DateTime"/>
				<x path="datetime.DTSnapDirection"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Snap to nearest month
    * Returns unix timestamp</haxe_doc>
		</snapMonth>
		<snapDay set="method" line="76" static="1">
			<f a="dt:direction">
				<x path="datetime.DateTime"/>
				<x path="datetime.DTSnapDirection"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Snap to nearest day
    * Returns unix timestamp</haxe_doc>
		</snapDay>
		<snapHour set="method" line="91" static="1">
			<f a="dt:direction">
				<x path="datetime.DateTime"/>
				<x path="datetime.DTSnapDirection"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Snap to nearest hour
    * Returns unix timestamp</haxe_doc>
		</snapHour>
		<snapMinute set="method" line="106" static="1">
			<f a="dt:direction">
				<x path="datetime.DateTime"/>
				<x path="datetime.DTSnapDirection"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Snap to nearest minute
    * Returns unix timestamp</haxe_doc>
		</snapMinute>
		<snapWeek set="method" line="121" static="1">
			<f a="dt:direction:required">
				<x path="datetime.DateTime"/>
				<x path="datetime.DTSnapDirection"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Snap to nearest `required` week day
    * Returns unix timestamp</haxe_doc>
		</snapWeek>
		<new set="method" line="155">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Instantiating is not allowed
    *</haxe_doc>
		</new>
		<haxe_doc>* Snap implementations
*</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>datetime</e></m>
			<m n=":access"><e>datetime</e></m>
		</meta>
	</class>
	<class path="datetime.utils.DateTimeUtils" params="" file="/usr/local/lib/haxeLibrary/datetime/git/src/datetime/utils/DateTimeUtils.hx">
		<fromString set="method" line="22" static="1">
			<f a="str">
				<c path="String"/>
				<x path="datetime.DateTime"/>
			</f>
			<haxe_doc>* Parse string into DateTime
    *</haxe_doc>
		</fromString>
		<parse set="method" line="42" static="1">
			<f a="str">
				<c path="String"/>
				<x path="datetime.DateTime"/>
			</f>
			<haxe_doc>* Parse string to DateTime
    *</haxe_doc>
		</parse>
		<fromIsoString set="method" line="73" static="1">
			<f a="str">
				<c path="String"/>
				<x path="datetime.DateTime"/>
			</f>
			<haxe_doc>* Parse iso string into DateTime
    *</haxe_doc>
		</fromIsoString>
		<clamp params="T" get="inline" set="null" line="98" static="1">
			<f a="value:min:max">
				<c path="clamp.T"/>
				<c path="clamp.T"/>
				<c path="clamp.T"/>
				<c path="clamp.T"/>
			</f>
			<haxe_doc>* Make sure `value` is not less than `min` and not greater than `max`
    *</haxe_doc>
		</clamp>
		<yearToStamp set="method" line="107" static="1">
			<f a="year">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Convert year number (4 digits) to DateTime-timestamp (seconds since 1 a.d.)
    *</haxe_doc>
		</yearToStamp>
		<addYear set="method" line="122" static="1">
			<f a="dt:amount">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Add specified amount of years to `dt`.
    * Returns unix timestamp.</haxe_doc>
		</addYear>
		<addMonth set="method" line="137" static="1">
			<f a="dt:amount">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Add specified amount of months to `dt`
    *</haxe_doc>
		</addMonth>
		<getWeekDayNum set="method" line="166" static="1">
			<f a="dt:weekDay:num">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Get unix timestamp of a specified `weekDay` in this month, which is the `num`st in current month.
    *</haxe_doc>
		</getWeekDayNum>
		<strftime set="method" line="191" static="1">
			<f a="dt:format">
				<x path="datetime.DateTime"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Limited strftime implementation
    *</haxe_doc>
		</strftime>
		<new set="method" line="292">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Instantiating is not allowed
    *</haxe_doc>
		</new>
		<haxe_doc>* Utility functions for DateTime
*</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>datetime</e></m>
			<m n=":access"><e>datetime</e></m>
		</meta>
	</class>
	<abstract path="datetimelang.arabic.DayName" params="" file="src/datetimelang/arabic/DateName.hx" module="datetimelang.arabic.DateName">
		<from>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTWeekDay"/></this>
		<to>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.arabic._DateName.DayName_Impl_" params="" file="src/datetimelang/arabic/DateName.hx" private="1" module="datetimelang.arabic.DateName" final="1">
	<_new public="1" get="inline" set="null" line="26" static="1">
		<f a="d">
			<x path="datetime.DTWeekDay"/>
			<x path="datetimelang.arabic.DayName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="31" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.arabic.DayName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="65" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toLowerCase public="1" get="inline" set="null" line="73" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</toLowerCase>
	<alltoUpperCase public="1" get="inline" set="null" line="76" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</alltoUpperCase>
	<toString public="1" get="inline" set="null" line="80" static="1">
		<f a="this">
			<x path="datetime.DTWeekDay"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<toStringEygpt public="1" get="inline" set="null" line="99" static="1"><f a="this">
	<x path="datetime.DTWeekDay"/>
	<c path="String"/>
</f></toStringEygpt>
	<stringFromDateTime public="1" get="inline" set="null" line="118" static="1">
		<f a="dt:?mondayBased" v=":false">
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
	</stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.arabic._DateName.DayName_Impl_" params="" file="src/datetimelang/arabic/DateName.hx" private="1" module="datetimelang.arabic.DateName" final="1">
		<_new public="1" get="inline" set="null" line="26" static="1">
			<f a="d">
				<x path="datetime.DTWeekDay"/>
				<x path="datetimelang.arabic.DayName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="31" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.arabic.DayName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="65" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toLowerCase public="1" get="inline" set="null" line="73" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</toLowerCase>
		<alltoUpperCase public="1" get="inline" set="null" line="76" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</alltoUpperCase>
		<toString public="1" get="inline" set="null" line="80" static="1">
			<f a="this">
				<x path="datetime.DTWeekDay"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<toStringEygpt public="1" get="inline" set="null" line="99" static="1"><f a="this">
	<x path="datetime.DTWeekDay"/>
	<c path="String"/>
</f></toStringEygpt>
		<stringFromDateTime public="1" get="inline" set="null" line="118" static="1">
			<f a="dt:?mondayBased" v=":false">
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
		</stringFromDateTime>
	</class>
	<abstract path="datetimelang.arabic.MonthName" params="" file="src/datetimelang/arabic/MonthName.hx">
		<from>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTMonth"/></this>
		<to>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.arabic._MonthName.MonthName_Impl_" params="" file="src/datetimelang/arabic/MonthName.hx" private="1" module="datetimelang.arabic.MonthName" final="1">
	<_new public="1" get="inline" set="null" line="67" static="1">
		<f a="m">
			<x path="datetime.DTMonth"/>
			<x path="datetimelang.arabic.MonthName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="71" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.arabic.MonthName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<toString public="1" get="inline" set="null" line="102" static="1">
		<f a="this">
			<x path="datetime.DTMonth"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringFromDateTime public="1" get="inline" set="null" line="131" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.arabic._MonthName.MonthName_Impl_" params="" file="src/datetimelang/arabic/MonthName.hx" private="1" module="datetimelang.arabic.MonthName" final="1">
		<_new public="1" get="inline" set="null" line="67" static="1">
			<f a="m">
				<x path="datetime.DTMonth"/>
				<x path="datetimelang.arabic.MonthName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="71" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.arabic.MonthName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<toString public="1" get="inline" set="null" line="102" static="1">
			<f a="this">
				<x path="datetime.DTMonth"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringFromDateTime public="1" get="inline" set="null" line="131" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
	</class>
	<abstract path="datetimelang.english.DayName" params="" file="src/datetimelang/english/DayName.hx">
		<from>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTWeekDay"/></this>
		<to>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.english._DayName.DayName_Impl_" params="" file="src/datetimelang/english/DayName.hx" private="1" module="datetimelang.english.DayName" final="1">
	<_new public="1" get="inline" set="null" line="7" static="1">
		<f a="d">
			<x path="datetime.DTWeekDay"/>
			<x path="datetimelang.english.DayName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="12" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.english.DayName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="32" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toLowerCase public="1" get="inline" set="null" line="40" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</toLowerCase>
	<alltoUpperCase public="1" get="inline" set="null" line="43" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</alltoUpperCase>
	<toString public="1" get="inline" set="null" line="47" static="1">
		<f a="this">
			<x path="datetime.DTWeekDay"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringAllUpFromDateTime public="1" get="inline" set="null" line="66" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringAllUpFromDateTime>
	<stringLowerFromDateTime public="1" get="inline" set="null" line="71" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringLowerFromDateTime>
	<stringShortFromDateTime public="1" get="inline" set="null" line="76" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringShortFromDateTime>
	<stringFromDateTime public="1" get="inline" set="null" line="81" static="1">
		<f a="dt:?mondayBased" v=":false">
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
	</stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.english._DayName.DayName_Impl_" params="" file="src/datetimelang/english/DayName.hx" private="1" module="datetimelang.english.DayName" final="1">
		<_new public="1" get="inline" set="null" line="7" static="1">
			<f a="d">
				<x path="datetime.DTWeekDay"/>
				<x path="datetimelang.english.DayName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="12" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.english.DayName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="32" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toLowerCase public="1" get="inline" set="null" line="40" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</toLowerCase>
		<alltoUpperCase public="1" get="inline" set="null" line="43" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</alltoUpperCase>
		<toString public="1" get="inline" set="null" line="47" static="1">
			<f a="this">
				<x path="datetime.DTWeekDay"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringAllUpFromDateTime public="1" get="inline" set="null" line="66" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringAllUpFromDateTime>
		<stringLowerFromDateTime public="1" get="inline" set="null" line="71" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringLowerFromDateTime>
		<stringShortFromDateTime public="1" get="inline" set="null" line="76" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringShortFromDateTime>
		<stringFromDateTime public="1" get="inline" set="null" line="81" static="1">
			<f a="dt:?mondayBased" v=":false">
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
		</stringFromDateTime>
	</class>
	<abstract path="datetimelang.english.MonthName" params="" file="src/datetimelang/english/MonthName.hx">
		<from>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTMonth"/></this>
		<to>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.english._MonthName.MonthName_Impl_" params="" file="src/datetimelang/english/MonthName.hx" private="1" module="datetimelang.english.MonthName" final="1">
	<_new public="1" get="inline" set="null" line="7" static="1">
		<f a="m">
			<x path="datetime.DTMonth"/>
			<x path="datetimelang.english.MonthName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="11" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.english.MonthName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="41" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toLowerCase public="1" get="inline" set="null" line="49" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</toLowerCase>
	<alltoUpperCase public="1" get="inline" set="null" line="52" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</alltoUpperCase>
	<toString public="1" get="inline" set="null" line="56" static="1">
		<f a="this">
			<x path="datetime.DTMonth"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringAllUpFromDateTime public="1" get="inline" set="null" line="85" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringAllUpFromDateTime>
	<stringLowerFromDateTime public="1" get="inline" set="null" line="90" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringLowerFromDateTime>
	<stringShortFromDateTime public="1" get="inline" set="null" line="95" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringShortFromDateTime>
	<stringFromDateTime public="1" get="inline" set="null" line="100" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.english._MonthName.MonthName_Impl_" params="" file="src/datetimelang/english/MonthName.hx" private="1" module="datetimelang.english.MonthName" final="1">
		<_new public="1" get="inline" set="null" line="7" static="1">
			<f a="m">
				<x path="datetime.DTMonth"/>
				<x path="datetimelang.english.MonthName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="11" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.english.MonthName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="41" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toLowerCase public="1" get="inline" set="null" line="49" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</toLowerCase>
		<alltoUpperCase public="1" get="inline" set="null" line="52" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</alltoUpperCase>
		<toString public="1" get="inline" set="null" line="56" static="1">
			<f a="this">
				<x path="datetime.DTMonth"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringAllUpFromDateTime public="1" get="inline" set="null" line="85" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringAllUpFromDateTime>
		<stringLowerFromDateTime public="1" get="inline" set="null" line="90" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringLowerFromDateTime>
		<stringShortFromDateTime public="1" get="inline" set="null" line="95" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringShortFromDateTime>
		<stringFromDateTime public="1" get="inline" set="null" line="100" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
	</class>
	<abstract path="datetimelang.french.DayName" params="" file="src/datetimelang/french/DayName.hx">
		<from>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTWeekDay"/></this>
		<to>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.french._DayName.DayName_Impl_" params="" file="src/datetimelang/french/DayName.hx" private="1" module="datetimelang.french.DayName" final="1">
	<_new public="1" get="inline" set="null" line="7" static="1">
		<f a="d">
			<x path="datetime.DTWeekDay"/>
			<x path="datetimelang.french.DayName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="12" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.french.DayName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="32" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toLowerCase public="1" get="inline" set="null" line="40" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</toLowerCase>
	<alltoUpperCase public="1" get="inline" set="null" line="43" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</alltoUpperCase>
	<toString public="1" get="inline" set="null" line="47" static="1">
		<f a="this">
			<x path="datetime.DTWeekDay"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringAllUpFromDateTime public="1" get="inline" set="null" line="66" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringAllUpFromDateTime>
	<stringLowerFromDateTime public="1" get="inline" set="null" line="71" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringLowerFromDateTime>
	<stringShortFromDateTime public="1" get="inline" set="null" line="76" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringShortFromDateTime>
	<stringFromDateTime public="1" get="inline" set="null" line="81" static="1">
		<f a="dt:?mondayBased" v=":false">
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
	</stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.french._DayName.DayName_Impl_" params="" file="src/datetimelang/french/DayName.hx" private="1" module="datetimelang.french.DayName" final="1">
		<_new public="1" get="inline" set="null" line="7" static="1">
			<f a="d">
				<x path="datetime.DTWeekDay"/>
				<x path="datetimelang.french.DayName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="12" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.french.DayName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="32" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toLowerCase public="1" get="inline" set="null" line="40" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</toLowerCase>
		<alltoUpperCase public="1" get="inline" set="null" line="43" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</alltoUpperCase>
		<toString public="1" get="inline" set="null" line="47" static="1">
			<f a="this">
				<x path="datetime.DTWeekDay"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringAllUpFromDateTime public="1" get="inline" set="null" line="66" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringAllUpFromDateTime>
		<stringLowerFromDateTime public="1" get="inline" set="null" line="71" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringLowerFromDateTime>
		<stringShortFromDateTime public="1" get="inline" set="null" line="76" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringShortFromDateTime>
		<stringFromDateTime public="1" get="inline" set="null" line="81" static="1">
			<f a="dt:?mondayBased" v=":false">
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
		</stringFromDateTime>
	</class>
	<abstract path="datetimelang.french.MonthName" params="" file="src/datetimelang/french/MonthName.hx">
		<from>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTMonth"/></this>
		<to>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.french._MonthName.MonthName_Impl_" params="" file="src/datetimelang/french/MonthName.hx" private="1" module="datetimelang.french.MonthName" final="1">
	<_new public="1" get="inline" set="null" line="7" static="1">
		<f a="m">
			<x path="datetime.DTMonth"/>
			<x path="datetimelang.french.MonthName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="11" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.french.MonthName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="47" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toLowerCase public="1" get="inline" set="null" line="55" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</toLowerCase>
	<alltoUpperCase public="1" get="inline" set="null" line="58" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</alltoUpperCase>
	<toString public="1" get="inline" set="null" line="62" static="1">
		<f a="this">
			<x path="datetime.DTMonth"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringAllUpFromDateTime public="1" get="inline" set="null" line="91" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringAllUpFromDateTime>
	<stringLowerFromDateTime public="1" get="inline" set="null" line="96" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringLowerFromDateTime>
	<stringShortFromDateTime public="1" get="inline" set="null" line="101" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringShortFromDateTime>
	<stringFromDateTime public="1" get="inline" set="null" line="106" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.french._MonthName.MonthName_Impl_" params="" file="src/datetimelang/french/MonthName.hx" private="1" module="datetimelang.french.MonthName" final="1">
		<_new public="1" get="inline" set="null" line="7" static="1">
			<f a="m">
				<x path="datetime.DTMonth"/>
				<x path="datetimelang.french.MonthName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="11" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.french.MonthName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="47" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toLowerCase public="1" get="inline" set="null" line="55" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</toLowerCase>
		<alltoUpperCase public="1" get="inline" set="null" line="58" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</alltoUpperCase>
		<toString public="1" get="inline" set="null" line="62" static="1">
			<f a="this">
				<x path="datetime.DTMonth"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringAllUpFromDateTime public="1" get="inline" set="null" line="91" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringAllUpFromDateTime>
		<stringLowerFromDateTime public="1" get="inline" set="null" line="96" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringLowerFromDateTime>
		<stringShortFromDateTime public="1" get="inline" set="null" line="101" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringShortFromDateTime>
		<stringFromDateTime public="1" get="inline" set="null" line="106" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
	</class>
	<abstract path="datetimelang.german.DayName" params="" file="src/datetimelang/german/DayName.hx">
		<from>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTWeekDay"/></this>
		<to>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.german._DayName.DayName_Impl_" params="" file="src/datetimelang/german/DayName.hx" private="1" module="datetimelang.german.DayName" final="1">
	<_new public="1" get="inline" set="null" line="35" static="1">
		<f a="d">
			<x path="datetime.DTWeekDay"/>
			<x path="datetimelang.german.DayName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="40" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.german.DayName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="86" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toLowerCase public="1" get="inline" set="null" line="94" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</toLowerCase>
	<alltoUpperCase public="1" get="inline" set="null" line="97" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</alltoUpperCase>
	<toString public="1" get="inline" set="null" line="101" static="1">
		<f a="this">
			<x path="datetime.DTWeekDay"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<toStringSwiss public="1" get="inline" set="null" line="120" static="1"><f a="this">
	<x path="datetime.DTWeekDay"/>
	<c path="String"/>
</f></toStringSwiss>
	<toStringSwabian public="1" get="inline" set="null" line="139" static="1"><f a="this">
	<x path="datetime.DTWeekDay"/>
	<c path="String"/>
</f></toStringSwabian>
	<stringAllUpFromDateTime public="1" get="inline" set="null" line="158" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringAllUpFromDateTime>
	<stringLowerFromDateTime public="1" get="inline" set="null" line="163" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringLowerFromDateTime>
	<stringShortFromDateTime public="1" get="inline" set="null" line="168" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringShortFromDateTime>
	<stringFromDateTime public="1" get="inline" set="null" line="173" static="1">
		<f a="dt:?mondayBased" v=":false">
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
	</stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.german._DayName.DayName_Impl_" params="" file="src/datetimelang/german/DayName.hx" private="1" module="datetimelang.german.DayName" final="1">
		<_new public="1" get="inline" set="null" line="35" static="1">
			<f a="d">
				<x path="datetime.DTWeekDay"/>
				<x path="datetimelang.german.DayName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="40" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.german.DayName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="86" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toLowerCase public="1" get="inline" set="null" line="94" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</toLowerCase>
		<alltoUpperCase public="1" get="inline" set="null" line="97" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</alltoUpperCase>
		<toString public="1" get="inline" set="null" line="101" static="1">
			<f a="this">
				<x path="datetime.DTWeekDay"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<toStringSwiss public="1" get="inline" set="null" line="120" static="1"><f a="this">
	<x path="datetime.DTWeekDay"/>
	<c path="String"/>
</f></toStringSwiss>
		<toStringSwabian public="1" get="inline" set="null" line="139" static="1"><f a="this">
	<x path="datetime.DTWeekDay"/>
	<c path="String"/>
</f></toStringSwabian>
		<stringAllUpFromDateTime public="1" get="inline" set="null" line="158" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringAllUpFromDateTime>
		<stringLowerFromDateTime public="1" get="inline" set="null" line="163" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringLowerFromDateTime>
		<stringShortFromDateTime public="1" get="inline" set="null" line="168" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringShortFromDateTime>
		<stringFromDateTime public="1" get="inline" set="null" line="173" static="1">
			<f a="dt:?mondayBased" v=":false">
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
		</stringFromDateTime>
	</class>
	<abstract path="datetimelang.german.MonthName" params="" file="src/datetimelang/german/MonthName.hx">
		<from>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTMonth"/></this>
		<to>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.german._MonthName.MonthName_Impl_" params="" file="src/datetimelang/german/MonthName.hx" private="1" module="datetimelang.german.MonthName" final="1">
	<_new public="1" get="inline" set="null" line="7" static="1">
		<f a="m">
			<x path="datetime.DTMonth"/>
			<x path="datetimelang.german.MonthName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="11" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.german.MonthName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="43" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toLowerCase public="1" get="inline" set="null" line="51" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</toLowerCase>
	<alltoUpperCase public="1" get="inline" set="null" line="54" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</alltoUpperCase>
	<toString public="1" get="inline" set="null" line="58" static="1">
		<f a="this">
			<x path="datetime.DTMonth"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringAllUpFromDateTime public="1" get="inline" set="null" line="87" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringAllUpFromDateTime>
	<stringLowerFromDateTime public="1" get="inline" set="null" line="92" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringLowerFromDateTime>
	<stringShortFromDateTime public="1" get="inline" set="null" line="97" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringShortFromDateTime>
	<stringFromDateTime public="1" get="inline" set="null" line="102" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.german._MonthName.MonthName_Impl_" params="" file="src/datetimelang/german/MonthName.hx" private="1" module="datetimelang.german.MonthName" final="1">
		<_new public="1" get="inline" set="null" line="7" static="1">
			<f a="m">
				<x path="datetime.DTMonth"/>
				<x path="datetimelang.german.MonthName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="11" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.german.MonthName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="43" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toLowerCase public="1" get="inline" set="null" line="51" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</toLowerCase>
		<alltoUpperCase public="1" get="inline" set="null" line="54" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</alltoUpperCase>
		<toString public="1" get="inline" set="null" line="58" static="1">
			<f a="this">
				<x path="datetime.DTMonth"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringAllUpFromDateTime public="1" get="inline" set="null" line="87" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringAllUpFromDateTime>
		<stringLowerFromDateTime public="1" get="inline" set="null" line="92" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringLowerFromDateTime>
		<stringShortFromDateTime public="1" get="inline" set="null" line="97" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringShortFromDateTime>
		<stringFromDateTime public="1" get="inline" set="null" line="102" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
	</class>
	<abstract path="datetimelang.greek.DayName" params="" file="src/datetimelang/greek/DayName.hx">
		<from>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTWeekDay"/></this>
		<to>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.greek._DayName.DayName_Impl_" params="" file="src/datetimelang/greek/DayName.hx" private="1" module="datetimelang.greek.DayName" final="1">
	<_new public="1" get="inline" set="null" line="16" static="1">
		<f a="d">
			<x path="datetime.DTWeekDay"/>
			<x path="datetimelang.greek.DayName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="21" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.greek.DayName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="41" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toString public="1" get="inline" set="null" line="50" static="1">
		<f a="this">
			<x path="datetime.DTWeekDay"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringShortFromDateTime public="1" get="inline" set="null" line="69" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringShortFromDateTime>
	<stringFromDateTime public="1" get="inline" set="null" line="74" static="1">
		<f a="dt:?mondayBased" v=":false">
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
	</stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.greek._DayName.DayName_Impl_" params="" file="src/datetimelang/greek/DayName.hx" private="1" module="datetimelang.greek.DayName" final="1">
		<_new public="1" get="inline" set="null" line="16" static="1">
			<f a="d">
				<x path="datetime.DTWeekDay"/>
				<x path="datetimelang.greek.DayName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="21" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.greek.DayName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="41" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toString public="1" get="inline" set="null" line="50" static="1">
			<f a="this">
				<x path="datetime.DTWeekDay"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringShortFromDateTime public="1" get="inline" set="null" line="69" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringShortFromDateTime>
		<stringFromDateTime public="1" get="inline" set="null" line="74" static="1">
			<f a="dt:?mondayBased" v=":false">
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
		</stringFromDateTime>
	</class>
	<abstract path="datetimelang.greek.MonthName" params="" file="src/datetimelang/greek/MonthName.hx">
		<from>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTMonth"/></this>
		<to>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.greek._MonthName.MonthName_Impl_" params="" file="src/datetimelang/greek/MonthName.hx" private="1" module="datetimelang.greek.MonthName" final="1">
	<_new public="1" get="inline" set="null" line="21" static="1">
		<f a="m">
			<x path="datetime.DTMonth"/>
			<x path="datetimelang.greek.MonthName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="25" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.greek.MonthName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="55" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toString public="1" get="inline" set="null" line="64" static="1">
		<f a="this">
			<x path="datetime.DTMonth"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringShortFromDateTime public="1" get="inline" set="null" line="93" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringShortFromDateTime>
	<stringFromDateTime public="1" get="inline" set="null" line="98" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.greek._MonthName.MonthName_Impl_" params="" file="src/datetimelang/greek/MonthName.hx" private="1" module="datetimelang.greek.MonthName" final="1">
		<_new public="1" get="inline" set="null" line="21" static="1">
			<f a="m">
				<x path="datetime.DTMonth"/>
				<x path="datetimelang.greek.MonthName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="25" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.greek.MonthName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="55" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toString public="1" get="inline" set="null" line="64" static="1">
			<f a="this">
				<x path="datetime.DTMonth"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringShortFromDateTime public="1" get="inline" set="null" line="93" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringShortFromDateTime>
		<stringFromDateTime public="1" get="inline" set="null" line="98" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
	</class>
	<abstract path="datetimelang.hebrew.DayName" params="" file="src/datetimelang/hebrew/DayName.hx">
		<from>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTWeekDay"/></this>
		<to>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.hebrew._DayName.DayName_Impl_" params="" file="src/datetimelang/hebrew/DayName.hx" private="1" module="datetimelang.hebrew.DayName" final="1">
	<_new public="1" get="inline" set="null" line="17" static="1">
		<f a="d">
			<x path="datetime.DTWeekDay"/>
			<x path="datetimelang.hebrew.DayName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="22" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.hebrew.DayName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<toString public="1" get="inline" set="null" line="43" static="1">
		<f a="this">
			<x path="datetime.DTWeekDay"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringFromDateTime public="1" get="inline" set="null" line="62" static="1">
		<f a="dt:?mondayBased" v=":false">
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
	</stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.hebrew._DayName.DayName_Impl_" params="" file="src/datetimelang/hebrew/DayName.hx" private="1" module="datetimelang.hebrew.DayName" final="1">
		<_new public="1" get="inline" set="null" line="17" static="1">
			<f a="d">
				<x path="datetime.DTWeekDay"/>
				<x path="datetimelang.hebrew.DayName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="22" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.hebrew.DayName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<toString public="1" get="inline" set="null" line="43" static="1">
			<f a="this">
				<x path="datetime.DTWeekDay"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringFromDateTime public="1" get="inline" set="null" line="62" static="1">
			<f a="dt:?mondayBased" v=":false">
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
		</stringFromDateTime>
	</class>
	<abstract path="datetimelang.hebrew.MonthName" params="" file="src/datetimelang/hebrew/MonthName.hx">
		<from>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTMonth"/></this>
		<to>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.hebrew._MonthName.MonthName_Impl_" params="" file="src/datetimelang/hebrew/MonthName.hx" private="1" module="datetimelang.hebrew.MonthName" final="1">
	<_new public="1" get="inline" set="null" line="21" static="1">
		<f a="m">
			<x path="datetime.DTMonth"/>
			<x path="datetimelang.hebrew.MonthName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="25" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.hebrew.MonthName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<toString public="1" get="inline" set="null" line="56" static="1">
		<f a="this">
			<x path="datetime.DTMonth"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringFromDateTime public="1" get="inline" set="null" line="85" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.hebrew._MonthName.MonthName_Impl_" params="" file="src/datetimelang/hebrew/MonthName.hx" private="1" module="datetimelang.hebrew.MonthName" final="1">
		<_new public="1" get="inline" set="null" line="21" static="1">
			<f a="m">
				<x path="datetime.DTMonth"/>
				<x path="datetimelang.hebrew.MonthName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="25" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.hebrew.MonthName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<toString public="1" get="inline" set="null" line="56" static="1">
			<f a="this">
				<x path="datetime.DTMonth"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringFromDateTime public="1" get="inline" set="null" line="85" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
	</class>
	<abstract path="datetimelang.hindi.DayName" params="" file="src/datetimelang/hindi/DayName.hx">
		<from>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTWeekDay"/></this>
		<to>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.hindi._DayName.DayName_Impl_" params="" file="src/datetimelang/hindi/DayName.hx" private="1" module="datetimelang.hindi.DayName" final="1">
	<_new public="1" get="inline" set="null" line="16" static="1">
		<f a="d">
			<x path="datetime.DTWeekDay"/>
			<x path="datetimelang.hindi.DayName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="21" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.hindi.DayName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<toString public="1" get="inline" set="null" line="42" static="1">
		<f a="this">
			<x path="datetime.DTWeekDay"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringFromDateTime public="1" get="inline" set="null" line="61" static="1">
		<f a="dt:?mondayBased" v=":false">
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
	</stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.hindi._DayName.DayName_Impl_" params="" file="src/datetimelang/hindi/DayName.hx" private="1" module="datetimelang.hindi.DayName" final="1">
		<_new public="1" get="inline" set="null" line="16" static="1">
			<f a="d">
				<x path="datetime.DTWeekDay"/>
				<x path="datetimelang.hindi.DayName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="21" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.hindi.DayName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<toString public="1" get="inline" set="null" line="42" static="1">
			<f a="this">
				<x path="datetime.DTWeekDay"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringFromDateTime public="1" get="inline" set="null" line="61" static="1">
			<f a="dt:?mondayBased" v=":false">
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
		</stringFromDateTime>
	</class>
	<abstract path="datetimelang.hindi.MonthName" params="" file="src/datetimelang/hindi/MonthName.hx">
		<from>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTMonth"/></this>
		<to>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.hindi._MonthName.MonthName_Impl_" params="" file="src/datetimelang/hindi/MonthName.hx" private="1" module="datetimelang.hindi.MonthName" final="1">
	<_new public="1" get="inline" set="null" line="21" static="1">
		<f a="m">
			<x path="datetime.DTMonth"/>
			<x path="datetimelang.hindi.MonthName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="25" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.hindi.MonthName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<toString public="1" get="inline" set="null" line="56" static="1">
		<f a="this">
			<x path="datetime.DTMonth"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringFromDateTime public="1" get="inline" set="null" line="85" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.hindi._MonthName.MonthName_Impl_" params="" file="src/datetimelang/hindi/MonthName.hx" private="1" module="datetimelang.hindi.MonthName" final="1">
		<_new public="1" get="inline" set="null" line="21" static="1">
			<f a="m">
				<x path="datetime.DTMonth"/>
				<x path="datetimelang.hindi.MonthName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="25" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.hindi.MonthName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<toString public="1" get="inline" set="null" line="56" static="1">
			<f a="this">
				<x path="datetime.DTMonth"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringFromDateTime public="1" get="inline" set="null" line="85" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
	</class>
	<abstract path="datetimelang.italian.DayName" params="" file="src/datetimelang/italian/DayName.hx">
		<from>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTWeekDay"/></this>
		<to>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.italian._DayName.DayName_Impl_" params="" file="src/datetimelang/italian/DayName.hx" private="1" module="datetimelang.italian.DayName" final="1">
	<_new public="1" get="inline" set="null" line="10" static="1">
		<f a="d">
			<x path="datetime.DTWeekDay"/>
			<x path="datetimelang.italian.DayName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="15" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.italian.DayName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="45" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toLowerCase public="1" get="inline" set="null" line="53" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</toLowerCase>
	<alltoUpperCase public="1" get="inline" set="null" line="56" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</alltoUpperCase>
	<toString public="1" get="inline" set="null" line="60" static="1">
		<f a="this">
			<x path="datetime.DTWeekDay"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringAllUpFromDateTime public="1" get="inline" set="null" line="79" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringAllUpFromDateTime>
	<stringLowerFromDateTime public="1" get="inline" set="null" line="84" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringLowerFromDateTime>
	<stringShortFromDateTime public="1" get="inline" set="null" line="89" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringShortFromDateTime>
	<stringFromDateTime public="1" get="inline" set="null" line="94" static="1">
		<f a="dt:?mondayBased" v=":false">
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
	</stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.italian._DayName.DayName_Impl_" params="" file="src/datetimelang/italian/DayName.hx" private="1" module="datetimelang.italian.DayName" final="1">
		<_new public="1" get="inline" set="null" line="10" static="1">
			<f a="d">
				<x path="datetime.DTWeekDay"/>
				<x path="datetimelang.italian.DayName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="15" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.italian.DayName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="45" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toLowerCase public="1" get="inline" set="null" line="53" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</toLowerCase>
		<alltoUpperCase public="1" get="inline" set="null" line="56" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</alltoUpperCase>
		<toString public="1" get="inline" set="null" line="60" static="1">
			<f a="this">
				<x path="datetime.DTWeekDay"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringAllUpFromDateTime public="1" get="inline" set="null" line="79" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringAllUpFromDateTime>
		<stringLowerFromDateTime public="1" get="inline" set="null" line="84" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringLowerFromDateTime>
		<stringShortFromDateTime public="1" get="inline" set="null" line="89" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringShortFromDateTime>
		<stringFromDateTime public="1" get="inline" set="null" line="94" static="1">
			<f a="dt:?mondayBased" v=":false">
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
		</stringFromDateTime>
	</class>
	<abstract path="datetimelang.italian.MonthName" params="" file="src/datetimelang/italian/MonthName.hx">
		<from>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTMonth"/></this>
		<to>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.italian._MonthName.MonthName_Impl_" params="" file="src/datetimelang/italian/MonthName.hx" private="1" module="datetimelang.italian.MonthName" final="1">
	<_new public="1" get="inline" set="null" line="10" static="1">
		<f a="m">
			<x path="datetime.DTMonth"/>
			<x path="datetimelang.italian.MonthName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="14" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.italian.MonthName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="44" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toLowerCase public="1" get="inline" set="null" line="52" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</toLowerCase>
	<alltoUpperCase public="1" get="inline" set="null" line="55" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</alltoUpperCase>
	<toString public="1" get="inline" set="null" line="59" static="1">
		<f a="this">
			<x path="datetime.DTMonth"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringAllUpFromDateTime public="1" get="inline" set="null" line="88" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringAllUpFromDateTime>
	<stringLowerFromDateTime public="1" get="inline" set="null" line="93" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringLowerFromDateTime>
	<stringShortFromDateTime public="1" get="inline" set="null" line="98" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringShortFromDateTime>
	<stringFromDateTime public="1" get="inline" set="null" line="103" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.italian._MonthName.MonthName_Impl_" params="" file="src/datetimelang/italian/MonthName.hx" private="1" module="datetimelang.italian.MonthName" final="1">
		<_new public="1" get="inline" set="null" line="10" static="1">
			<f a="m">
				<x path="datetime.DTMonth"/>
				<x path="datetimelang.italian.MonthName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="14" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.italian.MonthName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="44" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toLowerCase public="1" get="inline" set="null" line="52" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</toLowerCase>
		<alltoUpperCase public="1" get="inline" set="null" line="55" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</alltoUpperCase>
		<toString public="1" get="inline" set="null" line="59" static="1">
			<f a="this">
				<x path="datetime.DTMonth"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringAllUpFromDateTime public="1" get="inline" set="null" line="88" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringAllUpFromDateTime>
		<stringLowerFromDateTime public="1" get="inline" set="null" line="93" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringLowerFromDateTime>
		<stringShortFromDateTime public="1" get="inline" set="null" line="98" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringShortFromDateTime>
		<stringFromDateTime public="1" get="inline" set="null" line="103" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
	</class>
	<abstract path="datetimelang.norwegian.DayName" params="" file="src/datetimelang/norwegian/DayName.hx">
		<from>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTWeekDay"/></this>
		<to>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.norwegian._DayName.DayName_Impl_" params="" file="src/datetimelang/norwegian/DayName.hx" private="1" module="datetimelang.norwegian.DayName" final="1">
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="d">
			<x path="datetime.DTWeekDay"/>
			<x path="datetimelang.norwegian.DayName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="20" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.norwegian.DayName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="52" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toLowerCase public="1" get="inline" set="null" line="60" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</toLowerCase>
	<alltoUpperCase public="1" get="inline" set="null" line="63" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</alltoUpperCase>
	<toString public="1" get="inline" set="null" line="67" static="1">
		<f a="this">
			<x path="datetime.DTWeekDay"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<toStringNynorsk public="1" get="inline" set="null" line="86" static="1"><f a="this">
	<x path="datetime.DTWeekDay"/>
	<c path="String"/>
</f></toStringNynorsk>
	<stringAllUpFromDateTime public="1" get="inline" set="null" line="105" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringAllUpFromDateTime>
	<stringLowerFromDateTime public="1" get="inline" set="null" line="110" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringLowerFromDateTime>
	<stringShortFromDateTime public="1" get="inline" set="null" line="115" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringShortFromDateTime>
	<stringFromDateTime public="1" get="inline" set="null" line="120" static="1">
		<f a="dt:?mondayBased" v=":false">
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
	</stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.norwegian._DayName.DayName_Impl_" params="" file="src/datetimelang/norwegian/DayName.hx" private="1" module="datetimelang.norwegian.DayName" final="1">
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="d">
				<x path="datetime.DTWeekDay"/>
				<x path="datetimelang.norwegian.DayName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="20" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.norwegian.DayName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="52" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toLowerCase public="1" get="inline" set="null" line="60" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</toLowerCase>
		<alltoUpperCase public="1" get="inline" set="null" line="63" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</alltoUpperCase>
		<toString public="1" get="inline" set="null" line="67" static="1">
			<f a="this">
				<x path="datetime.DTWeekDay"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<toStringNynorsk public="1" get="inline" set="null" line="86" static="1"><f a="this">
	<x path="datetime.DTWeekDay"/>
	<c path="String"/>
</f></toStringNynorsk>
		<stringAllUpFromDateTime public="1" get="inline" set="null" line="105" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringAllUpFromDateTime>
		<stringLowerFromDateTime public="1" get="inline" set="null" line="110" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringLowerFromDateTime>
		<stringShortFromDateTime public="1" get="inline" set="null" line="115" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringShortFromDateTime>
		<stringFromDateTime public="1" get="inline" set="null" line="120" static="1">
			<f a="dt:?mondayBased" v=":false">
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
		</stringFromDateTime>
	</class>
	<abstract path="datetimelang.norwegian.MonthName" params="" file="src/datetimelang/norwegian/MonthName.hx">
		<from>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTMonth"/></this>
		<to>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.norwegian._MonthName.MonthName_Impl_" params="" file="src/datetimelang/norwegian/MonthName.hx" private="1" module="datetimelang.norwegian.MonthName" final="1">
	<_new public="1" get="inline" set="null" line="10" static="1">
		<f a="m">
			<x path="datetime.DTMonth"/>
			<x path="datetimelang.norwegian.MonthName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="14" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.norwegian.MonthName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="44" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toLowerCase public="1" get="inline" set="null" line="52" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</toLowerCase>
	<alltoUpperCase public="1" get="inline" set="null" line="55" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</alltoUpperCase>
	<toString public="1" get="inline" set="null" line="59" static="1">
		<f a="this">
			<x path="datetime.DTMonth"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringAllUpFromDateTime public="1" get="inline" set="null" line="88" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringAllUpFromDateTime>
	<stringLowerFromDateTime public="1" get="inline" set="null" line="93" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringLowerFromDateTime>
	<stringShortFromDateTime public="1" get="inline" set="null" line="98" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringShortFromDateTime>
	<stringFromDateTime public="1" get="inline" set="null" line="103" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.norwegian._MonthName.MonthName_Impl_" params="" file="src/datetimelang/norwegian/MonthName.hx" private="1" module="datetimelang.norwegian.MonthName" final="1">
		<_new public="1" get="inline" set="null" line="10" static="1">
			<f a="m">
				<x path="datetime.DTMonth"/>
				<x path="datetimelang.norwegian.MonthName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="14" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.norwegian.MonthName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="44" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toLowerCase public="1" get="inline" set="null" line="52" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</toLowerCase>
		<alltoUpperCase public="1" get="inline" set="null" line="55" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</alltoUpperCase>
		<toString public="1" get="inline" set="null" line="59" static="1">
			<f a="this">
				<x path="datetime.DTMonth"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringAllUpFromDateTime public="1" get="inline" set="null" line="88" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringAllUpFromDateTime>
		<stringLowerFromDateTime public="1" get="inline" set="null" line="93" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringLowerFromDateTime>
		<stringShortFromDateTime public="1" get="inline" set="null" line="98" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringShortFromDateTime>
		<stringFromDateTime public="1" get="inline" set="null" line="103" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
	</class>
	<abstract path="datetimelang.polish.DayName" params="" file="src/datetimelang/polish/DayName.hx">
		<from>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTWeekDay"/></this>
		<to>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.polish._DayName.DayName_Impl_" params="" file="src/datetimelang/polish/DayName.hx" private="1" module="datetimelang.polish.DayName" final="1">
	<_new public="1" get="inline" set="null" line="10" static="1">
		<f a="d">
			<x path="datetime.DTWeekDay"/>
			<x path="datetimelang.polish.DayName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="15" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.polish.DayName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="38" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toLowerCase public="1" get="inline" set="null" line="46" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</toLowerCase>
	<alltoUpperCase public="1" get="inline" set="null" line="49" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</alltoUpperCase>
	<toString public="1" get="inline" set="null" line="53" static="1">
		<f a="this">
			<x path="datetime.DTWeekDay"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringAllUpFromDateTime public="1" get="inline" set="null" line="72" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringAllUpFromDateTime>
	<stringLowerFromDateTime public="1" get="inline" set="null" line="77" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringLowerFromDateTime>
	<stringShortFromDateTime public="1" get="inline" set="null" line="82" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringShortFromDateTime>
	<stringFromDateTime public="1" get="inline" set="null" line="87" static="1">
		<f a="dt:?mondayBased" v=":false">
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
	</stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.polish._DayName.DayName_Impl_" params="" file="src/datetimelang/polish/DayName.hx" private="1" module="datetimelang.polish.DayName" final="1">
		<_new public="1" get="inline" set="null" line="10" static="1">
			<f a="d">
				<x path="datetime.DTWeekDay"/>
				<x path="datetimelang.polish.DayName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="15" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.polish.DayName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="38" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toLowerCase public="1" get="inline" set="null" line="46" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</toLowerCase>
		<alltoUpperCase public="1" get="inline" set="null" line="49" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</alltoUpperCase>
		<toString public="1" get="inline" set="null" line="53" static="1">
			<f a="this">
				<x path="datetime.DTWeekDay"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringAllUpFromDateTime public="1" get="inline" set="null" line="72" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringAllUpFromDateTime>
		<stringLowerFromDateTime public="1" get="inline" set="null" line="77" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringLowerFromDateTime>
		<stringShortFromDateTime public="1" get="inline" set="null" line="82" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringShortFromDateTime>
		<stringFromDateTime public="1" get="inline" set="null" line="87" static="1">
			<f a="dt:?mondayBased" v=":false">
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
		</stringFromDateTime>
	</class>
	<abstract path="datetimelang.polish.MonthName" params="" file="src/datetimelang/polish/MonthName.hx">
		<from>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTMonth"/></this>
		<to>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.polish._MonthName.MonthName_Impl_" params="" file="src/datetimelang/polish/MonthName.hx" private="1" module="datetimelang.polish.MonthName" final="1">
	<_new public="1" get="inline" set="null" line="11" static="1">
		<f a="m">
			<x path="datetime.DTMonth"/>
			<x path="datetimelang.polish.MonthName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="15" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.polish.MonthName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="45" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toLowerCase public="1" get="inline" set="null" line="53" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</toLowerCase>
	<alltoUpperCase public="1" get="inline" set="null" line="56" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</alltoUpperCase>
	<toString public="1" get="inline" set="null" line="60" static="1">
		<f a="this">
			<x path="datetime.DTMonth"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringAllUpFromDateTime public="1" get="inline" set="null" line="89" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringAllUpFromDateTime>
	<stringLowerFromDateTime public="1" get="inline" set="null" line="94" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringLowerFromDateTime>
	<stringShortFromDateTime public="1" get="inline" set="null" line="99" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringShortFromDateTime>
	<stringFromDateTime public="1" get="inline" set="null" line="104" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.polish._MonthName.MonthName_Impl_" params="" file="src/datetimelang/polish/MonthName.hx" private="1" module="datetimelang.polish.MonthName" final="1">
		<_new public="1" get="inline" set="null" line="11" static="1">
			<f a="m">
				<x path="datetime.DTMonth"/>
				<x path="datetimelang.polish.MonthName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="15" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.polish.MonthName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="45" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toLowerCase public="1" get="inline" set="null" line="53" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</toLowerCase>
		<alltoUpperCase public="1" get="inline" set="null" line="56" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</alltoUpperCase>
		<toString public="1" get="inline" set="null" line="60" static="1">
			<f a="this">
				<x path="datetime.DTMonth"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringAllUpFromDateTime public="1" get="inline" set="null" line="89" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringAllUpFromDateTime>
		<stringLowerFromDateTime public="1" get="inline" set="null" line="94" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringLowerFromDateTime>
		<stringShortFromDateTime public="1" get="inline" set="null" line="99" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringShortFromDateTime>
		<stringFromDateTime public="1" get="inline" set="null" line="104" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
	</class>
	<abstract path="datetimelang.portuguese.DayName" params="" file="src/datetimelang/portuguese/DayName.hx">
		<from>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTWeekDay"/></this>
		<to>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.portuguese._DayName.DayName_Impl_" params="" file="src/datetimelang/portuguese/DayName.hx" private="1" module="datetimelang.portuguese.DayName" final="1">
	<_new public="1" get="inline" set="null" line="16" static="1">
		<f a="d">
			<x path="datetime.DTWeekDay"/>
			<x path="datetimelang.portuguese.DayName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="21" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.portuguese.DayName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="45" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toLowerCase public="1" get="inline" set="null" line="53" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</toLowerCase>
	<alltoUpperCase public="1" get="inline" set="null" line="56" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</alltoUpperCase>
	<toString public="1" get="inline" set="null" line="60" static="1">
		<f a="this">
			<x path="datetime.DTWeekDay"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<toStringDay public="1" get="inline" set="null" line="79" static="1"><f a="this">
	<x path="datetime.DTWeekDay"/>
	<c path="String"/>
</f></toStringDay>
	<stringAllUpFromDateTime public="1" get="inline" set="null" line="98" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringAllUpFromDateTime>
	<stringLowerFromDateTime public="1" get="inline" set="null" line="103" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringLowerFromDateTime>
	<stringShortFromDateTime public="1" get="inline" set="null" line="108" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringShortFromDateTime>
	<stringFromDateTime public="1" get="inline" set="null" line="113" static="1">
		<f a="dt:?mondayBased" v=":false">
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
	</stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.portuguese._DayName.DayName_Impl_" params="" file="src/datetimelang/portuguese/DayName.hx" private="1" module="datetimelang.portuguese.DayName" final="1">
		<_new public="1" get="inline" set="null" line="16" static="1">
			<f a="d">
				<x path="datetime.DTWeekDay"/>
				<x path="datetimelang.portuguese.DayName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="21" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.portuguese.DayName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="45" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toLowerCase public="1" get="inline" set="null" line="53" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</toLowerCase>
		<alltoUpperCase public="1" get="inline" set="null" line="56" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</alltoUpperCase>
		<toString public="1" get="inline" set="null" line="60" static="1">
			<f a="this">
				<x path="datetime.DTWeekDay"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<toStringDay public="1" get="inline" set="null" line="79" static="1"><f a="this">
	<x path="datetime.DTWeekDay"/>
	<c path="String"/>
</f></toStringDay>
		<stringAllUpFromDateTime public="1" get="inline" set="null" line="98" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringAllUpFromDateTime>
		<stringLowerFromDateTime public="1" get="inline" set="null" line="103" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringLowerFromDateTime>
		<stringShortFromDateTime public="1" get="inline" set="null" line="108" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringShortFromDateTime>
		<stringFromDateTime public="1" get="inline" set="null" line="113" static="1">
			<f a="dt:?mondayBased" v=":false">
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
		</stringFromDateTime>
	</class>
	<abstract path="datetimelang.portuguese.MonthName" params="" file="src/datetimelang/portuguese/MonthName.hx">
		<from>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTMonth"/></this>
		<to>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.portuguese._MonthName.MonthName_Impl_" params="" file="src/datetimelang/portuguese/MonthName.hx" private="1" module="datetimelang.portuguese.MonthName" final="1">
	<_new public="1" get="inline" set="null" line="11" static="1">
		<f a="m">
			<x path="datetime.DTMonth"/>
			<x path="datetimelang.portuguese.MonthName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="15" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.portuguese.MonthName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="47" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toLowerCase public="1" get="inline" set="null" line="55" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</toLowerCase>
	<alltoUpperCase public="1" get="inline" set="null" line="58" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</alltoUpperCase>
	<toString public="1" get="inline" set="null" line="62" static="1">
		<f a="this">
			<x path="datetime.DTMonth"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringAllUpFromDateTime public="1" get="inline" set="null" line="91" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringAllUpFromDateTime>
	<stringLowerFromDateTime public="1" get="inline" set="null" line="96" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringLowerFromDateTime>
	<stringShortFromDateTime public="1" get="inline" set="null" line="101" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringShortFromDateTime>
	<stringFromDateTime public="1" get="inline" set="null" line="106" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.portuguese._MonthName.MonthName_Impl_" params="" file="src/datetimelang/portuguese/MonthName.hx" private="1" module="datetimelang.portuguese.MonthName" final="1">
		<_new public="1" get="inline" set="null" line="11" static="1">
			<f a="m">
				<x path="datetime.DTMonth"/>
				<x path="datetimelang.portuguese.MonthName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="15" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.portuguese.MonthName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="47" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toLowerCase public="1" get="inline" set="null" line="55" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</toLowerCase>
		<alltoUpperCase public="1" get="inline" set="null" line="58" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</alltoUpperCase>
		<toString public="1" get="inline" set="null" line="62" static="1">
			<f a="this">
				<x path="datetime.DTMonth"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringAllUpFromDateTime public="1" get="inline" set="null" line="91" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringAllUpFromDateTime>
		<stringLowerFromDateTime public="1" get="inline" set="null" line="96" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringLowerFromDateTime>
		<stringShortFromDateTime public="1" get="inline" set="null" line="101" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringShortFromDateTime>
		<stringFromDateTime public="1" get="inline" set="null" line="106" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
	</class>
	<abstract path="datetimelang.romanian.DayName" params="" file="src/datetimelang/romanian/DayName.hx">
		<from>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTWeekDay"/></this>
		<to>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.romanian._DayName.DayName_Impl_" params="" file="src/datetimelang/romanian/DayName.hx" private="1" module="datetimelang.romanian.DayName" final="1">
	<_new public="1" get="inline" set="null" line="11" static="1">
		<f a="d">
			<x path="datetime.DTWeekDay"/>
			<x path="datetimelang.romanian.DayName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="16" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.romanian.DayName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="43" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toLowerCase public="1" get="inline" set="null" line="51" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</toLowerCase>
	<alltoUpperCase public="1" get="inline" set="null" line="54" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</alltoUpperCase>
	<toString public="1" get="inline" set="null" line="58" static="1">
		<f a="this">
			<x path="datetime.DTWeekDay"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringAllUpFromDateTime public="1" get="inline" set="null" line="77" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringAllUpFromDateTime>
	<stringLowerFromDateTime public="1" get="inline" set="null" line="82" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringLowerFromDateTime>
	<stringShortFromDateTime public="1" get="inline" set="null" line="87" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringShortFromDateTime>
	<stringFromDateTime public="1" get="inline" set="null" line="92" static="1">
		<f a="dt:?mondayBased" v=":false">
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
	</stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.romanian._DayName.DayName_Impl_" params="" file="src/datetimelang/romanian/DayName.hx" private="1" module="datetimelang.romanian.DayName" final="1">
		<_new public="1" get="inline" set="null" line="11" static="1">
			<f a="d">
				<x path="datetime.DTWeekDay"/>
				<x path="datetimelang.romanian.DayName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="16" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.romanian.DayName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="43" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toLowerCase public="1" get="inline" set="null" line="51" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</toLowerCase>
		<alltoUpperCase public="1" get="inline" set="null" line="54" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</alltoUpperCase>
		<toString public="1" get="inline" set="null" line="58" static="1">
			<f a="this">
				<x path="datetime.DTWeekDay"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringAllUpFromDateTime public="1" get="inline" set="null" line="77" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringAllUpFromDateTime>
		<stringLowerFromDateTime public="1" get="inline" set="null" line="82" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringLowerFromDateTime>
		<stringShortFromDateTime public="1" get="inline" set="null" line="87" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringShortFromDateTime>
		<stringFromDateTime public="1" get="inline" set="null" line="92" static="1">
			<f a="dt:?mondayBased" v=":false">
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
		</stringFromDateTime>
	</class>
	<abstract path="datetimelang.romanian.MonthName" params="" file="src/datetimelang/romanian/MonthName.hx">
		<from>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTMonth"/></this>
		<to>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.romanian._MonthName.MonthName_Impl_" params="" file="src/datetimelang/romanian/MonthName.hx" private="1" module="datetimelang.romanian.MonthName" final="1">
	<_new public="1" get="inline" set="null" line="11" static="1">
		<f a="m">
			<x path="datetime.DTMonth"/>
			<x path="datetimelang.romanian.MonthName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="15" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.romanian.MonthName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="45" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toLowerCase public="1" get="inline" set="null" line="53" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</toLowerCase>
	<alltoUpperCase public="1" get="inline" set="null" line="56" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</alltoUpperCase>
	<toString public="1" get="inline" set="null" line="60" static="1">
		<f a="this">
			<x path="datetime.DTMonth"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringAllUpFromDateTime public="1" get="inline" set="null" line="89" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringAllUpFromDateTime>
	<stringLowerFromDateTime public="1" get="inline" set="null" line="94" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringLowerFromDateTime>
	<stringShortFromDateTime public="1" get="inline" set="null" line="99" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringShortFromDateTime>
	<stringFromDateTime public="1" get="inline" set="null" line="104" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.romanian._MonthName.MonthName_Impl_" params="" file="src/datetimelang/romanian/MonthName.hx" private="1" module="datetimelang.romanian.MonthName" final="1">
		<_new public="1" get="inline" set="null" line="11" static="1">
			<f a="m">
				<x path="datetime.DTMonth"/>
				<x path="datetimelang.romanian.MonthName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="15" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.romanian.MonthName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="45" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toLowerCase public="1" get="inline" set="null" line="53" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</toLowerCase>
		<alltoUpperCase public="1" get="inline" set="null" line="56" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</alltoUpperCase>
		<toString public="1" get="inline" set="null" line="60" static="1">
			<f a="this">
				<x path="datetime.DTMonth"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringAllUpFromDateTime public="1" get="inline" set="null" line="89" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringAllUpFromDateTime>
		<stringLowerFromDateTime public="1" get="inline" set="null" line="94" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringLowerFromDateTime>
		<stringShortFromDateTime public="1" get="inline" set="null" line="99" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringShortFromDateTime>
		<stringFromDateTime public="1" get="inline" set="null" line="104" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
	</class>
	<abstract path="datetimelang.russian.DayName" params="" file="src/datetimelang/russian/DayName.hx">
		<from>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTWeekDay"/></this>
		<to>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.russian._DayName.DayName_Impl_" params="" file="src/datetimelang/russian/DayName.hx" private="1" module="datetimelang.russian.DayName" final="1">
	<_new public="1" get="inline" set="null" line="16" static="1">
		<f a="d">
			<x path="datetime.DTWeekDay"/>
			<x path="datetimelang.russian.DayName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="21" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.russian.DayName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="41" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toLowerCase public="1" get="inline" set="null" line="49" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</toLowerCase>
	<alltoUpperCase public="1" get="inline" set="null" line="52" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</alltoUpperCase>
	<toString public="1" get="inline" set="null" line="56" static="1">
		<f a="this">
			<x path="datetime.DTWeekDay"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringShortFromDateTime public="1" get="inline" set="null" line="75" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringShortFromDateTime>
	<stringFromDateTime public="1" get="inline" set="null" line="80" static="1">
		<f a="dt:?mondayBased" v=":false">
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
	</stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.russian._DayName.DayName_Impl_" params="" file="src/datetimelang/russian/DayName.hx" private="1" module="datetimelang.russian.DayName" final="1">
		<_new public="1" get="inline" set="null" line="16" static="1">
			<f a="d">
				<x path="datetime.DTWeekDay"/>
				<x path="datetimelang.russian.DayName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="21" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.russian.DayName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="41" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toLowerCase public="1" get="inline" set="null" line="49" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</toLowerCase>
		<alltoUpperCase public="1" get="inline" set="null" line="52" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</alltoUpperCase>
		<toString public="1" get="inline" set="null" line="56" static="1">
			<f a="this">
				<x path="datetime.DTWeekDay"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringShortFromDateTime public="1" get="inline" set="null" line="75" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringShortFromDateTime>
		<stringFromDateTime public="1" get="inline" set="null" line="80" static="1">
			<f a="dt:?mondayBased" v=":false">
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
		</stringFromDateTime>
	</class>
	<abstract path="datetimelang.russian.MonthName" params="" file="src/datetimelang/russian/MonthName.hx">
		<from>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTMonth"/></this>
		<to>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.russian._MonthName.MonthName_Impl_" params="" file="src/datetimelang/russian/MonthName.hx" private="1" module="datetimelang.russian.MonthName" final="1">
	<_new public="1" get="inline" set="null" line="11" static="1">
		<f a="m">
			<x path="datetime.DTMonth"/>
			<x path="datetimelang.russian.MonthName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="15" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.russian.MonthName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="45" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toLowerCase public="1" get="inline" set="null" line="53" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</toLowerCase>
	<alltoUpperCase public="1" get="inline" set="null" line="56" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</alltoUpperCase>
	<toString public="1" get="inline" set="null" line="60" static="1">
		<f a="this">
			<x path="datetime.DTMonth"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringAllUpFromDateTime public="1" get="inline" set="null" line="89" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringAllUpFromDateTime>
	<stringLowerFromDateTime public="1" get="inline" set="null" line="94" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringLowerFromDateTime>
	<stringShortFromDateTime public="1" get="inline" set="null" line="99" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringShortFromDateTime>
	<stringFromDateTime public="1" get="inline" set="null" line="104" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.russian._MonthName.MonthName_Impl_" params="" file="src/datetimelang/russian/MonthName.hx" private="1" module="datetimelang.russian.MonthName" final="1">
		<_new public="1" get="inline" set="null" line="11" static="1">
			<f a="m">
				<x path="datetime.DTMonth"/>
				<x path="datetimelang.russian.MonthName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="15" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.russian.MonthName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="45" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toLowerCase public="1" get="inline" set="null" line="53" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</toLowerCase>
		<alltoUpperCase public="1" get="inline" set="null" line="56" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</alltoUpperCase>
		<toString public="1" get="inline" set="null" line="60" static="1">
			<f a="this">
				<x path="datetime.DTMonth"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringAllUpFromDateTime public="1" get="inline" set="null" line="89" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringAllUpFromDateTime>
		<stringLowerFromDateTime public="1" get="inline" set="null" line="94" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringLowerFromDateTime>
		<stringShortFromDateTime public="1" get="inline" set="null" line="99" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringShortFromDateTime>
		<stringFromDateTime public="1" get="inline" set="null" line="104" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
	</class>
	<abstract path="datetimelang.somali.DayName" params="" file="src/datetimelang/somali/DayName.hx">
		<from>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTWeekDay"/></this>
		<to>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.somali._DayName.DayName_Impl_" params="" file="src/datetimelang/somali/DayName.hx" private="1" module="datetimelang.somali.DayName" final="1">
	<_new public="1" get="inline" set="null" line="16" static="1">
		<f a="d">
			<x path="datetime.DTWeekDay"/>
			<x path="datetimelang.somali.DayName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="21" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.somali.DayName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="41" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toLowerCase public="1" get="inline" set="null" line="49" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</toLowerCase>
	<alltoUpperCase public="1" get="inline" set="null" line="52" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</alltoUpperCase>
	<toString public="1" get="inline" set="null" line="56" static="1">
		<f a="this">
			<x path="datetime.DTWeekDay"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringAllUpFromDateTime public="1" get="inline" set="null" line="75" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringAllUpFromDateTime>
	<stringLowerFromDateTime public="1" get="inline" set="null" line="80" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringLowerFromDateTime>
	<stringShortFromDateTime public="1" get="inline" set="null" line="85" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringShortFromDateTime>
	<stringFromDateTime public="1" get="inline" set="null" line="90" static="1">
		<f a="dt:?mondayBased" v=":false">
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
	</stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.somali._DayName.DayName_Impl_" params="" file="src/datetimelang/somali/DayName.hx" private="1" module="datetimelang.somali.DayName" final="1">
		<_new public="1" get="inline" set="null" line="16" static="1">
			<f a="d">
				<x path="datetime.DTWeekDay"/>
				<x path="datetimelang.somali.DayName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="21" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.somali.DayName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="41" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toLowerCase public="1" get="inline" set="null" line="49" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</toLowerCase>
		<alltoUpperCase public="1" get="inline" set="null" line="52" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</alltoUpperCase>
		<toString public="1" get="inline" set="null" line="56" static="1">
			<f a="this">
				<x path="datetime.DTWeekDay"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringAllUpFromDateTime public="1" get="inline" set="null" line="75" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringAllUpFromDateTime>
		<stringLowerFromDateTime public="1" get="inline" set="null" line="80" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringLowerFromDateTime>
		<stringShortFromDateTime public="1" get="inline" set="null" line="85" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringShortFromDateTime>
		<stringFromDateTime public="1" get="inline" set="null" line="90" static="1">
			<f a="dt:?mondayBased" v=":false">
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
		</stringFromDateTime>
	</class>
	<abstract path="datetimelang.somali.MonthName" params="" file="src/datetimelang/somali/MonthName.hx">
		<from>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTMonth"/></this>
		<to>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.somali._MonthName.MonthName_Impl_" params="" file="src/datetimelang/somali/MonthName.hx" private="1" module="datetimelang.somali.MonthName" final="1">
	<_new public="1" get="inline" set="null" line="21" static="1">
		<f a="m">
			<x path="datetime.DTMonth"/>
			<x path="datetimelang.somali.MonthName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="25" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.somali.MonthName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="55" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toLowerCase public="1" get="inline" set="null" line="63" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</toLowerCase>
	<alltoUpperCase public="1" get="inline" set="null" line="66" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</alltoUpperCase>
	<toString public="1" get="inline" set="null" line="70" static="1">
		<f a="this">
			<x path="datetime.DTMonth"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringAllUpFromDateTime public="1" get="inline" set="null" line="99" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringAllUpFromDateTime>
	<stringLowerFromDateTime public="1" get="inline" set="null" line="104" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringLowerFromDateTime>
	<stringShortFromDateTime public="1" get="inline" set="null" line="109" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringShortFromDateTime>
	<stringFromDateTime public="1" get="inline" set="null" line="114" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.somali._MonthName.MonthName_Impl_" params="" file="src/datetimelang/somali/MonthName.hx" private="1" module="datetimelang.somali.MonthName" final="1">
		<_new public="1" get="inline" set="null" line="21" static="1">
			<f a="m">
				<x path="datetime.DTMonth"/>
				<x path="datetimelang.somali.MonthName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="25" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.somali.MonthName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="55" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toLowerCase public="1" get="inline" set="null" line="63" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</toLowerCase>
		<alltoUpperCase public="1" get="inline" set="null" line="66" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</alltoUpperCase>
		<toString public="1" get="inline" set="null" line="70" static="1">
			<f a="this">
				<x path="datetime.DTMonth"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringAllUpFromDateTime public="1" get="inline" set="null" line="99" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringAllUpFromDateTime>
		<stringLowerFromDateTime public="1" get="inline" set="null" line="104" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringLowerFromDateTime>
		<stringShortFromDateTime public="1" get="inline" set="null" line="109" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringShortFromDateTime>
		<stringFromDateTime public="1" get="inline" set="null" line="114" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
	</class>
	<abstract path="datetimelang.spanish.DayName" params="" file="src/datetimelang/spanish/DayName.hx">
		<from>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTWeekDay"/></this>
		<to>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.spanish._DayName.DayName_Impl_" params="" file="src/datetimelang/spanish/DayName.hx" private="1" module="datetimelang.spanish.DayName" final="1">
	<_new public="1" get="inline" set="null" line="10" static="1">
		<f a="d">
			<x path="datetime.DTWeekDay"/>
			<x path="datetimelang.spanish.DayName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="15" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.spanish.DayName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="39" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toLowerCase public="1" get="inline" set="null" line="47" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</toLowerCase>
	<alltoUpperCase public="1" get="inline" set="null" line="50" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</alltoUpperCase>
	<toString public="1" get="inline" set="null" line="54" static="1">
		<f a="this">
			<x path="datetime.DTWeekDay"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringAllUpFromDateTime public="1" get="inline" set="null" line="73" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringAllUpFromDateTime>
	<stringLowerFromDateTime public="1" get="inline" set="null" line="78" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringLowerFromDateTime>
	<stringShortFromDateTime public="1" get="inline" set="null" line="83" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringShortFromDateTime>
	<stringFromDateTime public="1" get="inline" set="null" line="88" static="1">
		<f a="dt:?mondayBased" v=":false">
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
	</stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.spanish._DayName.DayName_Impl_" params="" file="src/datetimelang/spanish/DayName.hx" private="1" module="datetimelang.spanish.DayName" final="1">
		<_new public="1" get="inline" set="null" line="10" static="1">
			<f a="d">
				<x path="datetime.DTWeekDay"/>
				<x path="datetimelang.spanish.DayName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="15" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.spanish.DayName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="39" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toLowerCase public="1" get="inline" set="null" line="47" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</toLowerCase>
		<alltoUpperCase public="1" get="inline" set="null" line="50" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</alltoUpperCase>
		<toString public="1" get="inline" set="null" line="54" static="1">
			<f a="this">
				<x path="datetime.DTWeekDay"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringAllUpFromDateTime public="1" get="inline" set="null" line="73" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringAllUpFromDateTime>
		<stringLowerFromDateTime public="1" get="inline" set="null" line="78" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringLowerFromDateTime>
		<stringShortFromDateTime public="1" get="inline" set="null" line="83" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringShortFromDateTime>
		<stringFromDateTime public="1" get="inline" set="null" line="88" static="1">
			<f a="dt:?mondayBased" v=":false">
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
		</stringFromDateTime>
	</class>
	<abstract path="datetimelang.spanish.MonthName" params="" file="src/datetimelang/spanish/MonthName.hx">
		<from>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTMonth"/></this>
		<to>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.spanish._MonthName.MonthName_Impl_" params="" file="src/datetimelang/spanish/MonthName.hx" private="1" module="datetimelang.spanish.MonthName" final="1">
	<_new public="1" get="inline" set="null" line="10" static="1">
		<f a="m">
			<x path="datetime.DTMonth"/>
			<x path="datetimelang.spanish.MonthName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="14" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.spanish.MonthName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="44" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toLowerCase public="1" get="inline" set="null" line="52" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</toLowerCase>
	<alltoUpperCase public="1" get="inline" set="null" line="55" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</alltoUpperCase>
	<toString public="1" get="inline" set="null" line="59" static="1">
		<f a="this">
			<x path="datetime.DTMonth"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringAllUpFromDateTime public="1" get="inline" set="null" line="88" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringAllUpFromDateTime>
	<stringLowerFromDateTime public="1" get="inline" set="null" line="93" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringLowerFromDateTime>
	<stringShortFromDateTime public="1" get="inline" set="null" line="98" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringShortFromDateTime>
	<stringFromDateTime public="1" get="inline" set="null" line="103" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.spanish._MonthName.MonthName_Impl_" params="" file="src/datetimelang/spanish/MonthName.hx" private="1" module="datetimelang.spanish.MonthName" final="1">
		<_new public="1" get="inline" set="null" line="10" static="1">
			<f a="m">
				<x path="datetime.DTMonth"/>
				<x path="datetimelang.spanish.MonthName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="14" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.spanish.MonthName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="44" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toLowerCase public="1" get="inline" set="null" line="52" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</toLowerCase>
		<alltoUpperCase public="1" get="inline" set="null" line="55" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</alltoUpperCase>
		<toString public="1" get="inline" set="null" line="59" static="1">
			<f a="this">
				<x path="datetime.DTMonth"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringAllUpFromDateTime public="1" get="inline" set="null" line="88" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringAllUpFromDateTime>
		<stringLowerFromDateTime public="1" get="inline" set="null" line="93" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringLowerFromDateTime>
		<stringShortFromDateTime public="1" get="inline" set="null" line="98" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringShortFromDateTime>
		<stringFromDateTime public="1" get="inline" set="null" line="103" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
	</class>
	<abstract path="datetimelang.swedish.DayName" params="" file="src/datetimelang/swedish/DayName.hx">
		<from>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTWeekDay"/></this>
		<to>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.swedish._DayName.DayName_Impl_" params="" file="src/datetimelang/swedish/DayName.hx" private="1" module="datetimelang.swedish.DayName" final="1">
	<_new public="1" get="inline" set="null" line="11" static="1">
		<f a="d">
			<x path="datetime.DTWeekDay"/>
			<x path="datetimelang.swedish.DayName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="16" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.swedish.DayName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="42" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toLowerCase public="1" get="inline" set="null" line="50" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</toLowerCase>
	<alltoUpperCase public="1" get="inline" set="null" line="53" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</alltoUpperCase>
	<toString public="1" get="inline" set="null" line="57" static="1">
		<f a="this">
			<x path="datetime.DTWeekDay"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringAllUpFromDateTime public="1" get="inline" set="null" line="76" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringAllUpFromDateTime>
	<stringLowerFromDateTime public="1" get="inline" set="null" line="81" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringLowerFromDateTime>
	<stringShortFromDateTime public="1" get="inline" set="null" line="86" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringShortFromDateTime>
	<stringFromDateTime public="1" get="inline" set="null" line="91" static="1">
		<f a="dt:?mondayBased" v=":false">
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
	</stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.swedish._DayName.DayName_Impl_" params="" file="src/datetimelang/swedish/DayName.hx" private="1" module="datetimelang.swedish.DayName" final="1">
		<_new public="1" get="inline" set="null" line="11" static="1">
			<f a="d">
				<x path="datetime.DTWeekDay"/>
				<x path="datetimelang.swedish.DayName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="16" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.swedish.DayName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="42" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toLowerCase public="1" get="inline" set="null" line="50" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</toLowerCase>
		<alltoUpperCase public="1" get="inline" set="null" line="53" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</alltoUpperCase>
		<toString public="1" get="inline" set="null" line="57" static="1">
			<f a="this">
				<x path="datetime.DTWeekDay"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringAllUpFromDateTime public="1" get="inline" set="null" line="76" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringAllUpFromDateTime>
		<stringLowerFromDateTime public="1" get="inline" set="null" line="81" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringLowerFromDateTime>
		<stringShortFromDateTime public="1" get="inline" set="null" line="86" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringShortFromDateTime>
		<stringFromDateTime public="1" get="inline" set="null" line="91" static="1">
			<f a="dt:?mondayBased" v=":false">
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
		</stringFromDateTime>
	</class>
	<abstract path="datetimelang.swedish.MonthName" params="" file="src/datetimelang/swedish/MonthName.hx">
		<from>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTMonth"/></this>
		<to>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.swedish._MonthName.MonthName_Impl_" params="" file="src/datetimelang/swedish/MonthName.hx" private="1" module="datetimelang.swedish.MonthName" final="1">
	<_new public="1" get="inline" set="null" line="10" static="1">
		<f a="m">
			<x path="datetime.DTMonth"/>
			<x path="datetimelang.swedish.MonthName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="14" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.swedish.MonthName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="44" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toLowerCase public="1" get="inline" set="null" line="52" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</toLowerCase>
	<alltoUpperCase public="1" get="inline" set="null" line="55" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</alltoUpperCase>
	<toString public="1" get="inline" set="null" line="59" static="1">
		<f a="this">
			<x path="datetime.DTMonth"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringAllUpFromDateTime public="1" get="inline" set="null" line="88" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringAllUpFromDateTime>
	<stringLowerFromDateTime public="1" get="inline" set="null" line="93" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringLowerFromDateTime>
	<stringShortFromDateTime public="1" get="inline" set="null" line="98" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringShortFromDateTime>
	<stringFromDateTime public="1" get="inline" set="null" line="103" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.swedish._MonthName.MonthName_Impl_" params="" file="src/datetimelang/swedish/MonthName.hx" private="1" module="datetimelang.swedish.MonthName" final="1">
		<_new public="1" get="inline" set="null" line="10" static="1">
			<f a="m">
				<x path="datetime.DTMonth"/>
				<x path="datetimelang.swedish.MonthName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="14" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.swedish.MonthName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="44" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toLowerCase public="1" get="inline" set="null" line="52" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</toLowerCase>
		<alltoUpperCase public="1" get="inline" set="null" line="55" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</alltoUpperCase>
		<toString public="1" get="inline" set="null" line="59" static="1">
			<f a="this">
				<x path="datetime.DTMonth"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringAllUpFromDateTime public="1" get="inline" set="null" line="88" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringAllUpFromDateTime>
		<stringLowerFromDateTime public="1" get="inline" set="null" line="93" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringLowerFromDateTime>
		<stringShortFromDateTime public="1" get="inline" set="null" line="98" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringShortFromDateTime>
		<stringFromDateTime public="1" get="inline" set="null" line="103" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
	</class>
	<abstract path="datetimelang.turkish.DayName" params="" file="src/datetimelang/turkish/DayName.hx">
		<from>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTWeekDay"/></this>
		<to>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.turkish._DayName.DayName_Impl_" params="" file="src/datetimelang/turkish/DayName.hx" private="1" module="datetimelang.turkish.DayName" final="1">
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="d">
			<x path="datetime.DTWeekDay"/>
			<x path="datetimelang.turkish.DayName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="18" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.turkish.DayName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="45" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toLowerCase public="1" get="inline" set="null" line="53" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</toLowerCase>
	<alltoUpperCase public="1" get="inline" set="null" line="56" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</alltoUpperCase>
	<toString public="1" get="inline" set="null" line="60" static="1">
		<f a="this">
			<x path="datetime.DTWeekDay"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringAllUpFromDateTime public="1" get="inline" set="null" line="79" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringAllUpFromDateTime>
	<stringLowerFromDateTime public="1" get="inline" set="null" line="84" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringLowerFromDateTime>
	<stringShortFromDateTime public="1" get="inline" set="null" line="89" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringShortFromDateTime>
	<stringFromDateTime public="1" get="inline" set="null" line="94" static="1">
		<f a="dt:?mondayBased" v=":false">
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
	</stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.turkish._DayName.DayName_Impl_" params="" file="src/datetimelang/turkish/DayName.hx" private="1" module="datetimelang.turkish.DayName" final="1">
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="d">
				<x path="datetime.DTWeekDay"/>
				<x path="datetimelang.turkish.DayName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="18" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.turkish.DayName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="45" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toLowerCase public="1" get="inline" set="null" line="53" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</toLowerCase>
		<alltoUpperCase public="1" get="inline" set="null" line="56" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</alltoUpperCase>
		<toString public="1" get="inline" set="null" line="60" static="1">
			<f a="this">
				<x path="datetime.DTWeekDay"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringAllUpFromDateTime public="1" get="inline" set="null" line="79" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringAllUpFromDateTime>
		<stringLowerFromDateTime public="1" get="inline" set="null" line="84" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringLowerFromDateTime>
		<stringShortFromDateTime public="1" get="inline" set="null" line="89" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringShortFromDateTime>
		<stringFromDateTime public="1" get="inline" set="null" line="94" static="1">
			<f a="dt:?mondayBased" v=":false">
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
		</stringFromDateTime>
	</class>
	<abstract path="datetimelang.turkish.MonthName" params="" file="src/datetimelang/turkish/MonthName.hx">
		<from>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTMonth"/></this>
		<to>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.turkish._MonthName.MonthName_Impl_" params="" file="src/datetimelang/turkish/MonthName.hx" private="1" module="datetimelang.turkish.MonthName" final="1">
	<_new public="1" get="inline" set="null" line="11" static="1">
		<f a="m">
			<x path="datetime.DTMonth"/>
			<x path="datetimelang.turkish.MonthName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="15" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.turkish.MonthName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="55" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toLowerCase public="1" get="inline" set="null" line="63" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</toLowerCase>
	<alltoUpperCase public="1" get="inline" set="null" line="66" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</alltoUpperCase>
	<toString public="1" get="inline" set="null" line="70" static="1">
		<f a="this">
			<x path="datetime.DTMonth"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringAllUpFromDateTime public="1" get="inline" set="null" line="99" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringAllUpFromDateTime>
	<stringLowerFromDateTime public="1" get="inline" set="null" line="104" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringLowerFromDateTime>
	<stringShortFromDateTime public="1" get="inline" set="null" line="109" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringShortFromDateTime>
	<stringFromDateTime public="1" get="inline" set="null" line="114" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.turkish._MonthName.MonthName_Impl_" params="" file="src/datetimelang/turkish/MonthName.hx" private="1" module="datetimelang.turkish.MonthName" final="1">
		<_new public="1" get="inline" set="null" line="11" static="1">
			<f a="m">
				<x path="datetime.DTMonth"/>
				<x path="datetimelang.turkish.MonthName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="15" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.turkish.MonthName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="55" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toLowerCase public="1" get="inline" set="null" line="63" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</toLowerCase>
		<alltoUpperCase public="1" get="inline" set="null" line="66" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</alltoUpperCase>
		<toString public="1" get="inline" set="null" line="70" static="1">
			<f a="this">
				<x path="datetime.DTMonth"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringAllUpFromDateTime public="1" get="inline" set="null" line="99" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringAllUpFromDateTime>
		<stringLowerFromDateTime public="1" get="inline" set="null" line="104" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringLowerFromDateTime>
		<stringShortFromDateTime public="1" get="inline" set="null" line="109" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringShortFromDateTime>
		<stringFromDateTime public="1" get="inline" set="null" line="114" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
	</class>
	<class path="datetimelang.upkeep.Doc" params="" file="src/datetimelang/upkeep/Doc.hx">
		<main public="1" set="method" line="6" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</main>
		<new public="1" set="method" line="9"><f a=""><x path="Void"/></f></new>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</class>
	<abstract path="datetimelang.welsh.DayName" params="" file="src/datetimelang/welsh/DayName.hx">
		<from>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTWeekDay"/></this>
		<to>
			<icast><x path="datetime.DTWeekDay"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.welsh._DayName.DayName_Impl_" params="" file="src/datetimelang/welsh/DayName.hx" private="1" module="datetimelang.welsh.DayName" final="1">
	<_new public="1" get="inline" set="null" line="16" static="1">
		<f a="d">
			<x path="datetime.DTWeekDay"/>
			<x path="datetimelang.welsh.DayName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="21" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.welsh.DayName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="41" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toLowerCase public="1" get="inline" set="null" line="49" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</toLowerCase>
	<alltoUpperCase public="1" get="inline" set="null" line="52" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</alltoUpperCase>
	<toString public="1" get="inline" set="null" line="56" static="1">
		<f a="this">
			<x path="datetime.DTWeekDay"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<toStringDydd public="1" get="inline" set="null" line="75" static="1"><f a="this">
	<x path="datetime.DTWeekDay"/>
	<c path="String"/>
</f></toStringDydd>
	<stringAllUpFromDateTime public="1" get="inline" set="null" line="94" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringAllUpFromDateTime>
	<stringLowerFromDateTime public="1" get="inline" set="null" line="99" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringLowerFromDateTime>
	<stringShortFromDateTime public="1" get="inline" set="null" line="104" static="1">
		<f a="dt:?len:?mondayBased" v=":-1:false">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
	</stringShortFromDateTime>
	<stringFromDateTime public="1" get="inline" set="null" line="109" static="1">
		<f a="dt:?mondayBased" v=":false">
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
	</stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.welsh._DayName.DayName_Impl_" params="" file="src/datetimelang/welsh/DayName.hx" private="1" module="datetimelang.welsh.DayName" final="1">
		<_new public="1" get="inline" set="null" line="16" static="1">
			<f a="d">
				<x path="datetime.DTWeekDay"/>
				<x path="datetimelang.welsh.DayName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="21" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.welsh.DayName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="41" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toLowerCase public="1" get="inline" set="null" line="49" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</toLowerCase>
		<alltoUpperCase public="1" get="inline" set="null" line="52" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</alltoUpperCase>
		<toString public="1" get="inline" set="null" line="56" static="1">
			<f a="this">
				<x path="datetime.DTWeekDay"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<toStringDydd public="1" get="inline" set="null" line="75" static="1"><f a="this">
	<x path="datetime.DTWeekDay"/>
	<c path="String"/>
</f></toStringDydd>
		<stringAllUpFromDateTime public="1" get="inline" set="null" line="94" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringAllUpFromDateTime>
		<stringLowerFromDateTime public="1" get="inline" set="null" line="99" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringLowerFromDateTime>
		<stringShortFromDateTime public="1" get="inline" set="null" line="104" static="1">
			<f a="dt:?len:?mondayBased" v=":-1:false">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false, len : -1 }</e></m></meta>
		</stringShortFromDateTime>
		<stringFromDateTime public="1" get="inline" set="null" line="109" static="1">
			<f a="dt:?mondayBased" v=":false">
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
		</stringFromDateTime>
	</class>
	<abstract path="datetimelang.welsh.MonthName" params="" file="src/datetimelang/welsh/MonthName.hx">
		<from>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="datetime.DTMonth"/></this>
		<to>
			<icast><x path="datetime.DTMonth"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="datetimelang.welsh._MonthName.MonthName_Impl_" params="" file="src/datetimelang/welsh/MonthName.hx" private="1" module="datetimelang.welsh.MonthName" final="1">
	<_new public="1" get="inline" set="null" line="11" static="1">
		<f a="m">
			<x path="datetime.DTMonth"/>
			<x path="datetimelang.welsh.MonthName"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="15" static="1">
		<f a="s">
			<c path="String"/>
			<x path="Null"><x path="datetimelang.welsh.MonthName"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<name public="1" get="inline" set="null" line="45" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</name>
	<toLowerCase public="1" get="inline" set="null" line="53" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</toLowerCase>
	<alltoUpperCase public="1" get="inline" set="null" line="56" static="1">
		<f a="this:?len" v=":-1">
			<x path="datetime.DTMonth"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</alltoUpperCase>
	<toString public="1" get="inline" set="null" line="60" static="1">
		<f a="this">
			<x path="datetime.DTMonth"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<stringAllUpFromDateTime public="1" get="inline" set="null" line="89" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringAllUpFromDateTime>
	<stringLowerFromDateTime public="1" get="inline" set="null" line="94" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringLowerFromDateTime>
	<stringShortFromDateTime public="1" get="inline" set="null" line="99" static="1">
		<f a="dt:?len" v=":-1">
			<x path="datetime.DateTime"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
	</stringShortFromDateTime>
	<stringFromDateTime public="1" get="inline" set="null" line="104" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
</class></impl>
	</abstract>
	<class path="datetimelang.welsh._MonthName.MonthName_Impl_" params="" file="src/datetimelang/welsh/MonthName.hx" private="1" module="datetimelang.welsh.MonthName" final="1">
		<_new public="1" get="inline" set="null" line="11" static="1">
			<f a="m">
				<x path="datetime.DTMonth"/>
				<x path="datetimelang.welsh.MonthName"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="15" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Null"><x path="datetimelang.welsh.MonthName"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<name public="1" get="inline" set="null" line="45" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</name>
		<toLowerCase public="1" get="inline" set="null" line="53" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</toLowerCase>
		<alltoUpperCase public="1" get="inline" set="null" line="56" static="1">
			<f a="this:?len" v=":-1">
				<x path="datetime.DTMonth"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</alltoUpperCase>
		<toString public="1" get="inline" set="null" line="60" static="1">
			<f a="this">
				<x path="datetime.DTMonth"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<stringAllUpFromDateTime public="1" get="inline" set="null" line="89" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringAllUpFromDateTime>
		<stringLowerFromDateTime public="1" get="inline" set="null" line="94" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringLowerFromDateTime>
		<stringShortFromDateTime public="1" get="inline" set="null" line="99" static="1">
			<f a="dt:?len" v=":-1">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
		</stringShortFromDateTime>
		<stringFromDateTime public="1" get="inline" set="null" line="104" static="1"><f a="dt">
	<x path="datetime.DateTime"/>
	<c path="String"/>
</f></stringFromDateTime>
	</class>
	<abstract path="haxe.CallStack" params="" file="/usr/local/lib/haxe/std/haxe/CallStack.hx">
		<from><icast><c path="Array"><e path="haxe.StackItem"/></c></icast></from>
		<this><c path="Array"><e path="haxe.StackItem"/></c></this>
		<haxe_doc>Get information about the call stack.</haxe_doc>
		<meta>
			<m n=":allow"><e>haxe.Exception</e></m>
			<m n=":using"><e>haxe.CallStack</e></m>
		</meta>
		<impl><class path="haxe._CallStack.CallStack_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/CallStack.hx" private="1" module="haxe.CallStack" final="1"><meta>
	<m n=":keep"/>
	<m n=":using"><e>haxe.CallStack</e></m>
	<m n=":allow"><e>haxe.Exception</e></m>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.Function" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.NotVoid" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with anything but `Void`.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.NotVoid_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Constructible" params="T" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is `public` and
	  * unifies with the type used for type parameter `T`.

	If a type parameter `A` is assigned to a type parameter `B` which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.DynamicAccess" params="T" file="/usr/local/lib/haxe/std/haxe/DynamicAccess.hx">
		<from><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></from>
		<this><d><c path="haxe.DynamicAccess.T"/></d></this>
		<to><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></to>
		<haxe_doc>DynamicAccess is an abstract type for working with anonymous structures
	that are intended to hold collections of objects by the string key.

	For example, these types of structures are often created from JSON.

	Basically, it wraps `Reflect` calls in a `Map`-like interface.</haxe_doc>
		<impl><class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.EnumTools" params="" file="/usr/local/lib/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		
			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/usr/local/lib/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="133" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="144" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="158" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="170" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe._Exception.NativeException" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/Exception.hx" private="1" module="haxe.Exception" extern="1">
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":native"><e>"Error"</e></m>
		</meta>
	</class>
	<class path="haxe.Exception" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/Exception.hx">
		<extends path="haxe._Exception.NativeException"/>
		<thrown set="method" line="28" static="1">
			<f a="value">
				<x path="Any"/>
				<x path="Any"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</thrown>
		<native public="1" get="accessor" set="null">
			<x path="Any"/>
			<haxe_doc>Native exception, which caused this exception.</haxe_doc>
		</native>
		<__skipStack>
			<x path="Int"/>
			<meta>
				<m n=":ifFeature"><e>"haxe.Exception.get_stack"</e></m>
				<m n=":noCompletion"/>
			</meta>
		</__skipStack>
		<__nativeException>
			<x path="Any"/>
			<meta><m n=":noCompletion"/></meta>
		</__nativeException>
		<__previousException>
			<x path="Null"><c path="haxe.Exception"/></x>
			<meta><m n=":noCompletion"/></meta>
		</__previousException>
		<get_native final="1" set="method" line="96"><f a=""><x path="Any"/></f></get_native>
		<new public="1" set="method" line="40">
			<f a="message:?previous:?native">
				<c path="String"/>
				<c path="haxe.Exception"/>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Create a new Exception instance.

		The `previous` argument could be used for exception chaining.

		The `native` argument is for internal usage only.
		There is no need to provide `native` argument manually and no need to keep it
		upon extending `haxe.Exception` unless you know what you're doing.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Base class for exceptions.

	If this class (or derivatives) is used to catch an exception, then
	`haxe.CallStack.exceptionStack()` will not return a stack for the exception
	caught. Use `haxe.Exception.stack` property instead:
	```haxe
	try {
		throwSomething();
	} catch(e:Exception) {
		trace(e.stack);
	}
	```

	Custom exceptions should extend this class:
	```haxe
	class MyException extends haxe.Exception {}
	//...
	throw new MyException('terrible exception');
	```

	`haxe.Exception` is also a wildcard type to catch any exception:
	```haxe
	try {
		throw 'Catch me!';
	} catch(e:haxe.Exception) {
		trace(e.message); // Output: Catch me!
	}
	```

	To rethrow an exception just throw it again.
	Haxe will try to rethrow an original native exception whenever possible.
	```haxe
	try {
		var a:Array<Int> = null;
		a.push(1); // generates target-specific null-pointer exception
	} catch(e:haxe.Exception) {
		throw e; // rethrows native exception instead of haxe.Exception
	}
	```]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe._NativeStackTrace.V8Error" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/NativeStackTrace.hx" private="1" module="haxe.NativeStackTrace" extern="1">
		<prepareStackTrace public="1" static="1"><f a="error:structuredStackTrace">
	<c path="js.lib.Error"/>
	<c path="Array"><t path="haxe.V8CallSite"/></c>
	<x path="Any"/>
</f></prepareStackTrace>
		<meta><m n=":native"><e>"Error"</e></m></meta>
	</class>
	<typedef path="haxe.V8CallSite" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/NativeStackTrace.hx" module="haxe.NativeStackTrace"><a>
	<getLineNumber set="method"><f a=""><x path="Int"/></f></getLineNumber>
	<getFunctionName set="method"><f a=""><c path="String"/></f></getFunctionName>
	<getFileName set="method"><f a=""><c path="String"/></f></getFileName>
	<getColumnNumber set="method"><f a=""><x path="Int"/></f></getColumnNumber>
</a></typedef>
	<typedef path="haxe._Rest.NativeRest" params="T" file="/usr/local/lib/haxe/std/haxe/Rest.hx" private="1" module="haxe.Rest"><c path="Array"><c path="haxe._Rest.NativeRest.T"/></c></typedef>
	<abstract path="haxe.Rest" params="T" file="/usr/local/lib/haxe/std/haxe/Rest.hx">
		<from><icast field="of"><c path="Array"><c path="of.T"/></c></icast></from>
		<this><t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t></this>
		<to><icast field="toArray"><c path="Array"><c path="haxe.Rest.T"/></c></icast></to>
		<haxe_doc><![CDATA[A special type that represents a "rest" function argument.
	
	The special `...` syntax can be used for convenience and improved readability:

	```haxe
	function f(...rest:Int) {
		$type(rest); // haxe.Rest<Int>
	}

	f(1, 2, 3);

	final array = [1, 2, 3];
	f(...array);
	```

	Should be used as a type for the last argument of a method, indicating that
	an arbitrary number of arguments of the given type can be passed to that method.

	Allows to use array access by index to get values of rest arguments.
	If the index exceeds the amount of rest arguments passed, the result is unspecified.]]></haxe_doc>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe._Rest.Rest_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Rest.hx" private="1" module="haxe.Rest" final="1"><meta>
	<m n=":keep"/>
	<m n=":coreApi"/>
</meta></class></impl>
	</abstract>
	<class path="haxe.ValueException" params="" file="/usr/local/lib/haxe/std/haxe/ValueException.hx">
		<extends path="haxe.Exception"/>
		<value public="1" set="null">
			<x path="Any"/>
			<haxe_doc>Thrown value.</haxe_doc>
		</value>
		<new public="1" set="method" line="23"><f a="value:?previous:?native">
	<x path="Any"/>
	<c path="haxe.Exception"/>
	<x path="Any"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An exception containing arbitrary value.

	This class is automatically used for throwing values, which don't extend `haxe.Exception`
	or native exception type.
	For example:
	```haxe
	throw "Terrible error";
	```
	will be compiled to
	```haxe
	throw new ValueException("Terrible error");
	```</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="/usr/local/lib/haxe/std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<to><icast><t path="Iterable"><c path="haxe.ds.ReadOnlyArray.T"/></t></icast></to>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta><m n=":forward">
	<e>copy</e>
	<e>filter</e>
	<e>indexOf</e>
	<e>iterator</e>
	<e>keyValueIterator</e>
	<e>join</e>
	<e>lastIndexOf</e>
	<e>map</e>
	<e>slice</e>
	<e>contains</e>
	<e>toString</e>
</m></meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe.extern.Rest" params="T" file="/usr/local/lib/haxe/std/haxe/extern/Rest.hx">
		<x path="haxe.Rest"><c path="haxe.extern.Rest.T"/></x>
		<haxe_doc><![CDATA[DEPRECATED: use haxe.Rest instead.
	
	A special type that represents "rest" function argument.
	Should be used as a type for the last argument of an extern method,
	representing that arbitrary number of arguments of given type can be
	passed to that method.
	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
	</typedef>
	<class path="haxe.iterators.ArrayIterator" params="T" file="/usr/local/lib/haxe/std/haxe/iterators/ArrayIterator.hx">
		<array final="1"><c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c></array>
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="44">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="52">
			<f a=""><c path="haxe.iterators.ArrayIterator.T"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="35">
			<f a="array">
				<c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `ArrayIterator`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[This iterator is used only when `Array<T>` is passed to `Iterable<T>`]]></haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="js.Boot" params="" file="/usr/local/lib/haxe/std/js/Boot.hx">
		<getClass set="method" line="41" static="1">
			<f a="o">
				<x path="Null"><d/></x>
				<x path="Null"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getClass>
		<__string_rec set="method" line="58" static="1">
			<f a="o:s">
				<a>
					<toString set="null"><f a=""><c path="String"/></f></toString>
					<length set="null"><x path="Int"/></length>
					<hasOwnProperty set="null"><f a="">
	<c path="String"/>
	<x path="Bool"/>
</f></hasOwnProperty>
					<_hx_index set="null"><x path="Int"/></_hx_index>
					<__enum__ set="null"><x path="Bool"/></__enum__>
				</a>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":ifFeature"><e>"has_enum"</e></m>
			</meta>
		</__string_rec>
		<__interfLoop set="method" line="143" static="1"><f a="cc:cl">
	<d/>
	<d/>
	<x path="Bool"/>
</f></__interfLoop>
		<__instanceof set="method" line="162" static="1">
			<f a="o:cl">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__instanceof>
		<__downcastCheck set="method" line="206" static="1"><f a="o:cl">
	<d/>
	<x path="Class"><d/></x>
	<x path="Bool"/>
</f></__downcastCheck>
		<__cast set="method" line="214" static="1">
			<f a="o:t">
				<d/>
				<d/>
				<unknown/>
			</f>
			<meta><m n=":ifFeature"><e>"typed_cast"</e></m></meta>
		</__cast>
		<__toStr static="1"><c path="js.lib.Function"/></__toStr>
		<__nativeClassName set="method" line="228" static="1"><f a="o">
	<d/>
	<c path="String"/>
</f></__nativeClassName>
		<__isNativeObj set="method" line="238" static="1"><f a="o">
	<d/>
	<x path="Bool"/>
</f></__isNativeObj>
		<__resolveNativeClass set="method" line="243" static="1"><f a="name">
	<c path="String"/>
	<x path="Null"><d/></x>
</f></__resolveNativeClass>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</class>
	<class path="js.Lib" params="" file="/usr/local/lib/haxe/std/js/Lib.hx">
		<require public="1" get="inline" set="null" line="57" static="1">
			<f a="module">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Inserts a `require` expression that loads JavaScript object from
		a module or file specified in the `module` argument.

		This is only supported in environments where `require` function
		is available, such as Node.js or RequireJS.</haxe_doc>
		</require>
		<parseInt public="1" get="accessor" set="null" static="1">
			<f a="string:?radix">
				<c path="String"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Native JavaScript `parseInt` function.

		Its specification is different from `Std.parseInt`, so one
		might want to access the native one.</haxe_doc>
		</parseInt>
		<get_parseInt get="inline" set="null" line="69" static="1"><f a=""><f a="string:?radix">
	<c path="String"/>
	<x path="Int"/>
	<x path="Float"/>
</f></f></get_parseInt>
		<nativeThis public="1" get="accessor" set="null" static="1">
			<d/>
			<haxe_doc>`nativeThis` is the JavaScript `this`, which is semantically different
		from the Haxe `this`. Use `nativeThis` only when working with external
		JavaScript code.

		In Haxe, `this` is always bound to a class instance.
		In JavaScript, `this` in a function can be bound to an arbitrary
		variable when the function is called using `func.call(thisObj, ...)` or
		`func.apply(thisObj, [...])`.

		Read more at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this</haxe_doc>
		</nativeThis>
		<get_nativeThis get="inline" set="null" line="100" static="1"><f a=""><d/></f></get_nativeThis>
		<typeof public="1" get="inline" set="null" line="110" static="1">
			<f a="o">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Call JavaScript `typeof` operator on the `o` value
		and return a string representing the JavaScript type of a value.

		Read more at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof</haxe_doc>
		</typeof>
		<global public="1" get="accessor" set="null" static="1">
			<d/>
			<haxe_doc>An alias of the JS "global" object.

		Concretely, it is set as the first defined value in the list of
		`window`, `global`, `self`, and `this` in the top-level of the compiled output.</haxe_doc>
		</global>
		<get_global get="inline" set="null" line="122" static="1">
			<f a=""><d/></f>
			<meta><m n=":has_untyped"/></meta>
		</get_global>
		<haxe_doc>Platform-specific JavaScript Library. Provides some platform-specific functions
	for the JavaScript target.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="js.lib.Error" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" extern="1">
		<message public="1"><c path="String"/></message>
		<name public="1"><c path="String"/></name>
		<stack public="1" set="null"><c path="String"/></stack>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Error"</e></m>
		</meta>
	</class>
	<class path="js.lib.EvalError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"EvalError"</e></m></meta>
	</class>
	<class path="js.lib.RangeError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"RangeError"</e></m></meta>
	</class>
	<class path="js.lib.ReferenceError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"ReferenceError"</e></m></meta>
	</class>
	<class path="js.lib.SyntaxError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"SyntaxError"</e></m></meta>
	</class>
	<class path="js.lib.TypeError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"TypeError"</e></m></meta>
	</class>
	<class path="js.lib.URIError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"URIError"</e></m></meta>
	</class>
	<class path="js.lib.Function" params="" file="/usr/local/lib/haxe/std/js/lib/Function.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Specifies the number of arguments expected by the function.</haxe_doc>
		</length>
		<name public="1">
			<c path="String"/>
			<haxe_doc>The name of the function.</haxe_doc>
		</name>
		<apply public="1" set="method">
			<f a="thisArg:argsArray">
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Calls a function and sets its this to the provided value, arguments can be passed as an Array object.</haxe_doc>
		</apply>
		<call public="1" set="method">
			<f a="thisArg:args">
				<d/>
				<t path="haxe.extern.Rest"><d/></t>
				<d/>
			</f>
			<haxe_doc>Calls (executes) a function and sets its this to the provided value, arguments can be passed as they are.</haxe_doc>
		</call>
		<bind public="1" set="method">
			<f a="thisArg:args">
				<d/>
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Function"/>
			</f>
			<haxe_doc>Creates a new function which, when called, has its this set to the provided value,
		with a given sequence of arguments preceding any provided when the new function was called.</haxe_doc>
		</bind>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the source code of the function.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="arg:rest">
				<c path="String"/>
				<t path="haxe.extern.Rest"><c path="String"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Function object.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Function"</e></m></meta>
	</class>
	<class path="js.lib.Object" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" extern="1">
		<assign public="1" params="T" set="method" static="1">
			<f a="target:sources">
				<c path="assign.T"/>
				<t path="haxe.extern.Rest"><a/></t>
				<c path="assign.T"/>
			</f>
			<haxe_doc>Copies the values of all enumerable own properties from one or more
		source objects to a target object.</haxe_doc>
		</assign>
		<create public="1" params="T" set="method" static="1">
			<f a="proto:?propertiesObject">
				<a/>
				<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"/></x>
				<c path="create.T"/>
			</f>
			<haxe_doc>Creates a new object with the specified prototype object and properties.</haxe_doc>
		</create>
		<defineProperties public="1" params="T" set="method" static="1">
			<f a="obj:props">
				<c path="defineProperties.T"/>
				<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"/></x>
				<c path="defineProperties.T"/>
			</f>
			<haxe_doc>Adds the named properties described by the given descriptors to an object.</haxe_doc>
		</defineProperties>
		<defineProperty public="1" params="T" set="method" static="1">
			<f a="obj:prop:descriptor">
				<c path="defineProperty.T"/>
				<c path="String"/>
				<t path="js.lib.ObjectPropertyDescriptor"/>
				<c path="defineProperty.T"/>
			</f>
			<haxe_doc>Adds the named property described by a given descriptor to an object.</haxe_doc>
			<overloads><defineProperty public="1" params="T" set="method">
	<f a="obj:prop:descriptor">
		<c path="defineProperty.T"/>
		<c path="js.lib.Symbol"/>
		<t path="js.lib.ObjectPropertyDescriptor"/>
		<c path="defineProperty.T"/>
	</f>
	<haxe_doc>Adds the named property described by a given descriptor to an object.</haxe_doc>
</defineProperty></overloads>
		</defineProperty>
		<entries public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><x path="js.lib.ObjectEntry"/></c>
			</f>
			<haxe_doc>Returns an array containing all of the [key, value] pairs of a given
		object's own enumerable string properties.</haxe_doc>
		</entries>
		<freeze public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="freeze.T"/>
				<c path="freeze.T"/>
			</f>
			<haxe_doc>Freezes an object: other code can't delete or change any properties.</haxe_doc>
		</freeze>
		<fromEntries public="1" params="T" set="method" static="1">
			<f a="iterable">
				<x path="Any"/>
				<c path="fromEntries.T"/>
			</f>
			<haxe_doc>Returns a new object from an iterable of key-value pairs
		(reverses Object.entries).</haxe_doc>
		</fromEntries>
		<getOwnPropertyDescriptor public="1" set="method" static="1">
			<f a="obj:prop">
				<a/>
				<c path="String"/>
				<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"/></x>
			</f>
			<haxe_doc>Returns a property descriptor for a named property on an object.</haxe_doc>
			<overloads>
				<getOwnPropertyDescriptor public="1" params="T" set="method">
					<f a="target:propertyKey">
						<c path="Array"><c path="getOwnPropertyDescriptor.T"/></c>
						<x path="Int"/>
						<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"/></x>
					</f>
					<haxe_doc>Returns a property descriptor for a named property on an object.</haxe_doc>
				</getOwnPropertyDescriptor>
				<getOwnPropertyDescriptor public="1" set="method">
					<f a="obj:prop">
						<a/>
						<c path="js.lib.Symbol"/>
						<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"/></x>
					</f>
					<haxe_doc>Returns a property descriptor for a named property on an object.</haxe_doc>
				</getOwnPropertyDescriptor>
			</overloads>
		</getOwnPropertyDescriptor>
		<getOwnPropertyNames public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing the names of all of the given object's own
		enumerable and non-enumerable properties.</haxe_doc>
		</getOwnPropertyNames>
		<getOwnPropertySymbols public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="js.lib.Symbol"/></c>
			</f>
			<haxe_doc>Returns an array of all symbol properties found directly upon a given object.</haxe_doc>
		</getOwnPropertySymbols>
		<getPrototypeOf public="1" params="TProto" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Null"><c path="getPrototypeOf.TProto"/></x>
			</f>
			<haxe_doc>Returns the prototype of the specified object.</haxe_doc>
		</getPrototypeOf>
		<is public="1" params="T" set="method" static="1">
			<f a="value1:value2">
				<c path="is.T"/>
				<c path="is.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares if two values are the same value. Equates all NaN values
		(which differs from both Abstract Equality Comparison and
		Strict Equality Comparison).</haxe_doc>
		</is>
		<isExtensible public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if extending of an object is allowed.</haxe_doc>
		</isExtensible>
		<isFrozen public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if an object was frozen.</haxe_doc>
		</isFrozen>
		<isSealed public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if an object is sealed.</haxe_doc>
		</isSealed>
		<keys public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing the names of all of the given object's own
		enumerable string properties.</haxe_doc>
		</keys>
		<preventExtensions public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="preventExtensions.T"/>
				<c path="preventExtensions.T"/>
			</f>
			<haxe_doc>Prevents any extensions of an object.</haxe_doc>
		</preventExtensions>
		<seal public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="seal.T"/>
				<c path="seal.T"/>
			</f>
			<haxe_doc>Prevents other code from deleting properties of an object.</haxe_doc>
		</seal>
		<setPrototypeOf public="1" params="T" set="method" static="1">
			<f a="obj:prototype">
				<c path="setPrototypeOf.T"/>
				<x path="Null"><a/></x>
				<c path="setPrototypeOf.T"/>
			</f>
			<haxe_doc>Sets the prototype (i.e., the internal Prototype property).</haxe_doc>
		</setPrototypeOf>
		<values public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><x path="Any"/></c>
			</f>
			<haxe_doc>Returns an array containing the values that correspond to all of
		a given object's own enumerable string properties.</haxe_doc>
		</values>
		<prototype public="1" set="null" static="1">
			<t path="js.lib.ObjectPrototype"/>
			<haxe_doc>Allows the addition of properties to all objects of type Object.</haxe_doc>
		</prototype>
		<new public="1" set="method">
			<f a="?value">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The Object constructor creates an object wrapper.</haxe_doc>
		</new>
		<haxe_doc>The `js.lib.Object` constructor creates an object wrapper.

	Documentation [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Object"</e></m></meta>
	</class>
	<typedef path="js.lib.ObjectPrototype" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" module="js.lib.Object">
		<a>
			<valueOf set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns the primitive value of the specified object.</haxe_doc>
			</valueOf>
			<toString set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a string representation of the object.</haxe_doc>
			</toString>
			<toLocaleString set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Calls `toString()`.</haxe_doc>
			</toLocaleString>
			<propertyIsEnumerable set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating if the internal enumerable attribute is set.</haxe_doc>
			</propertyIsEnumerable>
			<isPrototypeOf set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating whether the object this method is called
		upon is in the prototype chain of the specified object.</haxe_doc>
			</isPrototypeOf>
			<hasOwnProperty set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating whether an object contains the specified
		property as a direct property of that object and not inherited through
		the prototype chain.</haxe_doc>
			</hasOwnProperty>
		</a>
		<haxe_doc><![CDATA[Type for
	@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object>]]></haxe_doc>
	</typedef>
	<typedef path="js.lib.ObjectPropertyDescriptor" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" module="js.lib.Object">
		<a>
			<writable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if the value associated with the property may be
		changed with an assignment operator.

		Defaults to `false`.</haxe_doc>
			</writable>
			<value>
				<x path="Null"><x path="Any"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The value associated with the property.
		Can be any valid JavaScript value (number, object, function, etc).</haxe_doc>
			</value>
			<set>
				<x path="Null"><f a="">
	<x path="Any"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A function which serves as a setter for the property, or undefined if
		there is no setter. When the property is assigned to, this function
		is called with one argument (the value being assigned to the property)
		and with `this` set to the object through which the property is assigned.</haxe_doc>
			</set>
			<get>
				<x path="Null"><f a=""><x path="Any"/></f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A function which serves as a getter for the property, or `undefined` if
		there is no getter. When the property is accessed, this function is
		called without arguments and with `this` set to the object through which
		the property is accessed (this may not be the object on which the
		property is defined due to inheritance).
		The return value will be used as the value of the property.</haxe_doc>
			</get>
			<enumerable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if this property shows up during enumeration of the
		properties on the corresponding object.

		Defaults to `false`.</haxe_doc>
			</enumerable>
			<configurable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if the type of this property descriptor may be
		changed and if the property may be deleted from the corresponding object.

		Defaults to `false`.</haxe_doc>
			</configurable>
		</a>
		<haxe_doc><![CDATA[@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty>]]></haxe_doc>
	</typedef>
	<abstract path="js.lib.ObjectEntry" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" module="js.lib.Object">
		<this><c path="Array"><x path="Any"/></c></this>
		<haxe_doc>Key/value access helper for `js.lib.Object.entries()`.</haxe_doc>
		<impl><class path="js.lib._Object.ObjectEntry_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" private="1" module="js.lib.Object" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="js.lib.RegExpMatch" params="" file="/usr/local/lib/haxe/std/js/lib/RegExp.hx" module="js.lib.RegExp" extern="1">
		<extends path="Array"><c path="String"/></extends>
		<index public="1">
			<x path="Int"/>
			<haxe_doc>The index of the search at which the result was found.</haxe_doc>
		</index>
		<input public="1">
			<c path="String"/>
			<haxe_doc>A copy of the search string.</haxe_doc>
		</input>
		<groups public="1">
			<x path="Null"><x path="haxe.DynamicAccess"><c path="String"/></x></x>
			<haxe_doc>Named capturing groups or undefined if no named capturing groups were defined.
		See [Groups and Ranges](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges) for more information.

		Note: Not all browsers support this feature; refer to the [compatibility table](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Browser_compatibility).</haxe_doc>
		</groups>
		<haxe_doc>A return value of the `RegExp.exec` method.</haxe_doc>
	</class>
	<class path="js.lib.Symbol" params="" file="/usr/local/lib/haxe/std/js/lib/Symbol.hx" extern="1">
		<for_ public="1" set="method" static="1">
			<f a="key">
				<c path="String"/>
				<c path="js.lib.Symbol"/>
			</f>
			<meta><m n=":native"><e>"for"</e></m></meta>
			<haxe_doc>Searches for existing symbols with the given key and returns it if found.
		Otherwise a new symbol gets created in the global symbol registry with this key.</haxe_doc>
		</for_>
		<keyFor public="1" set="method" static="1">
			<f a="sym">
				<c path="js.lib.Symbol"/>
				<x path="Null"><c path="String"/></x>
			</f>
			<haxe_doc>Retrieves a shared symbol key from the global symbol registry for the given symbol.</haxe_doc>
		</keyFor>
		<iterator public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A method returning the default iterator for an object.</haxe_doc>
		</iterator>
		<asyncIterator public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A method that returns the default AsyncIterator for an object.</haxe_doc>
		</asyncIterator>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string containing the description of the Symbol.</haxe_doc>
		</toString>
		<ofObject public="1" params="T" get="inline" set="null" line="67">
			<f a="object">
				<a/>
				<x path="Null"><c path="ofObject.T"/></x>
			</f>
			<haxe_doc>Retrieve symbol from a given `object`.

		NOTE: This is a Haxe-specific method that generates an `object[symbol]` expression.</haxe_doc>
		</ofObject>
		<new public="1" set="method">
			<f a="?description">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":selfCall"/></meta>
			<haxe_doc>To create a new primitive symbol, use `new Symbol()` with an optional string as its `description`.

		NOTE: Unlike in plain JavaScript, `new Symbol()` syntax is used in Haxe. This generates a `Symbol(...)`
		expression as required by the JavaScript specification.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Symbol"</e></m></meta>
	</class>
</haxe>