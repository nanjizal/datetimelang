// Generated by Haxe 4.3.0-rc.1+5f599ba
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.now = function() {
	return Date.now();
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
var datetime_DTPeriod = $hxEnums["datetime.DTPeriod"] = { __ename__:true,__constructs__:null
	,Year: ($_=function(n) { return {_hx_index:0,n:n,__enum__:"datetime.DTPeriod",toString:$estr}; },$_._hx_name="Year",$_.__params__ = ["n"],$_)
	,Month: ($_=function(n) { return {_hx_index:1,n:n,__enum__:"datetime.DTPeriod",toString:$estr}; },$_._hx_name="Month",$_.__params__ = ["n"],$_)
	,Day: ($_=function(n) { return {_hx_index:2,n:n,__enum__:"datetime.DTPeriod",toString:$estr}; },$_._hx_name="Day",$_.__params__ = ["n"],$_)
	,Hour: ($_=function(n) { return {_hx_index:3,n:n,__enum__:"datetime.DTPeriod",toString:$estr}; },$_._hx_name="Hour",$_.__params__ = ["n"],$_)
	,Minute: ($_=function(n) { return {_hx_index:4,n:n,__enum__:"datetime.DTPeriod",toString:$estr}; },$_._hx_name="Minute",$_.__params__ = ["n"],$_)
	,Second: ($_=function(n) { return {_hx_index:5,n:n,__enum__:"datetime.DTPeriod",toString:$estr}; },$_._hx_name="Second",$_.__params__ = ["n"],$_)
	,Week: ($_=function(n) { return {_hx_index:6,n:n,__enum__:"datetime.DTPeriod",toString:$estr}; },$_._hx_name="Week",$_.__params__ = ["n"],$_)
};
datetime_DTPeriod.__constructs__ = [datetime_DTPeriod.Year,datetime_DTPeriod.Month,datetime_DTPeriod.Day,datetime_DTPeriod.Hour,datetime_DTPeriod.Minute,datetime_DTPeriod.Second,datetime_DTPeriod.Week];
var datetime_DTSnap = $hxEnums["datetime.DTSnap"] = { __ename__:true,__constructs__:null
	,Year: ($_=function(direction) { return {_hx_index:0,direction:direction,__enum__:"datetime.DTSnap",toString:$estr}; },$_._hx_name="Year",$_.__params__ = ["direction"],$_)
	,Month: ($_=function(direction) { return {_hx_index:1,direction:direction,__enum__:"datetime.DTSnap",toString:$estr}; },$_._hx_name="Month",$_.__params__ = ["direction"],$_)
	,Day: ($_=function(direction) { return {_hx_index:2,direction:direction,__enum__:"datetime.DTSnap",toString:$estr}; },$_._hx_name="Day",$_.__params__ = ["direction"],$_)
	,Hour: ($_=function(direction) { return {_hx_index:3,direction:direction,__enum__:"datetime.DTSnap",toString:$estr}; },$_._hx_name="Hour",$_.__params__ = ["direction"],$_)
	,Minute: ($_=function(direction) { return {_hx_index:4,direction:direction,__enum__:"datetime.DTSnap",toString:$estr}; },$_._hx_name="Minute",$_.__params__ = ["direction"],$_)
	,Second: ($_=function(direction) { return {_hx_index:5,direction:direction,__enum__:"datetime.DTSnap",toString:$estr}; },$_._hx_name="Second",$_.__params__ = ["direction"],$_)
	,Week: ($_=function(direction,day) { return {_hx_index:6,direction:direction,day:day,__enum__:"datetime.DTSnap",toString:$estr}; },$_._hx_name="Week",$_.__params__ = ["direction","day"],$_)
};
datetime_DTSnap.__constructs__ = [datetime_DTSnap.Year,datetime_DTSnap.Month,datetime_DTSnap.Day,datetime_DTSnap.Hour,datetime_DTSnap.Minute,datetime_DTSnap.Second,datetime_DTSnap.Week];
var datetime_DateTime = {};
datetime_DateTime.now = function() {
	var this1 = Math.floor(new Date().getTime() / 1000) + 62135596800.0;
	return this1;
};
datetime_DateTime.local = function() {
	var this1 = Math.floor(new Date().getTime() / 1000) + 62135596800.0;
	var utc = this1;
	var this1 = utc - 62135596800.0 + datetime_DateTime.getLocalOffset() + 62135596800.0;
	return this1;
};
datetime_DateTime.make = function(year,month,day,hour,minute,second) {
	if(second == null) {
		second = 0;
	}
	if(minute == null) {
		minute = 0;
	}
	if(hour == null) {
		hour = 0;
	}
	if(day == null) {
		day = 1;
	}
	if(month == null) {
		month = 1;
	}
	if(year == null) {
		year = 1970;
	}
	var this1 = datetime_utils_DateTimeUtils.yearToStamp(year) + datetime_utils_DateTimeMonthUtils.toSeconds(month,year % 4 == 0 && (year % 100 == 0 ? year % 400 == 0 : true)) + (day - 1) * 86400 + hour * 3600 + minute * 60 + second - 62135596800.0 + 62135596800.0;
	return this1;
};
datetime_DateTime.fromTime = function(time) {
	var this1 = time + 62135596800.0;
	return this1;
};
datetime_DateTime.fromString = function(str) {
	return datetime_utils_DateTimeUtils.fromString(str);
};
datetime_DateTime.fromDate = function(date) {
	var this1 = Math.floor(date.getTime() / 1000) + 62135596800.0;
	return this1;
};
datetime_DateTime.daysInMonth = function(month,isLeapYear) {
	if(isLeapYear == null) {
		isLeapYear = false;
	}
	return datetime_utils_DateTimeMonthUtils.days(month,isLeapYear);
};
datetime_DateTime.weeksInYear = function(year) {
	var this1 = datetime_utils_DateTimeUtils.yearToStamp(year) - 62135596800.0 + 62135596800.0;
	var start = this1;
	var weekDay = datetime_DateTime.getWeekDay(start);
	if(weekDay == 4 || weekDay == 3 && datetime_DateTime.isLeapYear(start)) {
		return 53;
	} else {
		return 52;
	}
};
datetime_DateTime.isLeap = function(year) {
	if(year % 4 == 0) {
		if(year % 100 == 0) {
			return year % 400 == 0;
		} else {
			return true;
		}
	} else {
		return false;
	}
};
datetime_DateTime.getLocalOffset = function() {
	var now = new Date();
	var year = now.getFullYear();
	var month = now.getMonth() + 1;
	var day = now.getDate();
	var hour = now.getHours();
	var minute = now.getMinutes();
	var second = now.getSeconds();
	if(second == null) {
		second = 0;
	}
	if(minute == null) {
		minute = 0;
	}
	if(hour == null) {
		hour = 0;
	}
	if(day == null) {
		day = 1;
	}
	if(month == null) {
		month = 1;
	}
	if(year == null) {
		year = 1970;
	}
	var this1 = datetime_utils_DateTimeUtils.yearToStamp(year) + datetime_utils_DateTimeMonthUtils.toSeconds(month,year % 4 == 0 && (year % 100 == 0 ? year % 400 == 0 : true)) + (day - 1) * 86400 + hour * 3600 + minute * 60 + second - 62135596800.0 + 62135596800.0;
	var local = this1;
	return local - 62135596800.0 - (now.getTime() / 1000 | 0) | 0;
};
datetime_DateTime._new = function(time) {
	var this1 = time + 62135596800.0;
	return this1;
};
datetime_DateTime.utc = function(this1) {
	var this2 = this1 - 62135596800.0 - datetime_DateTime.getLocalOffset() + 62135596800.0;
	return this2;
};
datetime_DateTime.getYear = function(this1) {
	var cquads = (this1 / 12622780800.0 | 0) * 12622780800.0;
	var centuries = ((this1 - cquads) / 3155673600.0 | 0) * 3155673600.0;
	if(centuries > 9467020800.) {
		centuries -= 3155673600.0;
	}
	var quads = ((this1 - cquads - centuries) / 126230400.0 | 0) * 126230400.0;
	var years = (this1 - cquads - centuries - quads) / 31536000 | 0;
	return (cquads / 12622780800.0 | 0) * 400 + (centuries / 3155673600.0 | 0) * 100 + (quads / 126230400.0 | 0) * 4 + (years == 4 ? years : years + 1);
};
datetime_DateTime.yearStart = function(this1) {
	var cquads = (this1 / 12622780800.0 | 0) * 12622780800.0;
	var centuries = ((this1 - cquads) / 3155673600.0 | 0) * 3155673600.0;
	if(centuries > 9467020800.) {
		centuries -= 3155673600.0;
	}
	var quads = ((this1 - cquads - centuries) / 126230400.0 | 0) * 126230400.0;
	var years = (this1 - cquads - centuries - quads) / 31536000 | 0;
	if(years == 4) {
		--years;
	}
	return cquads + centuries + quads + years * 31536000 - 62135596800.0;
};
datetime_DateTime.monthStart = function(this1,month) {
	if(month == null) {
		month = 0;
	}
	if(month == 0) {
		var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
		month = datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1));
	}
	return datetime_DateTime.yearStart(this1) + datetime_utils_DateTimeMonthUtils.toSeconds(month,datetime_DateTime.isLeapYear(this1));
};
datetime_DateTime.getMonthStart = function(this1,month) {
	var this2 = datetime_DateTime.monthStart(this1,month) + 62135596800.0;
	return this2;
};
datetime_DateTime.isLeapYear = function(this1) {
	var year = datetime_DateTime.getYear(this1);
	if(year % 4 == 0) {
		if(year % 100 == 0) {
			return year % 400 == 0;
		} else {
			return true;
		}
	} else {
		return false;
	}
};
datetime_DateTime.getMonth = function(this1) {
	var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
	return datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1));
};
datetime_DateTime.getDay = function(this1) {
	var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
	return datetime_utils_DateTimeMonthUtils.getMonthDay(days,datetime_DateTime.isLeapYear(this1));
};
datetime_DateTime.daysInThisMonth = function(this1) {
	var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
	var month = datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1));
	return datetime_utils_DateTimeMonthUtils.days(month,month == 2 && datetime_DateTime.isLeapYear(this1));
};
datetime_DateTime.getYearDay = function(this1) {
	return ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
};
datetime_DateTime.weeksInThisYear = function(this1) {
	return datetime_DateTime.weeksInYear(datetime_DateTime.getYear(this1));
};
datetime_DateTime.getWeekDay = function(this1,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
	var month = datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1));
	var a = (14 - month) / 12 | 0;
	var y = datetime_DateTime.getYear(this1) - a;
	var m = month + 12 * a - 2;
	var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
	var weekDay = (7000 + (datetime_utils_DateTimeMonthUtils.getMonthDay(days,datetime_DateTime.isLeapYear(this1)) + y + (y / 4 | 0) - (y / 100 | 0) + (y / 400 | 0) + (31 * m / 12 | 0))) % 7;
	if(mondayBased && weekDay == 0) {
		return 7;
	} else {
		return weekDay;
	}
};
datetime_DateTime.getWeekDayNum = function(this1,weekDay,num) {
	if(num == null) {
		num = 1;
	}
	var this2 = this1 - 62135596800.0 + 62135596800.0;
	var this1 = datetime_utils_DateTimeUtils.getWeekDayNum(this2,weekDay,num) + 62135596800.0;
	return this1;
};
datetime_DateTime.getWeek = function(this1) {
	var week = (((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1 - datetime_DateTime.getWeekDay(this1,true) + 10) / 7 | 0;
	var year = datetime_DateTime.getYear(this1);
	if(week < 1) {
		return datetime_DateTime.weeksInYear(year - 1);
	} else if(week > 52 && week > datetime_DateTime.weeksInYear(year)) {
		return 1;
	} else {
		return week;
	}
};
datetime_DateTime.getHour = function(this1) {
	return (this1 - Math.floor(this1 / 86400) * 86400) / 3600 | 0;
};
datetime_DateTime.getHour12 = function(this1) {
	var hour = (this1 - Math.floor(this1 / 86400) * 86400) / 3600 | 0;
	if(hour == 0) {
		return 12;
	} else if(hour > 12) {
		return hour - 12;
	} else {
		return hour;
	}
};
datetime_DateTime.getMinute = function(this1) {
	return (this1 - Math.floor(this1 / 3600) * 3600) / 60 | 0;
};
datetime_DateTime.getSecond = function(this1) {
	return this1 - Math.floor(this1 / 60) * 60 | 0;
};
datetime_DateTime.add = function(this1,period) {
	var time;
	switch(period._hx_index) {
	case 0:
		var n = period.n;
		var this2 = this1 - 62135596800.0 + 62135596800.0;
		time = datetime_utils_DateTimeUtils.addYear(this2,n);
		break;
	case 1:
		var n = period.n;
		var this2 = this1 - 62135596800.0 + 62135596800.0;
		time = datetime_utils_DateTimeUtils.addMonth(this2,n);
		break;
	case 2:
		var n = period.n;
		time = this1 - 62135596800.0 + n * 86400;
		break;
	case 3:
		var n = period.n;
		time = this1 - 62135596800.0 + n * 3600;
		break;
	case 4:
		var n = period.n;
		time = this1 - 62135596800.0 + n * 60;
		break;
	case 5:
		var n = period.n;
		time = this1 - 62135596800.0 + n;
		break;
	case 6:
		var n = period.n;
		time = this1 - 62135596800.0 + n * 7 * 86400;
		break;
	}
	var this1 = time + 62135596800.0;
	return this1;
};
datetime_DateTime.sub = function(this1,period) {
	var time;
	switch(period._hx_index) {
	case 0:
		var n = period.n;
		var this2 = this1 - 62135596800.0 + 62135596800.0;
		time = datetime_utils_DateTimeUtils.addYear(this2,-n);
		break;
	case 1:
		var n = period.n;
		var this2 = this1 - 62135596800.0 + 62135596800.0;
		time = datetime_utils_DateTimeUtils.addMonth(this2,-n);
		break;
	case 2:
		var n = period.n;
		time = this1 - 62135596800.0 - n * 86400;
		break;
	case 3:
		var n = period.n;
		time = this1 - 62135596800.0 - n * 3600;
		break;
	case 4:
		var n = period.n;
		time = this1 - 62135596800.0 - n * 60;
		break;
	case 5:
		var n = period.n;
		time = this1 - 62135596800.0 - n;
		break;
	case 6:
		var n = period.n;
		time = this1 - 62135596800.0 - n * 7 * 86400;
		break;
	}
	var this1 = time + 62135596800.0;
	return this1;
};
datetime_DateTime.snap = function(this1,period) {
	var time;
	switch(period._hx_index) {
	case 0:
		var d = period.direction;
		var this2 = this1 - 62135596800.0 + 62135596800.0;
		time = datetime_utils_DateTimeSnapUtils.snapYear(this2,d);
		break;
	case 1:
		var d = period.direction;
		var this2 = this1 - 62135596800.0 + 62135596800.0;
		time = datetime_utils_DateTimeSnapUtils.snapMonth(this2,d);
		break;
	case 2:
		var d = period.direction;
		var this2 = this1 - 62135596800.0 + 62135596800.0;
		time = datetime_utils_DateTimeSnapUtils.snapDay(this2,d);
		break;
	case 3:
		var d = period.direction;
		var this2 = this1 - 62135596800.0 + 62135596800.0;
		time = datetime_utils_DateTimeSnapUtils.snapHour(this2,d);
		break;
	case 4:
		var d = period.direction;
		var this2 = this1 - 62135596800.0 + 62135596800.0;
		time = datetime_utils_DateTimeSnapUtils.snapMinute(this2,d);
		break;
	case 5:
		var d = period.direction;
		time = d == 1 ? this1 - 62135596800.0 + 1 : this1 - 62135596800.0;
		break;
	case 6:
		var d = period.direction;
		var day = period.day;
		var this2 = this1 - 62135596800.0 + 62135596800.0;
		time = datetime_utils_DateTimeSnapUtils.snapWeek(this2,d,day);
		break;
	}
	var this1 = time + 62135596800.0;
	return this1;
};
datetime_DateTime.toString = function(this1) {
	var Y = datetime_DateTime.getYear(this1);
	var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
	var M = datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1));
	var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
	var D = datetime_utils_DateTimeMonthUtils.getMonthDay(days,datetime_DateTime.isLeapYear(this1));
	var h = (this1 - Math.floor(this1 / 86400) * 86400) / 3600 | 0;
	var m = (this1 - Math.floor(this1 / 3600) * 3600) / 60 | 0;
	var s = this1 - Math.floor(this1 / 60) * 60 | 0;
	return "" + Y + "-" + (M < 10 ? "0" + M : "" + M) + "-" + (D < 10 ? "0" + D : "" + D) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (m < 10 ? "0" + m : "" + m) + ":" + (s < 10 ? "0" + s : "" + s);
};
datetime_DateTime.format = function(this1,format) {
	var this2 = this1 - 62135596800.0 + 62135596800.0;
	return datetime_utils_DateTimeUtils.strftime(this2,format);
};
datetime_DateTime.getTime = function(this1) {
	return this1 - 62135596800.0;
};
datetime_DateTime.getDate = function(this1) {
	return new Date((this1 - 62135596800.0) * 1000);
};
datetime_DateTime.gt = function(this1,dt) {
	return this1 - 62135596800.0 > dt - 62135596800.0;
};
datetime_DateTime.gte = function(this1,dt) {
	return this1 - 62135596800.0 >= dt - 62135596800.0;
};
datetime_DateTime.lt = function(this1,dt) {
	return this1 - 62135596800.0 < dt - 62135596800.0;
};
datetime_DateTime.lte = function(this1,dt) {
	return this1 - 62135596800.0 <= dt - 62135596800.0;
};
datetime_DateTime.eq = function(this1,dt) {
	return this1 - 62135596800.0 == dt - 62135596800.0;
};
datetime_DateTime.neq = function(this1,dt) {
	return this1 - 62135596800.0 != dt - 62135596800.0;
};
datetime_DateTime.mathPlus1 = function(this1,period) {
	return datetime_DateTime.add(this1,period);
};
datetime_DateTime.mathPlus2 = function(this1,period) {
	return datetime_DateTime.add(this1,period);
};
datetime_DateTime.mathPlus3 = function(this1,period) {
	this1 = datetime_DateTime.add(this1,period) - 62135596800.0 + 62135596800.0;
	var this2 = this1 + 62135596800.0;
	return this2;
};
datetime_DateTime.mathMinus1 = function(this1,period) {
	return datetime_DateTime.sub(this1,period);
};
datetime_DateTime.mathMinus2 = function(this1,period) {
	this1 = datetime_DateTime.sub(this1,period) - 62135596800.0 + 62135596800.0;
	var this2 = this1 + 62135596800.0;
	return this2;
};
datetime_DateTime.dtiCreate = function(this1,begin) {
	var this2 = this1 - 62135596800.0 + 62135596800.0;
	return datetime_DateTimeInterval.create(begin,this2);
};
datetime_DateTime.dtiMinus = function(this1,dti) {
	var this2 = this1 - 62135596800.0 + 62135596800.0;
	return datetime_DateTimeInterval.subFrom(dti,this2);
};
datetime_DateTime.dtiPlus1 = function(this1,dti) {
	var this2 = this1 - 62135596800.0 + 62135596800.0;
	return datetime_DateTimeInterval.addTo(dti,this2);
};
datetime_DateTime.dtiPlus2 = function(this1,dti) {
	var this2 = this1 - 62135596800.0 + 62135596800.0;
	return datetime_DateTimeInterval.addTo(dti,this2);
};
datetime_DateTime.dtiMinus2 = function(this1,dti) {
	var this2 = this1 - 62135596800.0 + 62135596800.0;
	this1 = datetime_DateTimeInterval.subFrom(dti,this2) - 62135596800.0 + 62135596800.0;
	var this2 = this1 + 62135596800.0;
	return this2;
};
datetime_DateTime.dtiPlus3 = function(this1,dti) {
	var this2 = this1 - 62135596800.0 + 62135596800.0;
	this1 = datetime_DateTimeInterval.addTo(dti,this2) - 62135596800.0 + 62135596800.0;
	var this2 = this1 + 62135596800.0;
	return this2;
};
var datetime_DateTimeInterval = {};
datetime_DateTimeInterval.create = function(begin,end) {
	var dtic = new datetime_cores_DateTimeIntervalCore();
	dtic.begin = end - 62135596800.0 < begin - 62135596800.0 ? end : begin;
	dtic.end = end - 62135596800.0 < begin - 62135596800.0 ? begin : end;
	dtic.negative = end - 62135596800.0 < begin - 62135596800.0;
	return dtic;
};
datetime_DateTimeInterval._new = function(dtic) {
	var this1 = dtic;
	return this1;
};
datetime_DateTimeInterval.invert = function(this1) {
	this1.negative = !this1.negative;
	return this1;
};
datetime_DateTimeInterval.addTo = function(this1,dt) {
	var this2 = dt - 62135596800.0 + (this1.negative ? -1 : 1) * (this1.end - 62135596800.0 - (this1.begin - 62135596800.0)) + 62135596800.0;
	return this2;
};
datetime_DateTimeInterval.subFrom = function(this1,dt) {
	var this2 = dt - 62135596800.0 - (this1.negative ? -1 : 1) * (this1.end - 62135596800.0 - (this1.begin - 62135596800.0)) + 62135596800.0;
	return this2;
};
datetime_DateTimeInterval.toString = function(this1) {
	var years = this1.getYears();
	var months = this1.getMonths();
	var days = this1.getDays();
	var hours = this1.getHours();
	var minutes = this1.getMinutes();
	var seconds = this1.getSeconds();
	var parts = [];
	if(years != 0) {
		parts.push("" + years + "y");
	}
	if(months != 0) {
		parts.push("" + months + "m");
	}
	if(days != 0) {
		parts.push("" + days + "d");
	}
	if(hours != 0) {
		parts.push("" + hours + "hrs");
	}
	if(minutes != 0) {
		parts.push("" + minutes + "min");
	}
	if(seconds != 0) {
		parts.push("" + seconds + "sec");
	}
	return (this1.negative ? "-" : "") + "(" + (parts.length == 0 ? "0sec" : parts.join(", ")) + ")";
};
datetime_DateTimeInterval.sign = function(this1) {
	if(this1.negative) {
		return -1;
	} else {
		return 1;
	}
};
datetime_DateTimeInterval.format = function(this1,format) {
	return datetime_utils_DateTimeIntervalUtils.strftime(this1,format);
};
datetime_DateTimeInterval.formatPartial = function(this1,format) {
	return datetime_utils_DateTimeIntervalUtils.formatPartial(this1,format);
};
datetime_DateTimeInterval.eq = function(this1,dtic) {
	if(this1.negative == dtic.negative) {
		return this1.getTotalSeconds() == dtic.getTotalSeconds();
	} else {
		return false;
	}
};
datetime_DateTimeInterval.gt = function(this1,dtic) {
	if(this1.negative != dtic.negative) {
		return dtic.negative;
	}
	var delta = this1.getTotalSeconds() - dtic.getTotalSeconds();
	if(this1.negative) {
		return delta < 0;
	} else {
		return delta > 0;
	}
};
datetime_DateTimeInterval.gte = function(this1,dtic) {
	if(!(this1.negative == dtic.negative && this1.getTotalSeconds() == dtic.getTotalSeconds())) {
		if(this1.negative != dtic.negative) {
			return dtic.negative;
		} else {
			var delta = this1.getTotalSeconds() - dtic.getTotalSeconds();
			if(this1.negative) {
				return delta < 0;
			} else {
				return delta > 0;
			}
		}
	} else {
		return true;
	}
};
datetime_DateTimeInterval.lt = function(this1,dtic) {
	var tmp;
	if(!(this1.negative == dtic.negative && this1.getTotalSeconds() == dtic.getTotalSeconds())) {
		if(this1.negative != dtic.negative) {
			tmp = dtic.negative;
		} else {
			var delta = this1.getTotalSeconds() - dtic.getTotalSeconds();
			tmp = this1.negative ? delta < 0 : delta > 0;
		}
	} else {
		tmp = true;
	}
	return !tmp;
};
datetime_DateTimeInterval.lte = function(this1,dtic) {
	var tmp;
	if(this1.negative != dtic.negative) {
		tmp = dtic.negative;
	} else {
		var delta = this1.getTotalSeconds() - dtic.getTotalSeconds();
		tmp = this1.negative ? delta < 0 : delta > 0;
	}
	return !tmp;
};
datetime_DateTimeInterval.neq = function(this1,dtic) {
	return !(this1.negative == dtic.negative && this1.getTotalSeconds() == dtic.getTotalSeconds());
};
var datetime_cores_DateTimeIntervalCore = function() {
	this.seconds = -1;
	this.minutes = -1;
	this.hours = -1;
	this.days = -1;
	this.months = -1;
	this.years = -1;
	this.negative = false;
};
datetime_cores_DateTimeIntervalCore.__name__ = true;
datetime_cores_DateTimeIntervalCore.prototype = {
	getYears: function() {
		if(this.years < 0) {
			this.years = datetime_DateTime.getYear(this.end) - datetime_DateTime.getYear(this.begin);
			var this1 = this.begin;
			var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
			var m1 = datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1));
			var this1 = this.end;
			var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
			var m2 = datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1));
			if(m2 < m1) {
				this.years--;
			} else if(m1 == m2) {
				var this1 = this.begin;
				var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
				var d1 = datetime_utils_DateTimeMonthUtils.getMonthDay(days,datetime_DateTime.isLeapYear(this1));
				var this1 = this.end;
				var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
				var d2 = datetime_utils_DateTimeMonthUtils.getMonthDay(days,datetime_DateTime.isLeapYear(this1));
				if(d2 < d1) {
					this.years--;
				} else if(d1 == d2) {
					var this1 = this.begin;
					var h1 = (this1 - Math.floor(this1 / 86400) * 86400) / 3600 | 0;
					var this1 = this.end;
					var h2 = (this1 - Math.floor(this1 / 86400) * 86400) / 3600 | 0;
					if(h2 < h1) {
						this.years--;
					} else if(h2 == h1) {
						var this1 = this.begin;
						var m1 = (this1 - Math.floor(this1 / 3600) * 3600) / 60 | 0;
						var this1 = this.end;
						var m2 = (this1 - Math.floor(this1 / 3600) * 3600) / 60 | 0;
						if(m2 < m1) {
							this.years--;
						} else {
							var tmp;
							if(m2 == m1) {
								var this1 = this.end;
								var this2 = this.begin;
								tmp = (this1 - Math.floor(this1 / 60) * 60 | 0) < (this2 - Math.floor(this2 / 60) * 60 | 0);
							} else {
								tmp = false;
							}
							if(tmp) {
								this.years--;
							}
						}
					}
				}
			}
		}
		return this.years;
	}
	,getMonths: function() {
		if(this.months < 0) {
			var this1 = this.begin;
			var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
			var monthBegin = datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1));
			var this1 = this.end;
			var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
			var monthEnd = datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1));
			this.months = monthBegin <= monthEnd ? monthEnd - monthBegin : 12 - monthBegin + monthEnd;
			var this1 = this.begin;
			var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
			var d1 = datetime_utils_DateTimeMonthUtils.getMonthDay(days,datetime_DateTime.isLeapYear(this1));
			var this1 = this.end;
			var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
			var d2 = datetime_utils_DateTimeMonthUtils.getMonthDay(days,datetime_DateTime.isLeapYear(this1));
			if(d2 < d1) {
				this.months--;
			} else if(d1 == d2) {
				var this1 = this.begin;
				var h1 = (this1 - Math.floor(this1 / 86400) * 86400) / 3600 | 0;
				var this1 = this.end;
				var h2 = (this1 - Math.floor(this1 / 86400) * 86400) / 3600 | 0;
				if(h2 < h1) {
					this.months--;
				} else if(h2 == h1) {
					var this1 = this.begin;
					var m1 = (this1 - Math.floor(this1 / 3600) * 3600) / 60 | 0;
					var this1 = this.end;
					var m2 = (this1 - Math.floor(this1 / 3600) * 3600) / 60 | 0;
					if(m2 < m1) {
						this.months--;
					} else {
						var tmp;
						if(m2 == m1) {
							var this1 = this.end;
							var this2 = this.begin;
							tmp = (this1 - Math.floor(this1 / 60) * 60 | 0) < (this2 - Math.floor(this2 / 60) * 60 | 0);
						} else {
							tmp = false;
						}
						if(tmp) {
							this.months--;
						}
					}
				}
			}
		}
		return this.months;
	}
	,getTotalMonths: function() {
		return this.getYears() * 12 + this.getMonths();
	}
	,getDays: function() {
		if(this.days < 0) {
			var this1 = this.begin;
			var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
			var dayBegin = datetime_utils_DateTimeMonthUtils.getMonthDay(days,datetime_DateTime.isLeapYear(this1));
			var this1 = this.end;
			var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
			var dayEnd = datetime_utils_DateTimeMonthUtils.getMonthDay(days,datetime_DateTime.isLeapYear(this1));
			var tmp;
			if(dayBegin <= dayEnd) {
				tmp = dayEnd - dayBegin;
			} else {
				var this1 = this.begin;
				var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
				tmp = datetime_utils_DateTimeMonthUtils.days(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1)),datetime_DateTime.isLeapYear(this.begin)) - dayBegin + dayEnd;
			}
			this.days = tmp;
			var this1 = this.begin;
			var h1 = (this1 - Math.floor(this1 / 86400) * 86400) / 3600 | 0;
			var this1 = this.end;
			var h2 = (this1 - Math.floor(this1 / 86400) * 86400) / 3600 | 0;
			if(h2 < h1) {
				this.days--;
			} else if(h2 == h1) {
				var this1 = this.begin;
				var m1 = (this1 - Math.floor(this1 / 3600) * 3600) / 60 | 0;
				var this1 = this.end;
				var m2 = (this1 - Math.floor(this1 / 3600) * 3600) / 60 | 0;
				if(m2 < m1) {
					this.days--;
				} else {
					var tmp;
					if(m2 == m1) {
						var this1 = this.end;
						var this2 = this.begin;
						tmp = (this1 - Math.floor(this1 / 60) * 60 | 0) < (this2 - Math.floor(this2 / 60) * 60 | 0);
					} else {
						tmp = false;
					}
					if(tmp) {
						this.days--;
					}
				}
			}
		}
		return this.days;
	}
	,getTotalDays: function() {
		return (this.end - 62135596800.0 - (this.begin - 62135596800.0)) / 86400 | 0;
	}
	,getHours: function() {
		if(this.hours < 0) {
			var this1 = this.begin;
			var hourBegin = (this1 - Math.floor(this1 / 86400) * 86400) / 3600 | 0;
			var this1 = this.end;
			var hourEnd = (this1 - Math.floor(this1 / 86400) * 86400) / 3600 | 0;
			this.hours = hourBegin <= hourEnd ? hourEnd - hourBegin : 24 - hourBegin + hourEnd;
			var this1 = this.begin;
			var m1 = (this1 - Math.floor(this1 / 3600) * 3600) / 60 | 0;
			var this1 = this.end;
			var m2 = (this1 - Math.floor(this1 / 3600) * 3600) / 60 | 0;
			if(m2 < m1) {
				this.hours--;
			} else {
				var tmp;
				if(m2 == m1) {
					var this1 = this.end;
					var this2 = this.begin;
					tmp = (this1 - Math.floor(this1 / 60) * 60 | 0) < (this2 - Math.floor(this2 / 60) * 60 | 0);
				} else {
					tmp = false;
				}
				if(tmp) {
					this.hours--;
				}
			}
		}
		return this.hours;
	}
	,getTotalHours: function() {
		return (this.end - 62135596800.0 - (this.begin - 62135596800.0)) / 3600 | 0;
	}
	,getMinutes: function() {
		if(this.minutes < 0) {
			var this1 = this.begin;
			var minuteBegin = (this1 - Math.floor(this1 / 3600) * 3600) / 60 | 0;
			var this1 = this.end;
			var minuteEnd = (this1 - Math.floor(this1 / 3600) * 3600) / 60 | 0;
			this.minutes = minuteBegin <= minuteEnd ? minuteEnd - minuteBegin : 60 - minuteBegin + minuteEnd;
			var this1 = this.end;
			var this2 = this.begin;
			if((this1 - Math.floor(this1 / 60) * 60 | 0) < (this2 - Math.floor(this2 / 60) * 60 | 0)) {
				this.minutes--;
			}
		}
		return this.minutes;
	}
	,getTotalMinutes: function() {
		return (this.end - 62135596800.0 - (this.begin - 62135596800.0)) / 60 | 0;
	}
	,getSeconds: function() {
		if(this.seconds < 0) {
			var this1 = this.begin;
			var secondBegin = this1 - Math.floor(this1 / 60) * 60 | 0;
			var this1 = this.end;
			var secondEnd = this1 - Math.floor(this1 / 60) * 60 | 0;
			this.seconds = secondBegin <= secondEnd ? secondEnd - secondBegin : 60 - secondBegin + secondEnd;
		}
		return this.seconds;
	}
	,getTotalSeconds: function() {
		return this.end - 62135596800.0 - (this.begin - 62135596800.0);
	}
	,getTotalWeeks: function() {
		return (this.end - 62135596800.0 - (this.begin - 62135596800.0)) / 604800 | 0;
	}
	,__class__: datetime_cores_DateTimeIntervalCore
};
var datetime_utils_DateTimeIntervalUtils = function() {
};
datetime_utils_DateTimeIntervalUtils.__name__ = true;
datetime_utils_DateTimeIntervalUtils.strftime = function(dti,format) {
	var prevPos = 0;
	var pos = format.indexOf("%");
	var str = "";
	while(pos >= 0) {
		str += format.substring(prevPos,pos);
		++pos;
		switch(format.charCodeAt(pos)) {
		case 37:
			str += "%";
			break;
		case 68:
			str += StringTools.lpad(dti.getDays() + "","0",2);
			break;
		case 72:
			str += StringTools.lpad(dti.getHours() + "","0",2);
			break;
		case 73:
			str += StringTools.lpad(dti.getMinutes() + "","0",2);
			break;
		case 77:
			str += StringTools.lpad(dti.getMonths() + "","0",2);
			break;
		case 82:
			str += dti.negative ? "-" : "+";
			break;
		case 83:
			str += StringTools.lpad(dti.getSeconds() + "","0",2);
			break;
		case 89:
			str += StringTools.lpad(dti.getYears() + "","0",2);
			break;
		case 97:
			str += dti.getTotalDays() + "";
			break;
		case 98:
			str += dti.getTotalMonths() + "";
			break;
		case 99:
			str += dti.getTotalHours() + "";
			break;
		case 100:
			str += dti.getDays() + "";
			break;
		case 101:
			str += dti.getTotalMinutes() + "";
			break;
		case 102:
			str += dti.getTotalSeconds() + "";
			break;
		case 104:
			str += dti.getHours() + "";
			break;
		case 105:
			str += dti.getMinutes() + "";
			break;
		case 109:
			str += dti.getMonths() + "";
			break;
		case 114:
			str += dti.negative ? "-" : "";
			break;
		case 115:
			str += dti.getSeconds() + "";
			break;
		case 121:
			str += dti.getYears() + "";
			break;
		}
		prevPos = pos + 1;
		pos = format.indexOf("%",pos + 1);
	}
	str += format.substring(prevPos);
	return str;
};
datetime_utils_DateTimeIntervalUtils.formatPartial = function(dti,format) {
	var result = [];
	var pos = 0;
	var str = "";
	var _g = 0;
	var _g1 = format.length;
	while(_g < _g1) {
		var f = _g++;
		pos = format[f].indexOf("%");
		if(pos >= 0) {
			switch(format[f].charCodeAt(pos + 1)) {
			case 68:
				if(dti.getDays() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + StringTools.lpad(dti.getDays() + "","0",2) + format[f].substring(pos + 2);
				break;
			case 72:
				if(dti.getHours() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + StringTools.lpad(dti.getHours() + "","0",2) + format[f].substring(pos + 2);
				break;
			case 73:
				if(dti.getMinutes() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + StringTools.lpad(dti.getMinutes() + "","0",2) + format[f].substring(pos + 2);
				break;
			case 77:
				if(dti.getMonths() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + StringTools.lpad(dti.getMonths() + "","0",2) + format[f].substring(pos + 2);
				break;
			case 83:
				if(dti.getSeconds() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + StringTools.lpad(dti.getSeconds() + "","0",2) + format[f].substring(pos + 2);
				break;
			case 89:
				if(dti.getYears() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + StringTools.lpad(dti.getYears() + "","0",2) + format[f].substring(pos + 2);
				break;
			case 97:
				if(dti.getTotalDays() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + dti.getTotalDays() + format[f].substring(pos + 2);
				break;
			case 98:
				if(dti.getTotalMonths() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + dti.getTotalMonths() + format[f].substring(pos + 2);
				break;
			case 99:
				if(dti.getTotalHours() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + dti.getTotalHours() + format[f].substring(pos + 2);
				break;
			case 100:
				if(dti.getDays() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + dti.getDays() + format[f].substring(pos + 2);
				break;
			case 101:
				if(dti.getTotalMinutes() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + dti.getTotalMinutes() + format[f].substring(pos + 2);
				break;
			case 102:
				if(dti.getTotalSeconds() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + dti.getTotalSeconds() + format[f].substring(pos + 2);
				break;
			case 104:
				if(dti.getHours() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + dti.getHours() + format[f].substring(pos + 2);
				break;
			case 105:
				if(dti.getMinutes() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + dti.getMinutes() + format[f].substring(pos + 2);
				break;
			case 109:
				if(dti.getMonths() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + dti.getMonths() + format[f].substring(pos + 2);
				break;
			case 115:
				if(dti.getSeconds() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + dti.getSeconds() + format[f].substring(pos + 2);
				break;
			case 121:
				if(dti.getYears() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + dti.getYears() + format[f].substring(pos + 2);
				break;
			default:
				continue;
			}
			result.push(str);
		}
	}
	return result;
};
datetime_utils_DateTimeIntervalUtils.prototype = {
	__class__: datetime_utils_DateTimeIntervalUtils
};
var datetime_utils_DateTimeMonthUtils = function() {
};
datetime_utils_DateTimeMonthUtils.__name__ = true;
datetime_utils_DateTimeMonthUtils.days = function(month,isLeapYear) {
	if(isLeapYear == null) {
		isLeapYear = false;
	}
	if(month == 1) {
		return 31;
	} else if(month == 2 && isLeapYear) {
		return 29;
	} else if(month == 2) {
		return 28;
	} else if(month == 3) {
		return 31;
	} else if(month == 4) {
		return 30;
	} else if(month == 5) {
		return 31;
	} else if(month == 6) {
		return 30;
	} else if(month == 7) {
		return 31;
	} else if(month == 8) {
		return 31;
	} else if(month == 9) {
		return 30;
	} else if(month == 10) {
		return 31;
	} else if(month == 11) {
		return 30;
	} else {
		return 31;
	}
};
datetime_utils_DateTimeMonthUtils.getMonth = function(days,isLeapYear) {
	if(isLeapYear == null) {
		isLeapYear = false;
	}
	if(days < 32) {
		return 1;
	} else if(isLeapYear) {
		if(days < 61) {
			return 2;
		} else if(days < 92) {
			return 3;
		} else if(days < 122) {
			return 4;
		} else if(days < 153) {
			return 5;
		} else if(days < 183) {
			return 6;
		} else if(days < 214) {
			return 7;
		} else if(days < 245) {
			return 8;
		} else if(days < 275) {
			return 9;
		} else if(days < 306) {
			return 10;
		} else if(days < 336) {
			return 11;
		} else {
			return 12;
		}
	} else if(days < 60) {
		return 2;
	} else if(days < 91) {
		return 3;
	} else if(days < 121) {
		return 4;
	} else if(days < 152) {
		return 5;
	} else if(days < 182) {
		return 6;
	} else if(days < 213) {
		return 7;
	} else if(days < 244) {
		return 8;
	} else if(days < 274) {
		return 9;
	} else if(days < 305) {
		return 10;
	} else if(days < 335) {
		return 11;
	} else {
		return 12;
	}
};
datetime_utils_DateTimeMonthUtils.getMonthDay = function(days,isLeapYear) {
	if(isLeapYear == null) {
		isLeapYear = false;
	}
	if(days < 32) {
		return days;
	} else if(isLeapYear) {
		if(days < 61) {
			return days - 31;
		} else if(days < 92) {
			return days - 60;
		} else if(days < 122) {
			return days - 91;
		} else if(days < 153) {
			return days - 121;
		} else if(days < 183) {
			return days - 152;
		} else if(days < 214) {
			return days - 182;
		} else if(days < 245) {
			return days - 213;
		} else if(days < 275) {
			return days - 244;
		} else if(days < 306) {
			return days - 274;
		} else if(days < 336) {
			return days - 305;
		} else {
			return days - 335;
		}
	} else if(days < 60) {
		return days - 31;
	} else if(days < 91) {
		return days - 59;
	} else if(days < 121) {
		return days - 90;
	} else if(days < 152) {
		return days - 120;
	} else if(days < 182) {
		return days - 151;
	} else if(days < 213) {
		return days - 181;
	} else if(days < 244) {
		return days - 212;
	} else if(days < 274) {
		return days - 243;
	} else if(days < 305) {
		return days - 273;
	} else if(days < 335) {
		return days - 304;
	} else {
		return days - 334;
	}
};
datetime_utils_DateTimeMonthUtils.toSeconds = function(month,isLeapYear) {
	if(isLeapYear == null) {
		isLeapYear = false;
	}
	return 86400 * (month == 1 ? 0 : isLeapYear ? month == 2 ? 31 : month == 3 ? 60 : month == 4 ? 91 : month == 5 ? 121 : month == 6 ? 152 : month == 7 ? 182 : month == 8 ? 213 : month == 9 ? 244 : month == 10 ? 274 : month == 11 ? 305 : 335 : month == 2 ? 31 : month == 3 ? 59 : month == 4 ? 90 : month == 5 ? 120 : month == 6 ? 151 : month == 7 ? 181 : month == 8 ? 212 : month == 9 ? 243 : month == 10 ? 273 : month == 11 ? 304 : 334);
};
datetime_utils_DateTimeMonthUtils.prototype = {
	__class__: datetime_utils_DateTimeMonthUtils
};
var datetime_utils_DateTimeSnapUtils = function() {
};
datetime_utils_DateTimeSnapUtils.__name__ = true;
datetime_utils_DateTimeSnapUtils.snapYear = function(dt,direction) {
	switch(direction) {
	case -1:
		return datetime_DateTime.yearStart(dt);
	case 0:
		var this1 = datetime_utils_DateTimeUtils.addYear(dt,1) + 62135596800.0;
		var next = datetime_DateTime.yearStart(this1);
		var previous = datetime_DateTime.yearStart(dt);
		if(next - (dt - 62135596800.0) > dt - 62135596800.0 - previous) {
			return previous;
		} else {
			return next;
		}
		break;
	case 1:
		var this1 = datetime_utils_DateTimeUtils.addYear(dt,1) + 62135596800.0;
		var next = this1;
		return datetime_DateTime.yearStart(next);
	}
};
datetime_utils_DateTimeSnapUtils.snapMonth = function(dt,direction) {
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var month = datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt));
	var isLeap = datetime_DateTime.isLeapYear(dt);
	switch(direction) {
	case -1:
		return datetime_DateTime.yearStart(dt) + datetime_utils_DateTimeMonthUtils.toSeconds(month,isLeap);
	case 0:
		var previous = datetime_DateTime.yearStart(dt) + datetime_utils_DateTimeMonthUtils.toSeconds(month,isLeap);
		var next = datetime_DateTime.yearStart(dt) + datetime_utils_DateTimeMonthUtils.toSeconds(month,isLeap) + datetime_utils_DateTimeMonthUtils.days(month,isLeap) * 86400;
		if(next - (dt - 62135596800.0) > dt - 62135596800.0 - previous) {
			return previous;
		} else {
			return next;
		}
		break;
	case 1:
		return datetime_DateTime.yearStart(dt) + datetime_utils_DateTimeMonthUtils.toSeconds(month,isLeap) + datetime_utils_DateTimeMonthUtils.days(month,isLeap) * 86400;
	}
};
datetime_utils_DateTimeSnapUtils.snapDay = function(dt,direction) {
	var days = (dt - 62135596800.0) / 86400;
	switch(direction) {
	case -1:
		return Math.floor(days) * 86400;
	case 0:
		return Math.round(days) * 86400;
	case 1:
		return Math.ceil(days) * 86400;
	}
};
datetime_utils_DateTimeSnapUtils.snapHour = function(dt,direction) {
	var hours = (dt - 62135596800.0) / 3600;
	switch(direction) {
	case -1:
		return Math.floor(hours) * 3600;
	case 0:
		return Math.round(hours) * 3600;
	case 1:
		return Math.ceil(hours) * 3600;
	}
};
datetime_utils_DateTimeSnapUtils.snapMinute = function(dt,direction) {
	var minutes = (dt - 62135596800.0) / 60;
	switch(direction) {
	case -1:
		return Math.floor(minutes) * 60;
	case 0:
		return Math.round(minutes) * 60;
	case 1:
		return Math.ceil(minutes) * 60;
	}
};
datetime_utils_DateTimeSnapUtils.snapWeek = function(dt,direction,required) {
	var current = datetime_DateTime.getWeekDay(dt);
	var days = Math.floor((dt - 62135596800.0) / 86400);
	switch(direction) {
	case -1:
		var diff = current >= required ? current - required : current + 7 - required;
		return (days - diff) * 86400;
	case 0:
		var diff = current >= required ? current - required : current + 7 - required;
		var previous = (days - diff) * 86400;
		var diff = required > current ? required - current : required + 7 - current;
		var next = (days + diff) * 86400;
		if(next - (dt - 62135596800.0) > dt - 62135596800.0 - previous) {
			return previous;
		} else {
			return next;
		}
		break;
	case 1:
		var diff = required > current ? required - current : required + 7 - current;
		return (days + diff) * 86400;
	}
};
datetime_utils_DateTimeSnapUtils.prototype = {
	__class__: datetime_utils_DateTimeSnapUtils
};
var datetime_utils_DateTimeUtils = function() {
};
datetime_utils_DateTimeUtils.__name__ = true;
datetime_utils_DateTimeUtils.fromString = function(str) {
	if(str.length == 10 || str.charCodeAt(10) == 32) {
		return datetime_utils_DateTimeUtils.parse(str);
	} else if(str.charCodeAt(10) == 84) {
		return datetime_utils_DateTimeUtils.fromIsoString(str);
	} else {
		throw haxe_Exception.thrown("`" + str + "` - incorrect date/time format. Should be either `YYYY-MM-DD hh:mm:ss` or `YYYY-MM-DD` or `YYYY-MM-DDThh:mm:ss[.SSS]Z`");
	}
};
datetime_utils_DateTimeUtils.parse = function(str) {
	var ylength = str.indexOf("-");
	if(ylength < 1 || str.length - ylength != 6 && str.length - ylength != 15) {
		throw haxe_Exception.thrown("`" + str + "` - incorrect date/time format. Should be either `YYYY-MM-DD hh:mm:ss` or `YYYY-MM-DD`");
	}
	if(str.length - ylength == 6) {
		str += " 00:00:00";
	}
	var year = Std.parseInt(HxOverrides.substr(str,0,ylength));
	var month = Std.parseInt(HxOverrides.substr(str,ylength + 1,2));
	var day = Std.parseInt(HxOverrides.substr(str,ylength + 4,2));
	var hour = Std.parseInt(HxOverrides.substr(str,ylength + 7,2));
	var minute = Std.parseInt(HxOverrides.substr(str,ylength + 10,2));
	var second = Std.parseInt(HxOverrides.substr(str,ylength + 13,2));
	if(year == null || month == null || day == null || hour == null || minute == null || second == null) {
		throw haxe_Exception.thrown("`" + str + "` - incorrect date/time format. Should be either `YYYY-MM-DD hh:mm:ss` or `YYYY-MM-DD`");
	}
	var year1 = year;
	var month1 = month;
	var day1 = day;
	var hour1 = hour;
	var minute1 = minute;
	var second1 = second;
	if(second1 == null) {
		second1 = 0;
	}
	if(minute1 == null) {
		minute1 = 0;
	}
	if(hour1 == null) {
		hour1 = 0;
	}
	if(day1 == null) {
		day1 = 1;
	}
	if(month1 == null) {
		month1 = 1;
	}
	if(year1 == null) {
		year1 = 1970;
	}
	var this1 = datetime_utils_DateTimeUtils.yearToStamp(year1) + datetime_utils_DateTimeMonthUtils.toSeconds(month1,year1 % 4 == 0 && (year1 % 100 == 0 ? year1 % 400 == 0 : true)) + (day1 - 1) * 86400 + hour1 * 3600 + minute1 * 60 + second1 - 62135596800.0 + 62135596800.0;
	return this1;
};
datetime_utils_DateTimeUtils.fromIsoString = function(str) {
	var dotPos = str.indexOf(".");
	var zPos = str.indexOf("Z");
	if(str.charCodeAt(str.length - 1) != 90) {
		throw haxe_Exception.thrown("`" + str + "` - incorrect date/time format. Not an ISO 8601 UTC/Zulu string: Z not found.");
	}
	if(str.length > 20) {
		if(str.charCodeAt(19) != 46) {
			throw haxe_Exception.thrown("`" + str + "` - incorrect date/time format. Not an ISO 8601 string: Millisecond specification erroneous.");
		}
		if(str.charCodeAt(23) != 90) {
			throw haxe_Exception.thrown("`" + str + "` - incorrect date/time format. Not an ISO 8601 string: Timezone specification erroneous.");
		}
	}
	return datetime_utils_DateTimeUtils.parse(HxOverrides.substr(str,0,10) + " " + HxOverrides.substr(str,11,8));
};
datetime_utils_DateTimeUtils.clamp = function(value,min,max) {
	if(value < min) {
		return min;
	} else if(value > max) {
		return max;
	} else {
		return value;
	}
};
datetime_utils_DateTimeUtils.yearToStamp = function(year) {
	--year;
	var cquads = year / 400 | 0;
	var quads = (year - cquads * 400) / 4 | 0;
	var excessDays = quads / 25 | 0;
	return cquads * 12622780800.0 + quads * 126230400.0 - excessDays * 86400 + (year - cquads * 400 - quads * 4) * 31536000;
};
datetime_utils_DateTimeUtils.addYear = function(dt,amount) {
	var year = datetime_DateTime.getYear(dt) + amount;
	var time = datetime_DateTime.yearStart(dt);
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var time1 = dt - 62135596800.0 - (time + datetime_utils_DateTimeMonthUtils.toSeconds(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)),datetime_DateTime.isLeapYear(dt)));
	var tmp = datetime_utils_DateTimeUtils.yearToStamp(year);
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	return tmp + datetime_utils_DateTimeMonthUtils.toSeconds(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)),year % 4 == 0 && (year % 100 == 0 ? year % 400 == 0 : true)) + time1 - 62135596800.0;
};
datetime_utils_DateTimeUtils.addMonth = function(dt,amount) {
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var month = datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) + amount;
	if(month > 12) {
		var years = month / 12 | 0;
		var this1 = datetime_utils_DateTimeUtils.addYear(dt,years) + 62135596800.0;
		dt = this1;
		month -= years * 12;
	} else if(month <= 0) {
		var years = (month / 12 | 0) - 1;
		var this1 = datetime_utils_DateTimeUtils.addYear(dt,years) + 62135596800.0;
		dt = this1;
		month -= years * 12;
	}
	var isLeap = datetime_DateTime.isLeapYear(dt);
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var value = datetime_utils_DateTimeMonthUtils.getMonthDay(days,datetime_DateTime.isLeapYear(dt));
	var max = datetime_utils_DateTimeMonthUtils.days(month,isLeap);
	var day = value < 1 ? 1 : value > max ? max : value;
	return datetime_DateTime.yearStart(dt) + datetime_utils_DateTimeMonthUtils.toSeconds(month,isLeap) + (day - 1) * 86400 + ((dt - Math.floor(dt / 86400) * 86400) / 3600 | 0) * 3600 + ((dt - Math.floor(dt / 3600) * 3600) / 60 | 0) * 60 + (dt - Math.floor(dt / 60) * 60 | 0);
};
datetime_utils_DateTimeUtils.getWeekDayNum = function(dt,weekDay,num) {
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var month = datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt));
	if(num > 0) {
		var this1 = datetime_DateTime.monthStart(dt,month) - 1 + 62135596800.0;
		var start = this1;
		var first = datetime_DateTime.snap(start,datetime_DTSnap.Week(1,weekDay));
		return datetime_DateTime.add(first,datetime_DTPeriod.Week(num - 1)) - 62135596800.0;
	} else if(num < 0) {
		var this1 = datetime_DateTime.monthStart(dt,month + 1) - 1 + 62135596800.0;
		var start = this1;
		var first = datetime_DateTime.snap(start,datetime_DTSnap.Week(-1,weekDay));
		return datetime_DateTime.add(first,datetime_DTPeriod.Week(num + 1)) - 62135596800.0;
	} else {
		return dt - 62135596800.0;
	}
};
datetime_utils_DateTimeUtils.strftime = function(dt,format) {
	var prevPos = 0;
	var pos = format.indexOf("%");
	var str = "";
	while(pos >= 0) {
		str += format.substring(prevPos,pos);
		++pos;
		switch(format.charCodeAt(pos)) {
		case 37:
			str += "%";
			break;
		case 67:
			str += StringTools.lpad((datetime_DateTime.getYear(dt) / 100 | 0) + "","0",2);
			break;
		case 68:
			var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
			var str1 = StringTools.lpad(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) + "/","0",3);
			var days1 = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
			str += str1 + StringTools.lpad(datetime_utils_DateTimeMonthUtils.getMonthDay(days1,datetime_DateTime.isLeapYear(dt)) + "/","0",3) + StringTools.lpad(HxOverrides.substr(datetime_DateTime.getYear(dt) + "",-2,null),"0",2);
			break;
		case 70:
			var str2 = datetime_DateTime.getYear(dt) + "-";
			var days2 = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
			var str3 = str2 + StringTools.lpad(datetime_utils_DateTimeMonthUtils.getMonth(days2,datetime_DateTime.isLeapYear(dt)) + "-","0",3);
			var days3 = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
			str += str3 + StringTools.lpad(datetime_utils_DateTimeMonthUtils.getMonthDay(days3,datetime_DateTime.isLeapYear(dt)) + "","0",2);
			break;
		case 72:
			str += StringTools.lpad(((dt - Math.floor(dt / 86400) * 86400) / 3600 | 0) + "","0",2);
			break;
		case 73:
			str += StringTools.lpad(datetime_DateTime.getHour12(dt) + "","0",2);
			break;
		case 77:
			str += StringTools.lpad(((dt - Math.floor(dt / 3600) * 3600) / 60 | 0) + "","0",2);
			break;
		case 80:
			str += ((dt - Math.floor(dt / 86400) * 86400) / 3600 | 0) < 12 ? "am" : "pm";
			break;
		case 82:
			str += StringTools.lpad(((dt - Math.floor(dt / 86400) * 86400) / 3600 | 0) + ":","0",3) + StringTools.lpad(((dt - Math.floor(dt / 3600) * 3600) / 60 | 0) + "","0",2);
			break;
		case 83:
			str += StringTools.lpad((dt - Math.floor(dt / 60) * 60 | 0) + "","0",2);
			break;
		case 84:
			str += StringTools.lpad(((dt - Math.floor(dt / 86400) * 86400) / 3600 | 0) + ":","0",3) + StringTools.lpad(((dt - Math.floor(dt / 3600) * 3600) / 60 | 0) + ":","0",3) + StringTools.lpad((dt - Math.floor(dt / 60) * 60 | 0) + "","0",2);
			break;
		case 86:
			str += StringTools.lpad(datetime_DateTime.getWeek(dt) + "","0",2);
			break;
		case 89:
			str += datetime_DateTime.getYear(dt) + "";
			break;
		case 100:
			var days4 = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
			str += StringTools.lpad(datetime_utils_DateTimeMonthUtils.getMonthDay(days4,datetime_DateTime.isLeapYear(dt)) + "","0",2);
			break;
		case 101:
			var days5 = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
			str += StringTools.lpad(datetime_utils_DateTimeMonthUtils.getMonthDay(days5,datetime_DateTime.isLeapYear(dt)) + ""," ",2);
			break;
		case 106:
			var day = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
			str += StringTools.lpad("" + day,"0",3);
			break;
		case 107:
			str += StringTools.lpad(((dt - Math.floor(dt / 86400) * 86400) / 3600 | 0) + ""," ",2);
			break;
		case 108:
			str += StringTools.lpad(datetime_DateTime.getHour12(dt) + ""," ",2);
			break;
		case 109:
			var days6 = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
			str += StringTools.lpad(datetime_utils_DateTimeMonthUtils.getMonth(days6,datetime_DateTime.isLeapYear(dt)) + "","0",2);
			break;
		case 112:
			str += ((dt - Math.floor(dt / 86400) * 86400) / 3600 | 0) < 12 ? "AM" : "PM";
			break;
		case 114:
			str += StringTools.lpad(datetime_DateTime.getHour12(dt) + ":","0",3) + StringTools.lpad(((dt - Math.floor(dt / 3600) * 3600) / 60 | 0) + ":","0",3) + StringTools.lpad((dt - Math.floor(dt / 60) * 60 | 0) + "","0",2);
			break;
		case 115:
			str += dt - 62135596800.0 + "";
			break;
		case 117:
			str += datetime_DateTime.getWeekDay(dt,true) + "";
			break;
		case 119:
			str += datetime_DateTime.getWeekDay(dt) + "";
			break;
		case 121:
			str += StringTools.lpad(HxOverrides.substr(datetime_DateTime.getYear(dt) + "",-2,null),"0",2);
			break;
		}
		prevPos = pos + 1;
		pos = format.indexOf("%",pos + 1);
	}
	str += format.substring(prevPos);
	return str;
};
datetime_utils_DateTimeUtils.prototype = {
	__class__: datetime_utils_DateTimeUtils
};
var datetimelang_arabic_DayName = {};
datetimelang_arabic_DayName._new = function(d) {
	var this1 = d;
	return this1;
};
datetimelang_arabic_DayName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "الاتنين":
		return 1;
	case "الاربع":
		return 3;
	case "التلات":
		return 2;
	case "الجمعة":
		return 5;
	case "الحد":
		return 0;
	case "الخميس":
		return 4;
	case "السبت":
		return 6;
	case "يوم الأحد":
		return 0;
	case "يوم الأربعاء":
		return 3;
	case "يوم الإثنين":
		return 1;
	case "يوم الثلاثاء":
		return 2;
	case "يوم الجمعة":
		return 5;
	case "يوم الخميس":
		return 4;
	case "يوم السبت":
		return 6;
	default:
		return null;
	}
};
datetimelang_arabic_DayName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "يوم الأحد";
		break;
	case 1:
		str = "يوم الإثنين";
		break;
	case 2:
		str = "يوم الثلاثاء";
		break;
	case 3:
		str = "يوم الأربعاء";
		break;
	case 4:
		str = "يوم الخميس";
		break;
	case 5:
		str = "يوم الجمعة";
		break;
	case 6:
		str = "يوم السبت";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_arabic_DayName.toLowerCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "يوم الأحد";
		break;
	case 1:
		str = "يوم الإثنين";
		break;
	case 2:
		str = "يوم الثلاثاء";
		break;
	case 3:
		str = "يوم الأربعاء";
		break;
	case 4:
		str = "يوم الخميس";
		break;
	case 5:
		str = "يوم الجمعة";
		break;
	case 6:
		str = "يوم السبت";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
};
datetimelang_arabic_DayName.alltoUpperCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "يوم الأحد";
		break;
	case 1:
		str = "يوم الإثنين";
		break;
	case 2:
		str = "يوم الثلاثاء";
		break;
	case 3:
		str = "يوم الأربعاء";
		break;
	case 4:
		str = "يوم الخميس";
		break;
	case 5:
		str = "يوم الجمعة";
		break;
	case 6:
		str = "يوم السبت";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
};
datetimelang_arabic_DayName.toString = function(this1) {
	var d = this1;
	switch(d) {
	case 0:
		return "يوم الأحد";
	case 1:
		return "يوم الإثنين";
	case 2:
		return "يوم الثلاثاء";
	case 3:
		return "يوم الأربعاء";
	case 4:
		return "يوم الخميس";
	case 5:
		return "يوم الجمعة";
	case 6:
		return "يوم السبت";
	}
};
datetimelang_arabic_DayName.toStringEygpt = function(this1) {
	var d = this1;
	switch(d) {
	case 0:
		return "الأحد";
	case 1:
		return "الإثنين";
	case 2:
		return "الثلاثاء";
	case 3:
		return "الأربعاء";
	case 4:
		return "الخميس";
	case 5:
		return "الجمعة";
	case 6:
		return "السبت";
	}
};
datetimelang_arabic_DayName.stringFromDateTime = function(dt,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var s;
	var d1 = d;
	switch(d1) {
	case 0:
		s = "يوم الأحد";
		break;
	case 1:
		s = "يوم الإثنين";
		break;
	case 2:
		s = "يوم الثلاثاء";
		break;
	case 3:
		s = "يوم الأربعاء";
		break;
	case 4:
		s = "يوم الخميس";
		break;
	case 5:
		s = "يوم الجمعة";
		break;
	case 6:
		s = "يوم السبت";
		break;
	}
	return s;
};
var datetimelang_arabic_MonthName = {};
datetimelang_arabic_MonthName._new = function(m) {
	var this1 = m;
	return this1;
};
datetimelang_arabic_MonthName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "أبريل":
		return 4;
	case "أغسطس":
		return 8;
	case "أكتوبر":
		return 10;
	case "ديسمبر":
		return 12;
	case "سبتمبر":
		return 9;
	case "فبراير":
		return 2;
	case "مارس":
		return 3;
	case "مايو":
		return 5;
	case "نوفمبر":
		return 11;
	case "يناير":
		return 1;
	case "يوليه":
		return 7;
	case "يونيو":
		return 6;
	default:
		return null;
	}
};
datetimelang_arabic_MonthName.toString = function(this1) {
	var m = this1;
	switch(m) {
	case 1:
		return "يناير";
	case 2:
		return "فبراير";
	case 3:
		return "مارس";
	case 4:
		return "أبريل";
	case 5:
		return "مايو";
	case 6:
		return "يونيو";
	case 7:
		return "يوليه";
	case 8:
		return "أغسطس";
	case 9:
		return "سبتمبر";
	case 10:
		return "أكتوبر";
	case 11:
		return "نوفمبر";
	case 12:
		return "ديسمبر";
	}
};
datetimelang_arabic_MonthName.stringFromDateTime = function(dt) {
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var s;
	var m1 = m;
	switch(m1) {
	case 1:
		s = "يناير";
		break;
	case 2:
		s = "فبراير";
		break;
	case 3:
		s = "مارس";
		break;
	case 4:
		s = "أبريل";
		break;
	case 5:
		s = "مايو";
		break;
	case 6:
		s = "يونيو";
		break;
	case 7:
		s = "يوليه";
		break;
	case 8:
		s = "أغسطس";
		break;
	case 9:
		s = "سبتمبر";
		break;
	case 10:
		s = "أكتوبر";
		break;
	case 11:
		s = "نوفمبر";
		break;
	case 12:
		s = "ديسمبر";
		break;
	}
	return s;
};
var datetimelang_english_DayName = {};
datetimelang_english_DayName._new = function(d) {
	var this1 = d;
	return this1;
};
datetimelang_english_DayName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "friday":
		return 5;
	case "monday":
		return 1;
	case "saturday":
		return 6;
	case "sunday":
		return 0;
	case "thursday":
		return 4;
	case "tuesday":
		return 2;
	case "wednesday":
		return 3;
	default:
		return null;
	}
};
datetimelang_english_DayName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Sunday";
		break;
	case 1:
		str = "Monday";
		break;
	case 2:
		str = "Tuesday";
		break;
	case 3:
		str = "Wednesday";
		break;
	case 4:
		str = "Thursday";
		break;
	case 5:
		str = "Friday";
		break;
	case 6:
		str = "Saturday";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_english_DayName.toLowerCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Sunday";
		break;
	case 1:
		str = "Monday";
		break;
	case 2:
		str = "Tuesday";
		break;
	case 3:
		str = "Wednesday";
		break;
	case 4:
		str = "Thursday";
		break;
	case 5:
		str = "Friday";
		break;
	case 6:
		str = "Saturday";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
};
datetimelang_english_DayName.alltoUpperCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Sunday";
		break;
	case 1:
		str = "Monday";
		break;
	case 2:
		str = "Tuesday";
		break;
	case 3:
		str = "Wednesday";
		break;
	case 4:
		str = "Thursday";
		break;
	case 5:
		str = "Friday";
		break;
	case 6:
		str = "Saturday";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
};
datetimelang_english_DayName.toString = function(this1) {
	var d = this1;
	switch(d) {
	case 0:
		return "Sunday";
	case 1:
		return "Monday";
	case 2:
		return "Tuesday";
	case 3:
		return "Wednesday";
	case 4:
		return "Thursday";
	case 5:
		return "Friday";
	case 6:
		return "Saturday";
	}
};
datetimelang_english_DayName.stringAllUpFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Sunday";
		break;
	case 1:
		str = "Monday";
		break;
	case 2:
		str = "Tuesday";
		break;
	case 3:
		str = "Wednesday";
		break;
	case 4:
		str = "Thursday";
		break;
	case 5:
		str = "Friday";
		break;
	case 6:
		str = "Saturday";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
	return s;
};
datetimelang_english_DayName.stringLowerFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Sunday";
		break;
	case 1:
		str = "Monday";
		break;
	case 2:
		str = "Tuesday";
		break;
	case 3:
		str = "Wednesday";
		break;
	case 4:
		str = "Thursday";
		break;
	case 5:
		str = "Friday";
		break;
	case 6:
		str = "Saturday";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
	return s;
};
datetimelang_english_DayName.stringShortFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Sunday";
		break;
	case 1:
		str = "Monday";
		break;
	case 2:
		str = "Tuesday";
		break;
	case 3:
		str = "Wednesday";
		break;
	case 4:
		str = "Thursday";
		break;
	case 5:
		str = "Friday";
		break;
	case 6:
		str = "Saturday";
		break;
	}
	var s = len1 == -1 ? str : HxOverrides.substr(str,0,len1);
	return s;
};
datetimelang_english_DayName.stringFromDateTime = function(dt,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var s;
	var d1 = d;
	switch(d1) {
	case 0:
		s = "Sunday";
		break;
	case 1:
		s = "Monday";
		break;
	case 2:
		s = "Tuesday";
		break;
	case 3:
		s = "Wednesday";
		break;
	case 4:
		s = "Thursday";
		break;
	case 5:
		s = "Friday";
		break;
	case 6:
		s = "Saturday";
		break;
	}
	return s;
};
var datetimelang_english_MonthName = {};
datetimelang_english_MonthName._new = function(m) {
	var this1 = m;
	return this1;
};
datetimelang_english_MonthName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "april":
		return 4;
	case "august":
		return 8;
	case "december":
		return 12;
	case "february":
		return 2;
	case "january":
		return 1;
	case "july":
		return 7;
	case "june":
		return 6;
	case "march":
		return 3;
	case "may":
		return 5;
	case "november":
		return 11;
	case "october":
		return 10;
	case "september":
		return 9;
	default:
		return null;
	}
};
datetimelang_english_MonthName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "January";
		break;
	case 2:
		str = "February";
		break;
	case 3:
		str = "March";
		break;
	case 4:
		str = "April";
		break;
	case 5:
		str = "May";
		break;
	case 6:
		str = "June";
		break;
	case 7:
		str = "July";
		break;
	case 8:
		str = "August";
		break;
	case 9:
		str = "September";
		break;
	case 10:
		str = "October";
		break;
	case 11:
		str = "November";
		break;
	case 12:
		str = "December";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_english_MonthName.toLowerCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "January";
		break;
	case 2:
		str = "February";
		break;
	case 3:
		str = "March";
		break;
	case 4:
		str = "April";
		break;
	case 5:
		str = "May";
		break;
	case 6:
		str = "June";
		break;
	case 7:
		str = "July";
		break;
	case 8:
		str = "August";
		break;
	case 9:
		str = "September";
		break;
	case 10:
		str = "October";
		break;
	case 11:
		str = "November";
		break;
	case 12:
		str = "December";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
};
datetimelang_english_MonthName.alltoUpperCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "January";
		break;
	case 2:
		str = "February";
		break;
	case 3:
		str = "March";
		break;
	case 4:
		str = "April";
		break;
	case 5:
		str = "May";
		break;
	case 6:
		str = "June";
		break;
	case 7:
		str = "July";
		break;
	case 8:
		str = "August";
		break;
	case 9:
		str = "September";
		break;
	case 10:
		str = "October";
		break;
	case 11:
		str = "November";
		break;
	case 12:
		str = "December";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
};
datetimelang_english_MonthName.toString = function(this1) {
	var m = this1;
	switch(m) {
	case 1:
		return "January";
	case 2:
		return "February";
	case 3:
		return "March";
	case 4:
		return "April";
	case 5:
		return "May";
	case 6:
		return "June";
	case 7:
		return "July";
	case 8:
		return "August";
	case 9:
		return "September";
	case 10:
		return "October";
	case 11:
		return "November";
	case 12:
		return "December";
	}
};
datetimelang_english_MonthName.stringAllUpFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "January";
		break;
	case 2:
		str = "February";
		break;
	case 3:
		str = "March";
		break;
	case 4:
		str = "April";
		break;
	case 5:
		str = "May";
		break;
	case 6:
		str = "June";
		break;
	case 7:
		str = "July";
		break;
	case 8:
		str = "August";
		break;
	case 9:
		str = "September";
		break;
	case 10:
		str = "October";
		break;
	case 11:
		str = "November";
		break;
	case 12:
		str = "December";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
	return s;
};
datetimelang_english_MonthName.stringLowerFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "January";
		break;
	case 2:
		str = "February";
		break;
	case 3:
		str = "March";
		break;
	case 4:
		str = "April";
		break;
	case 5:
		str = "May";
		break;
	case 6:
		str = "June";
		break;
	case 7:
		str = "July";
		break;
	case 8:
		str = "August";
		break;
	case 9:
		str = "September";
		break;
	case 10:
		str = "October";
		break;
	case 11:
		str = "November";
		break;
	case 12:
		str = "December";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
	return s;
};
datetimelang_english_MonthName.stringShortFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "January";
		break;
	case 2:
		str = "February";
		break;
	case 3:
		str = "March";
		break;
	case 4:
		str = "April";
		break;
	case 5:
		str = "May";
		break;
	case 6:
		str = "June";
		break;
	case 7:
		str = "July";
		break;
	case 8:
		str = "August";
		break;
	case 9:
		str = "September";
		break;
	case 10:
		str = "October";
		break;
	case 11:
		str = "November";
		break;
	case 12:
		str = "December";
		break;
	}
	var s = len1 == -1 ? str : HxOverrides.substr(str,0,len1);
	return s;
};
datetimelang_english_MonthName.stringFromDateTime = function(dt) {
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var s;
	var m1 = m;
	switch(m1) {
	case 1:
		s = "January";
		break;
	case 2:
		s = "February";
		break;
	case 3:
		s = "March";
		break;
	case 4:
		s = "April";
		break;
	case 5:
		s = "May";
		break;
	case 6:
		s = "June";
		break;
	case 7:
		s = "July";
		break;
	case 8:
		s = "August";
		break;
	case 9:
		s = "September";
		break;
	case 10:
		s = "October";
		break;
	case 11:
		s = "November";
		break;
	case 12:
		s = "December";
		break;
	}
	return s;
};
var datetimelang_french_DayName = {};
datetimelang_french_DayName._new = function(d) {
	var this1 = d;
	return this1;
};
datetimelang_french_DayName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "dimanche":
		return 0;
	case "jeudi":
		return 4;
	case "lundi":
		return 1;
	case "mardi":
		return 2;
	case "mercredi":
		return 3;
	case "samedi":
		return 6;
	case "vendredi":
		return 5;
	default:
		return null;
	}
};
datetimelang_french_DayName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Dimanche";
		break;
	case 1:
		str = "Lundi";
		break;
	case 2:
		str = "Mardi";
		break;
	case 3:
		str = "Mercredi";
		break;
	case 4:
		str = "Jeudi";
		break;
	case 5:
		str = "Vendredi";
		break;
	case 6:
		str = "Samedi";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_french_DayName.toLowerCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Dimanche";
		break;
	case 1:
		str = "Lundi";
		break;
	case 2:
		str = "Mardi";
		break;
	case 3:
		str = "Mercredi";
		break;
	case 4:
		str = "Jeudi";
		break;
	case 5:
		str = "Vendredi";
		break;
	case 6:
		str = "Samedi";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
};
datetimelang_french_DayName.alltoUpperCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Dimanche";
		break;
	case 1:
		str = "Lundi";
		break;
	case 2:
		str = "Mardi";
		break;
	case 3:
		str = "Mercredi";
		break;
	case 4:
		str = "Jeudi";
		break;
	case 5:
		str = "Vendredi";
		break;
	case 6:
		str = "Samedi";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
};
datetimelang_french_DayName.toString = function(this1) {
	var d = this1;
	switch(d) {
	case 0:
		return "Dimanche";
	case 1:
		return "Lundi";
	case 2:
		return "Mardi";
	case 3:
		return "Mercredi";
	case 4:
		return "Jeudi";
	case 5:
		return "Vendredi";
	case 6:
		return "Samedi";
	}
};
datetimelang_french_DayName.stringAllUpFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Dimanche";
		break;
	case 1:
		str = "Lundi";
		break;
	case 2:
		str = "Mardi";
		break;
	case 3:
		str = "Mercredi";
		break;
	case 4:
		str = "Jeudi";
		break;
	case 5:
		str = "Vendredi";
		break;
	case 6:
		str = "Samedi";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
	return s;
};
datetimelang_french_DayName.stringLowerFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Dimanche";
		break;
	case 1:
		str = "Lundi";
		break;
	case 2:
		str = "Mardi";
		break;
	case 3:
		str = "Mercredi";
		break;
	case 4:
		str = "Jeudi";
		break;
	case 5:
		str = "Vendredi";
		break;
	case 6:
		str = "Samedi";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
	return s;
};
datetimelang_french_DayName.stringShortFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Dimanche";
		break;
	case 1:
		str = "Lundi";
		break;
	case 2:
		str = "Mardi";
		break;
	case 3:
		str = "Mercredi";
		break;
	case 4:
		str = "Jeudi";
		break;
	case 5:
		str = "Vendredi";
		break;
	case 6:
		str = "Samedi";
		break;
	}
	var s = len1 == -1 ? str : HxOverrides.substr(str,0,len1);
	return s;
};
datetimelang_french_DayName.stringFromDateTime = function(dt,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var s;
	var d1 = d;
	switch(d1) {
	case 0:
		s = "Dimanche";
		break;
	case 1:
		s = "Lundi";
		break;
	case 2:
		s = "Mardi";
		break;
	case 3:
		s = "Mercredi";
		break;
	case 4:
		s = "Jeudi";
		break;
	case 5:
		s = "Vendredi";
		break;
	case 6:
		s = "Samedi";
		break;
	}
	return s;
};
var datetimelang_french_MonthName = {};
datetimelang_french_MonthName._new = function(m) {
	var this1 = m;
	return this1;
};
datetimelang_french_MonthName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "aout":
		return 8;
	case "août":
		return 8;
	case "arvil":
		return 4;
	case "decembre":
		return 12;
	case "décembre":
		return 12;
	case "fevrier":
		return 2;
	case "février":
		return 2;
	case "janvier":
		return 1;
	case "juillet":
		return 7;
	case "juin":
		return 6;
	case "mai":
		return 5;
	case "mars":
		return 3;
	case "novembre":
		return 11;
	case "octobre":
		return 10;
	case "septembre":
		return 9;
	default:
		return null;
	}
};
datetimelang_french_MonthName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Janvier";
		break;
	case 2:
		str = "Février";
		break;
	case 3:
		str = "Mars";
		break;
	case 4:
		str = "Avril";
		break;
	case 5:
		str = "Mai";
		break;
	case 6:
		str = "Juin";
		break;
	case 7:
		str = "Juillet";
		break;
	case 8:
		str = "Août";
		break;
	case 9:
		str = "Septembre";
		break;
	case 10:
		str = "Octobre";
		break;
	case 11:
		str = "Novembre";
		break;
	case 12:
		str = "Décembre";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_french_MonthName.toLowerCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Janvier";
		break;
	case 2:
		str = "Février";
		break;
	case 3:
		str = "Mars";
		break;
	case 4:
		str = "Avril";
		break;
	case 5:
		str = "Mai";
		break;
	case 6:
		str = "Juin";
		break;
	case 7:
		str = "Juillet";
		break;
	case 8:
		str = "Août";
		break;
	case 9:
		str = "Septembre";
		break;
	case 10:
		str = "Octobre";
		break;
	case 11:
		str = "Novembre";
		break;
	case 12:
		str = "Décembre";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
};
datetimelang_french_MonthName.alltoUpperCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Janvier";
		break;
	case 2:
		str = "Février";
		break;
	case 3:
		str = "Mars";
		break;
	case 4:
		str = "Avril";
		break;
	case 5:
		str = "Mai";
		break;
	case 6:
		str = "Juin";
		break;
	case 7:
		str = "Juillet";
		break;
	case 8:
		str = "Août";
		break;
	case 9:
		str = "Septembre";
		break;
	case 10:
		str = "Octobre";
		break;
	case 11:
		str = "Novembre";
		break;
	case 12:
		str = "Décembre";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
};
datetimelang_french_MonthName.toString = function(this1) {
	var m = this1;
	switch(m) {
	case 1:
		return "Janvier";
	case 2:
		return "Février";
	case 3:
		return "Mars";
	case 4:
		return "Avril";
	case 5:
		return "Mai";
	case 6:
		return "Juin";
	case 7:
		return "Juillet";
	case 8:
		return "Août";
	case 9:
		return "Septembre";
	case 10:
		return "Octobre";
	case 11:
		return "Novembre";
	case 12:
		return "Décembre";
	}
};
datetimelang_french_MonthName.stringAllUpFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Janvier";
		break;
	case 2:
		str = "Février";
		break;
	case 3:
		str = "Mars";
		break;
	case 4:
		str = "Avril";
		break;
	case 5:
		str = "Mai";
		break;
	case 6:
		str = "Juin";
		break;
	case 7:
		str = "Juillet";
		break;
	case 8:
		str = "Août";
		break;
	case 9:
		str = "Septembre";
		break;
	case 10:
		str = "Octobre";
		break;
	case 11:
		str = "Novembre";
		break;
	case 12:
		str = "Décembre";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
	return s;
};
datetimelang_french_MonthName.stringLowerFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Janvier";
		break;
	case 2:
		str = "Février";
		break;
	case 3:
		str = "Mars";
		break;
	case 4:
		str = "Avril";
		break;
	case 5:
		str = "Mai";
		break;
	case 6:
		str = "Juin";
		break;
	case 7:
		str = "Juillet";
		break;
	case 8:
		str = "Août";
		break;
	case 9:
		str = "Septembre";
		break;
	case 10:
		str = "Octobre";
		break;
	case 11:
		str = "Novembre";
		break;
	case 12:
		str = "Décembre";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
	return s;
};
datetimelang_french_MonthName.stringShortFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Janvier";
		break;
	case 2:
		str = "Février";
		break;
	case 3:
		str = "Mars";
		break;
	case 4:
		str = "Avril";
		break;
	case 5:
		str = "Mai";
		break;
	case 6:
		str = "Juin";
		break;
	case 7:
		str = "Juillet";
		break;
	case 8:
		str = "Août";
		break;
	case 9:
		str = "Septembre";
		break;
	case 10:
		str = "Octobre";
		break;
	case 11:
		str = "Novembre";
		break;
	case 12:
		str = "Décembre";
		break;
	}
	var s = len1 == -1 ? str : HxOverrides.substr(str,0,len1);
	return s;
};
datetimelang_french_MonthName.stringFromDateTime = function(dt) {
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var s;
	var m1 = m;
	switch(m1) {
	case 1:
		s = "Janvier";
		break;
	case 2:
		s = "Février";
		break;
	case 3:
		s = "Mars";
		break;
	case 4:
		s = "Avril";
		break;
	case 5:
		s = "Mai";
		break;
	case 6:
		s = "Juin";
		break;
	case 7:
		s = "Juillet";
		break;
	case 8:
		s = "Août";
		break;
	case 9:
		s = "Septembre";
		break;
	case 10:
		s = "Octobre";
		break;
	case 11:
		s = "Novembre";
		break;
	case 12:
		s = "Décembre";
		break;
	}
	return s;
};
var datetimelang_german_DayName = {};
datetimelang_german_DayName._new = function(d) {
	var this1 = d;
	return this1;
};
datetimelang_german_DayName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "denschdich":
		return 2;
	case "dienstag":
		return 2;
	case "donnerstag":
		return 4;
	case "dunschtig":
		return 4;
	case "fraidich":
		return 5;
	case "freitag":
		return 5;
	case "friitig":
		return 5;
	case "mendich":
		return 1;
	case "mittich":
		return 3;
	case "mittwoch":
		return 3;
	case "mittwuch":
		return 3;
	case "montag":
		return 1;
	case "määntig":
		return 1;
	case "samschdich":
		return 6;
	case "samschtig":
		return 6;
	case "samstag":
		return 6;
	case "sonndich":
		return 0;
	case "sonntag":
		return 0;
	case "sunntig":
		return 0;
	case "ziischtig":
		return 2;
	default:
		return null;
	}
};
datetimelang_german_DayName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Sonntag";
		break;
	case 1:
		str = "Montag";
		break;
	case 2:
		str = "Dienstag";
		break;
	case 3:
		str = "Mittwoch";
		break;
	case 4:
		str = "Donnerstag";
		break;
	case 5:
		str = "Freitag";
		break;
	case 6:
		str = "Samtag";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_german_DayName.toLowerCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Sonntag";
		break;
	case 1:
		str = "Montag";
		break;
	case 2:
		str = "Dienstag";
		break;
	case 3:
		str = "Mittwoch";
		break;
	case 4:
		str = "Donnerstag";
		break;
	case 5:
		str = "Freitag";
		break;
	case 6:
		str = "Samtag";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
};
datetimelang_german_DayName.alltoUpperCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Sonntag";
		break;
	case 1:
		str = "Montag";
		break;
	case 2:
		str = "Dienstag";
		break;
	case 3:
		str = "Mittwoch";
		break;
	case 4:
		str = "Donnerstag";
		break;
	case 5:
		str = "Freitag";
		break;
	case 6:
		str = "Samtag";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
};
datetimelang_german_DayName.toString = function(this1) {
	var d = this1;
	switch(d) {
	case 0:
		return "Sonntag";
	case 1:
		return "Montag";
	case 2:
		return "Dienstag";
	case 3:
		return "Mittwoch";
	case 4:
		return "Donnerstag";
	case 5:
		return "Freitag";
	case 6:
		return "Samtag";
	}
};
datetimelang_german_DayName.toStringSwiss = function(this1) {
	var d = this1;
	switch(d) {
	case 0:
		return " Sunntig";
	case 1:
		return "Määntig";
	case 2:
		return "Ziischtig";
	case 3:
		return "Mittwuch";
	case 4:
		return "Dunschtig";
	case 5:
		return "Friitig";
	case 6:
		return "Samschtig";
	}
};
datetimelang_german_DayName.toStringSwabian = function(this1) {
	var d = this1;
	switch(d) {
	case 0:
		return "Sonndich";
	case 1:
		return "Mendich";
	case 2:
		return "Denschdich";
	case 3:
		return "Mittich";
	case 4:
		return "Donnerschtich";
	case 5:
		return "Fraidich";
	case 6:
		return "Samschdich";
	}
};
datetimelang_german_DayName.stringAllUpFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Sonntag";
		break;
	case 1:
		str = "Montag";
		break;
	case 2:
		str = "Dienstag";
		break;
	case 3:
		str = "Mittwoch";
		break;
	case 4:
		str = "Donnerstag";
		break;
	case 5:
		str = "Freitag";
		break;
	case 6:
		str = "Samtag";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
	return s;
};
datetimelang_german_DayName.stringLowerFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Sonntag";
		break;
	case 1:
		str = "Montag";
		break;
	case 2:
		str = "Dienstag";
		break;
	case 3:
		str = "Mittwoch";
		break;
	case 4:
		str = "Donnerstag";
		break;
	case 5:
		str = "Freitag";
		break;
	case 6:
		str = "Samtag";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
	return s;
};
datetimelang_german_DayName.stringShortFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Sonntag";
		break;
	case 1:
		str = "Montag";
		break;
	case 2:
		str = "Dienstag";
		break;
	case 3:
		str = "Mittwoch";
		break;
	case 4:
		str = "Donnerstag";
		break;
	case 5:
		str = "Freitag";
		break;
	case 6:
		str = "Samtag";
		break;
	}
	var s = len1 == -1 ? str : HxOverrides.substr(str,0,len1);
	return s;
};
datetimelang_german_DayName.stringFromDateTime = function(dt,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var s;
	var d1 = d;
	switch(d1) {
	case 0:
		s = "Sonntag";
		break;
	case 1:
		s = "Montag";
		break;
	case 2:
		s = "Dienstag";
		break;
	case 3:
		s = "Mittwoch";
		break;
	case 4:
		s = "Donnerstag";
		break;
	case 5:
		s = "Freitag";
		break;
	case 6:
		s = "Samtag";
		break;
	}
	return s;
};
var datetimelang_german_MonthName = {};
datetimelang_german_MonthName._new = function(m) {
	var this1 = m;
	return this1;
};
datetimelang_german_MonthName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "april":
		return 4;
	case "august":
		return 8;
	case "dezember":
		return 12;
	case "februar":
		return 2;
	case "januar":
		return 1;
	case "juli":
		return 7;
	case "juni":
		return 6;
	case "mai":
		return 5;
	case "marz":
		return 3;
	case "märz":
		return 3;
	case "november":
		return 11;
	case "ocktober":
		return 10;
	case "september":
		return 9;
	default:
		return null;
	}
};
datetimelang_german_MonthName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Januar";
		break;
	case 2:
		str = "Februar";
		break;
	case 3:
		str = "März";
		break;
	case 4:
		str = "April";
		break;
	case 5:
		str = "Mai";
		break;
	case 6:
		str = "Juni";
		break;
	case 7:
		str = "Juli";
		break;
	case 8:
		str = "August";
		break;
	case 9:
		str = "September";
		break;
	case 10:
		str = "Oktober";
		break;
	case 11:
		str = "November";
		break;
	case 12:
		str = "Dezember";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_german_MonthName.toLowerCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Januar";
		break;
	case 2:
		str = "Februar";
		break;
	case 3:
		str = "März";
		break;
	case 4:
		str = "April";
		break;
	case 5:
		str = "Mai";
		break;
	case 6:
		str = "Juni";
		break;
	case 7:
		str = "Juli";
		break;
	case 8:
		str = "August";
		break;
	case 9:
		str = "September";
		break;
	case 10:
		str = "Oktober";
		break;
	case 11:
		str = "November";
		break;
	case 12:
		str = "Dezember";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
};
datetimelang_german_MonthName.alltoUpperCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Januar";
		break;
	case 2:
		str = "Februar";
		break;
	case 3:
		str = "März";
		break;
	case 4:
		str = "April";
		break;
	case 5:
		str = "Mai";
		break;
	case 6:
		str = "Juni";
		break;
	case 7:
		str = "Juli";
		break;
	case 8:
		str = "August";
		break;
	case 9:
		str = "September";
		break;
	case 10:
		str = "Oktober";
		break;
	case 11:
		str = "November";
		break;
	case 12:
		str = "Dezember";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
};
datetimelang_german_MonthName.toString = function(this1) {
	var m = this1;
	switch(m) {
	case 1:
		return "Januar";
	case 2:
		return "Februar";
	case 3:
		return "März";
	case 4:
		return "April";
	case 5:
		return "Mai";
	case 6:
		return "Juni";
	case 7:
		return "Juli";
	case 8:
		return "August";
	case 9:
		return "September";
	case 10:
		return "Oktober";
	case 11:
		return "November";
	case 12:
		return "Dezember";
	}
};
datetimelang_german_MonthName.stringAllUpFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Januar";
		break;
	case 2:
		str = "Februar";
		break;
	case 3:
		str = "März";
		break;
	case 4:
		str = "April";
		break;
	case 5:
		str = "Mai";
		break;
	case 6:
		str = "Juni";
		break;
	case 7:
		str = "Juli";
		break;
	case 8:
		str = "August";
		break;
	case 9:
		str = "September";
		break;
	case 10:
		str = "Oktober";
		break;
	case 11:
		str = "November";
		break;
	case 12:
		str = "Dezember";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
	return s;
};
datetimelang_german_MonthName.stringLowerFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Januar";
		break;
	case 2:
		str = "Februar";
		break;
	case 3:
		str = "März";
		break;
	case 4:
		str = "April";
		break;
	case 5:
		str = "Mai";
		break;
	case 6:
		str = "Juni";
		break;
	case 7:
		str = "Juli";
		break;
	case 8:
		str = "August";
		break;
	case 9:
		str = "September";
		break;
	case 10:
		str = "Oktober";
		break;
	case 11:
		str = "November";
		break;
	case 12:
		str = "Dezember";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
	return s;
};
datetimelang_german_MonthName.stringShortFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Januar";
		break;
	case 2:
		str = "Februar";
		break;
	case 3:
		str = "März";
		break;
	case 4:
		str = "April";
		break;
	case 5:
		str = "Mai";
		break;
	case 6:
		str = "Juni";
		break;
	case 7:
		str = "Juli";
		break;
	case 8:
		str = "August";
		break;
	case 9:
		str = "September";
		break;
	case 10:
		str = "Oktober";
		break;
	case 11:
		str = "November";
		break;
	case 12:
		str = "Dezember";
		break;
	}
	var s = len1 == -1 ? str : HxOverrides.substr(str,0,len1);
	return s;
};
datetimelang_german_MonthName.stringFromDateTime = function(dt) {
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var s;
	var m1 = m;
	switch(m1) {
	case 1:
		s = "Januar";
		break;
	case 2:
		s = "Februar";
		break;
	case 3:
		s = "März";
		break;
	case 4:
		s = "April";
		break;
	case 5:
		s = "Mai";
		break;
	case 6:
		s = "Juni";
		break;
	case 7:
		s = "Juli";
		break;
	case 8:
		s = "August";
		break;
	case 9:
		s = "September";
		break;
	case 10:
		s = "Oktober";
		break;
	case 11:
		s = "November";
		break;
	case 12:
		s = "Dezember";
		break;
	}
	return s;
};
var datetimelang_greek_DayName = {};
datetimelang_greek_DayName._new = function(d) {
	var this1 = d;
	return this1;
};
datetimelang_greek_DayName.fromString = function(s) {
	switch(s) {
	case "Δευτέρα":
		return 1;
	case "Κυριακή":
		return 0;
	case "Πέμπτη":
		return 4;
	case "Παρασκευή":
		return 5;
	case "Σάββατο":
		return 6;
	case "Τετάρτη":
		return 3;
	case "Τρίτη":
		return 2;
	default:
		return null;
	}
};
datetimelang_greek_DayName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Κυριακή";
		break;
	case 1:
		str = "Δευτέρα";
		break;
	case 2:
		str = "Τρίτη";
		break;
	case 3:
		str = "Τετάρτη";
		break;
	case 4:
		str = "Πέμπτη";
		break;
	case 5:
		str = "Παρασκευή";
		break;
	case 6:
		str = "Σάββατο";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_greek_DayName.toString = function(this1) {
	var d = this1;
	switch(d) {
	case 0:
		return "Κυριακή";
	case 1:
		return "Δευτέρα";
	case 2:
		return "Τρίτη";
	case 3:
		return "Τετάρτη";
	case 4:
		return "Πέμπτη";
	case 5:
		return "Παρασκευή";
	case 6:
		return "Σάββατο";
	}
};
datetimelang_greek_DayName.stringShortFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Κυριακή";
		break;
	case 1:
		str = "Δευτέρα";
		break;
	case 2:
		str = "Τρίτη";
		break;
	case 3:
		str = "Τετάρτη";
		break;
	case 4:
		str = "Πέμπτη";
		break;
	case 5:
		str = "Παρασκευή";
		break;
	case 6:
		str = "Σάββατο";
		break;
	}
	var s = len1 == -1 ? str : HxOverrides.substr(str,0,len1);
	return s;
};
datetimelang_greek_DayName.stringFromDateTime = function(dt,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var s;
	var d1 = d;
	switch(d1) {
	case 0:
		s = "Κυριακή";
		break;
	case 1:
		s = "Δευτέρα";
		break;
	case 2:
		s = "Τρίτη";
		break;
	case 3:
		s = "Τετάρτη";
		break;
	case 4:
		s = "Πέμπτη";
		break;
	case 5:
		s = "Παρασκευή";
		break;
	case 6:
		s = "Σάββατο";
		break;
	}
	return s;
};
var datetimelang_greek_MonthName = {};
datetimelang_greek_MonthName._new = function(m) {
	var this1 = m;
	return this1;
};
datetimelang_greek_MonthName.fromString = function(s) {
	switch(s) {
	case "Aρίλιος":
		return 4;
	case "Iανουάριος":
		return 1;
	case "Iούλιος":
		return 7;
	case "Iούνιος":
		return 6;
	case "Oκτώβριος":
		return 10;
	case "Δεκέμβριος":
		return 12;
	case "Μάιος":
		return 5;
	case "Μάρτιος":
		return 3;
	case "Νοέμβριος":
		return 11;
	case "Σεπτέμβριος":
		return 9;
	case "Φεβρουάριος":
		return 2;
	case "ύγουστος":
		return 8;
	default:
		return null;
	}
};
datetimelang_greek_MonthName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Iανουάριος";
		break;
	case 2:
		str = "Φεβρουάριος";
		break;
	case 3:
		str = "Μάρτιος";
		break;
	case 4:
		str = "Aρίλιος";
		break;
	case 5:
		str = "Μάιος";
		break;
	case 6:
		str = "Iούνιος";
		break;
	case 7:
		str = "Iούλιος";
		break;
	case 8:
		str = "ύγουστος";
		break;
	case 9:
		str = "Σεπτέμβριος";
		break;
	case 10:
		str = "Oκτώβριος";
		break;
	case 11:
		str = "Νοέμβριος";
		break;
	case 12:
		str = "Δεκέμβριος";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_greek_MonthName.toString = function(this1) {
	var m = this1;
	switch(m) {
	case 1:
		return "Iανουάριος";
	case 2:
		return "Φεβρουάριος";
	case 3:
		return "Μάρτιος";
	case 4:
		return "Aρίλιος";
	case 5:
		return "Μάιος";
	case 6:
		return "Iούνιος";
	case 7:
		return "Iούλιος";
	case 8:
		return "ύγουστος";
	case 9:
		return "Σεπτέμβριος";
	case 10:
		return "Oκτώβριος";
	case 11:
		return "Νοέμβριος";
	case 12:
		return "Δεκέμβριος";
	}
};
datetimelang_greek_MonthName.stringShortFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Iανουάριος";
		break;
	case 2:
		str = "Φεβρουάριος";
		break;
	case 3:
		str = "Μάρτιος";
		break;
	case 4:
		str = "Aρίλιος";
		break;
	case 5:
		str = "Μάιος";
		break;
	case 6:
		str = "Iούνιος";
		break;
	case 7:
		str = "Iούλιος";
		break;
	case 8:
		str = "ύγουστος";
		break;
	case 9:
		str = "Σεπτέμβριος";
		break;
	case 10:
		str = "Oκτώβριος";
		break;
	case 11:
		str = "Νοέμβριος";
		break;
	case 12:
		str = "Δεκέμβριος";
		break;
	}
	var s = len1 == -1 ? str : HxOverrides.substr(str,0,len1);
	return s;
};
datetimelang_greek_MonthName.stringFromDateTime = function(dt) {
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var s;
	var m1 = m;
	switch(m1) {
	case 1:
		s = "Iανουάριος";
		break;
	case 2:
		s = "Φεβρουάριος";
		break;
	case 3:
		s = "Μάρτιος";
		break;
	case 4:
		s = "Aρίλιος";
		break;
	case 5:
		s = "Μάιος";
		break;
	case 6:
		s = "Iούνιος";
		break;
	case 7:
		s = "Iούλιος";
		break;
	case 8:
		s = "ύγουστος";
		break;
	case 9:
		s = "Σεπτέμβριος";
		break;
	case 10:
		s = "Oκτώβριος";
		break;
	case 11:
		s = "Νοέμβριος";
		break;
	case 12:
		s = "Δεκέμβριος";
		break;
	}
	return s;
};
var datetimelang_hebrew_DayName = {};
datetimelang_hebrew_DayName._new = function(d) {
	var this1 = d;
	return this1;
};
datetimelang_hebrew_DayName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "יום חמישי":
		return 4;
	case "יום ראשון":
		return 0;
	case "יום רביעי":
		return 3;
	case "יום שבת":
		return 6;
	case "יום שישי":
		return 5;
	case "יום שלישי":
		return 2;
	case "יום שני":
		return 1;
	default:
		return null;
	}
};
datetimelang_hebrew_DayName.toString = function(this1) {
	var d = this1;
	switch(d) {
	case 0:
		return "יום ראשון";
	case 1:
		return "יום שני";
	case 2:
		return "יום שלישי";
	case 3:
		return "יום רביעי";
	case 4:
		return "יום חמישי";
	case 5:
		return "יום שישי";
	case 6:
		return "יום שבת";
	}
};
datetimelang_hebrew_DayName.stringFromDateTime = function(dt,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var s;
	var d1 = d;
	switch(d1) {
	case 0:
		s = "יום ראשון";
		break;
	case 1:
		s = "יום שני";
		break;
	case 2:
		s = "יום שלישי";
		break;
	case 3:
		s = "יום רביעי";
		break;
	case 4:
		s = "יום חמישי";
		break;
	case 5:
		s = "יום שישי";
		break;
	case 6:
		s = "יום שבת";
		break;
	}
	return s;
};
var datetimelang_hebrew_MonthName = {};
datetimelang_hebrew_MonthName._new = function(m) {
	var this1 = m;
	return this1;
};
datetimelang_hebrew_MonthName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "אוגוסט":
		return 8;
	case "אוקטובר":
		return 10;
	case "אפריל":
		return 4;
	case "דצמבר":
		return 12;
	case "יולי":
		return 7;
	case "יוני":
		return 6;
	case "ינואר":
		return 1;
	case "מאי":
		return 5;
	case "מרץ":
		return 3;
	case "נובמבר":
		return 11;
	case "ספטמבר":
		return 9;
	case "פברואר":
		return 2;
	default:
		return null;
	}
};
datetimelang_hebrew_MonthName.toString = function(this1) {
	var m = this1;
	switch(m) {
	case 1:
		return "ינואר";
	case 2:
		return "פברואר";
	case 3:
		return "מרץ";
	case 4:
		return "אפריל";
	case 5:
		return "מאי";
	case 6:
		return "יוני";
	case 7:
		return "יולי";
	case 8:
		return "אוגוסט";
	case 9:
		return "ספטמבר";
	case 10:
		return "אוקטובר";
	case 11:
		return "נובמבר";
	case 12:
		return "דצמבר";
	}
};
datetimelang_hebrew_MonthName.stringFromDateTime = function(dt) {
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var s;
	var m1 = m;
	switch(m1) {
	case 1:
		s = "ינואר";
		break;
	case 2:
		s = "פברואר";
		break;
	case 3:
		s = "מרץ";
		break;
	case 4:
		s = "אפריל";
		break;
	case 5:
		s = "מאי";
		break;
	case 6:
		s = "יוני";
		break;
	case 7:
		s = "יולי";
		break;
	case 8:
		s = "אוגוסט";
		break;
	case 9:
		s = "ספטמבר";
		break;
	case 10:
		s = "אוקטובר";
		break;
	case 11:
		s = "נובמבר";
		break;
	case 12:
		s = "דצמבר";
		break;
	}
	return s;
};
var datetimelang_hindi_DayName = {};
datetimelang_hindi_DayName._new = function(d) {
	var this1 = d;
	return this1;
};
datetimelang_hindi_DayName.fromString = function(s) {
	switch(s) {
	case "गुरुवार":
		return 4;
	case "बुधवार":
		return 3;
	case "मंगलवार":
		return 2;
	case "रविवार":
		return 0;
	case "शनिवार":
		return 6;
	case "शुक्रवार":
		return 5;
	case "सोमवार":
		return 1;
	default:
		return null;
	}
};
datetimelang_hindi_DayName.toString = function(this1) {
	var d = this1;
	switch(d) {
	case 0:
		return "रविवार";
	case 1:
		return "सोमवार";
	case 2:
		return "मंगलवार";
	case 3:
		return "बुधवार";
	case 4:
		return "गुरुवार";
	case 5:
		return "शुक्रवार";
	case 6:
		return "शनिवार";
	}
};
datetimelang_hindi_DayName.stringFromDateTime = function(dt,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var s;
	var d1 = d;
	switch(d1) {
	case 0:
		s = "रविवार";
		break;
	case 1:
		s = "सोमवार";
		break;
	case 2:
		s = "मंगलवार";
		break;
	case 3:
		s = "बुधवार";
		break;
	case 4:
		s = "गुरुवार";
		break;
	case 5:
		s = "शुक्रवार";
		break;
	case 6:
		s = "शनिवार";
		break;
	}
	return s;
};
var datetimelang_hindi_MonthName = {};
datetimelang_hindi_MonthName._new = function(m) {
	var this1 = m;
	return this1;
};
datetimelang_hindi_MonthName.fromString = function(s) {
	switch(s) {
	case "अक्टूबर":
		return 10;
	case "अगस्त":
		return 8;
	case "अप्रैल":
		return 4;
	case "जनवरी":
		return 1;
	case "जुलाई":
		return 7;
	case "जून":
		return 6;
	case "दिसंबर":
		return 12;
	case "नवंबर":
		return 11;
	case "फ़रवरी":
		return 2;
	case "मई":
		return 5;
	case "मार्च":
		return 3;
	case "सितंबर":
		return 9;
	default:
		return null;
	}
};
datetimelang_hindi_MonthName.toString = function(this1) {
	var m = this1;
	switch(m) {
	case 1:
		return "जनवरी";
	case 2:
		return "फ़रवरी";
	case 3:
		return "मार्च";
	case 4:
		return "अप्रैल";
	case 5:
		return "मई";
	case 6:
		return "जून";
	case 7:
		return "जुलाई";
	case 8:
		return "अगस्त";
	case 9:
		return "सितंबर";
	case 10:
		return "अक्टूबर";
	case 11:
		return "नवंबर";
	case 12:
		return "दिसंबर";
	}
};
datetimelang_hindi_MonthName.stringFromDateTime = function(dt) {
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var s;
	var m1 = m;
	switch(m1) {
	case 1:
		s = "जनवरी";
		break;
	case 2:
		s = "फ़रवरी";
		break;
	case 3:
		s = "मार्च";
		break;
	case 4:
		s = "अप्रैल";
		break;
	case 5:
		s = "मई";
		break;
	case 6:
		s = "जून";
		break;
	case 7:
		s = "जुलाई";
		break;
	case 8:
		s = "अगस्त";
		break;
	case 9:
		s = "सितंबर";
		break;
	case 10:
		s = "अक्टूबर";
		break;
	case 11:
		s = "नवंबर";
		break;
	case 12:
		s = "दिसंबर";
		break;
	}
	return s;
};
var datetimelang_italian_DayName = {};
datetimelang_italian_DayName._new = function(d) {
	var this1 = d;
	return this1;
};
datetimelang_italian_DayName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "domenica":
		return 0;
	case "giovedi":
		return 4;
	case "giovedì":
		return 4;
	case "lunedi":
		return 1;
	case "lunedì":
		return 1;
	case "martedi":
		return 2;
	case "martedì":
		return 2;
	case "mercoledi":
		return 3;
	case "mercoledì":
		return 3;
	case "sabato":
		return 6;
	case "venerdi":
		return 5;
	case "venerdì":
		return 5;
	default:
		return null;
	}
};
datetimelang_italian_DayName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "domenica";
		break;
	case 1:
		str = "lunedì";
		break;
	case 2:
		str = "martedì";
		break;
	case 3:
		str = "mercoledì";
		break;
	case 4:
		str = "giovedì";
		break;
	case 5:
		str = "venerdì";
		break;
	case 6:
		str = "sabato";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_italian_DayName.toLowerCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "domenica";
		break;
	case 1:
		str = "lunedì";
		break;
	case 2:
		str = "martedì";
		break;
	case 3:
		str = "mercoledì";
		break;
	case 4:
		str = "giovedì";
		break;
	case 5:
		str = "venerdì";
		break;
	case 6:
		str = "sabato";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
};
datetimelang_italian_DayName.alltoUpperCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "domenica";
		break;
	case 1:
		str = "lunedì";
		break;
	case 2:
		str = "martedì";
		break;
	case 3:
		str = "mercoledì";
		break;
	case 4:
		str = "giovedì";
		break;
	case 5:
		str = "venerdì";
		break;
	case 6:
		str = "sabato";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
};
datetimelang_italian_DayName.toString = function(this1) {
	var d = this1;
	switch(d) {
	case 0:
		return "domenica";
	case 1:
		return "lunedì";
	case 2:
		return "martedì";
	case 3:
		return "mercoledì";
	case 4:
		return "giovedì";
	case 5:
		return "venerdì";
	case 6:
		return "sabato";
	}
};
datetimelang_italian_DayName.stringAllUpFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "domenica";
		break;
	case 1:
		str = "lunedì";
		break;
	case 2:
		str = "martedì";
		break;
	case 3:
		str = "mercoledì";
		break;
	case 4:
		str = "giovedì";
		break;
	case 5:
		str = "venerdì";
		break;
	case 6:
		str = "sabato";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
	return s;
};
datetimelang_italian_DayName.stringLowerFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "domenica";
		break;
	case 1:
		str = "lunedì";
		break;
	case 2:
		str = "martedì";
		break;
	case 3:
		str = "mercoledì";
		break;
	case 4:
		str = "giovedì";
		break;
	case 5:
		str = "venerdì";
		break;
	case 6:
		str = "sabato";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
	return s;
};
datetimelang_italian_DayName.stringShortFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "domenica";
		break;
	case 1:
		str = "lunedì";
		break;
	case 2:
		str = "martedì";
		break;
	case 3:
		str = "mercoledì";
		break;
	case 4:
		str = "giovedì";
		break;
	case 5:
		str = "venerdì";
		break;
	case 6:
		str = "sabato";
		break;
	}
	var s = len1 == -1 ? str : HxOverrides.substr(str,0,len1);
	return s;
};
datetimelang_italian_DayName.stringFromDateTime = function(dt,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var s;
	var d1 = d;
	switch(d1) {
	case 0:
		s = "domenica";
		break;
	case 1:
		s = "lunedì";
		break;
	case 2:
		s = "martedì";
		break;
	case 3:
		s = "mercoledì";
		break;
	case 4:
		s = "giovedì";
		break;
	case 5:
		s = "venerdì";
		break;
	case 6:
		s = "sabato";
		break;
	}
	return s;
};
var datetimelang_italian_MonthName = {};
datetimelang_italian_MonthName._new = function(m) {
	var this1 = m;
	return this1;
};
datetimelang_italian_MonthName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "agosto":
		return 8;
	case "aprile":
		return 4;
	case "dicembre":
		return 12;
	case "febbraio":
		return 2;
	case "gennaio":
		return 1;
	case "giugno":
		return 6;
	case "luglio":
		return 7;
	case "maggio":
		return 5;
	case "marzo":
		return 3;
	case "novembre":
		return 11;
	case "ottobre":
		return 10;
	case "settembre":
		return 9;
	default:
		return null;
	}
};
datetimelang_italian_MonthName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Gennaio";
		break;
	case 2:
		str = "Febbraio";
		break;
	case 3:
		str = "Marzo";
		break;
	case 4:
		str = "Aprile";
		break;
	case 5:
		str = "Maggio";
		break;
	case 6:
		str = "Giugno";
		break;
	case 7:
		str = "Luglio";
		break;
	case 8:
		str = "Agosto";
		break;
	case 9:
		str = "Settembre";
		break;
	case 10:
		str = "Ottobre";
		break;
	case 11:
		str = "Novembre";
		break;
	case 12:
		str = "Dicembre";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_italian_MonthName.toLowerCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Gennaio";
		break;
	case 2:
		str = "Febbraio";
		break;
	case 3:
		str = "Marzo";
		break;
	case 4:
		str = "Aprile";
		break;
	case 5:
		str = "Maggio";
		break;
	case 6:
		str = "Giugno";
		break;
	case 7:
		str = "Luglio";
		break;
	case 8:
		str = "Agosto";
		break;
	case 9:
		str = "Settembre";
		break;
	case 10:
		str = "Ottobre";
		break;
	case 11:
		str = "Novembre";
		break;
	case 12:
		str = "Dicembre";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
};
datetimelang_italian_MonthName.alltoUpperCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Gennaio";
		break;
	case 2:
		str = "Febbraio";
		break;
	case 3:
		str = "Marzo";
		break;
	case 4:
		str = "Aprile";
		break;
	case 5:
		str = "Maggio";
		break;
	case 6:
		str = "Giugno";
		break;
	case 7:
		str = "Luglio";
		break;
	case 8:
		str = "Agosto";
		break;
	case 9:
		str = "Settembre";
		break;
	case 10:
		str = "Ottobre";
		break;
	case 11:
		str = "Novembre";
		break;
	case 12:
		str = "Dicembre";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
};
datetimelang_italian_MonthName.toString = function(this1) {
	var m = this1;
	switch(m) {
	case 1:
		return "Gennaio";
	case 2:
		return "Febbraio";
	case 3:
		return "Marzo";
	case 4:
		return "Aprile";
	case 5:
		return "Maggio";
	case 6:
		return "Giugno";
	case 7:
		return "Luglio";
	case 8:
		return "Agosto";
	case 9:
		return "Settembre";
	case 10:
		return "Ottobre";
	case 11:
		return "Novembre";
	case 12:
		return "Dicembre";
	}
};
datetimelang_italian_MonthName.stringAllUpFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Gennaio";
		break;
	case 2:
		str = "Febbraio";
		break;
	case 3:
		str = "Marzo";
		break;
	case 4:
		str = "Aprile";
		break;
	case 5:
		str = "Maggio";
		break;
	case 6:
		str = "Giugno";
		break;
	case 7:
		str = "Luglio";
		break;
	case 8:
		str = "Agosto";
		break;
	case 9:
		str = "Settembre";
		break;
	case 10:
		str = "Ottobre";
		break;
	case 11:
		str = "Novembre";
		break;
	case 12:
		str = "Dicembre";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
	return s;
};
datetimelang_italian_MonthName.stringLowerFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Gennaio";
		break;
	case 2:
		str = "Febbraio";
		break;
	case 3:
		str = "Marzo";
		break;
	case 4:
		str = "Aprile";
		break;
	case 5:
		str = "Maggio";
		break;
	case 6:
		str = "Giugno";
		break;
	case 7:
		str = "Luglio";
		break;
	case 8:
		str = "Agosto";
		break;
	case 9:
		str = "Settembre";
		break;
	case 10:
		str = "Ottobre";
		break;
	case 11:
		str = "Novembre";
		break;
	case 12:
		str = "Dicembre";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
	return s;
};
datetimelang_italian_MonthName.stringShortFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Gennaio";
		break;
	case 2:
		str = "Febbraio";
		break;
	case 3:
		str = "Marzo";
		break;
	case 4:
		str = "Aprile";
		break;
	case 5:
		str = "Maggio";
		break;
	case 6:
		str = "Giugno";
		break;
	case 7:
		str = "Luglio";
		break;
	case 8:
		str = "Agosto";
		break;
	case 9:
		str = "Settembre";
		break;
	case 10:
		str = "Ottobre";
		break;
	case 11:
		str = "Novembre";
		break;
	case 12:
		str = "Dicembre";
		break;
	}
	var s = len1 == -1 ? str : HxOverrides.substr(str,0,len1);
	return s;
};
datetimelang_italian_MonthName.stringFromDateTime = function(dt) {
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var s;
	var m1 = m;
	switch(m1) {
	case 1:
		s = "Gennaio";
		break;
	case 2:
		s = "Febbraio";
		break;
	case 3:
		s = "Marzo";
		break;
	case 4:
		s = "Aprile";
		break;
	case 5:
		s = "Maggio";
		break;
	case 6:
		s = "Giugno";
		break;
	case 7:
		s = "Luglio";
		break;
	case 8:
		s = "Agosto";
		break;
	case 9:
		s = "Settembre";
		break;
	case 10:
		s = "Ottobre";
		break;
	case 11:
		s = "Novembre";
		break;
	case 12:
		s = "Dicembre";
		break;
	}
	return s;
};
var datetimelang_norwegian_DayName = {};
datetimelang_norwegian_DayName._new = function(d) {
	var this1 = d;
	return this1;
};
datetimelang_norwegian_DayName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "fredag":
		return 5;
	case "laurdag":
		return 6;
	case "lordag":
		return 6;
	case "lørdag":
		return 6;
	case "mandag":
		return 1;
	case "måndag":
		return 1;
	case "onsdag":
		return 3;
	case "sondag":
		return 0;
	case "sundag":
		return 0;
	case "søndag":
		return 0;
	case "tirsdag":
		return 2;
	case "torsdag":
		return 4;
	case "tysdag":
		return 2;
	default:
		return null;
	}
};
datetimelang_norwegian_DayName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Søndag";
		break;
	case 1:
		str = "Mandag";
		break;
	case 2:
		str = "Tirsdag";
		break;
	case 3:
		str = "Onsdag";
		break;
	case 4:
		str = "Torsdag";
		break;
	case 5:
		str = "Fredag";
		break;
	case 6:
		str = "Lørdag";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_norwegian_DayName.toLowerCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Søndag";
		break;
	case 1:
		str = "Mandag";
		break;
	case 2:
		str = "Tirsdag";
		break;
	case 3:
		str = "Onsdag";
		break;
	case 4:
		str = "Torsdag";
		break;
	case 5:
		str = "Fredag";
		break;
	case 6:
		str = "Lørdag";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
};
datetimelang_norwegian_DayName.alltoUpperCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Søndag";
		break;
	case 1:
		str = "Mandag";
		break;
	case 2:
		str = "Tirsdag";
		break;
	case 3:
		str = "Onsdag";
		break;
	case 4:
		str = "Torsdag";
		break;
	case 5:
		str = "Fredag";
		break;
	case 6:
		str = "Lørdag";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
};
datetimelang_norwegian_DayName.toString = function(this1) {
	var d = this1;
	switch(d) {
	case 0:
		return "Søndag";
	case 1:
		return "Mandag";
	case 2:
		return "Tirsdag";
	case 3:
		return "Onsdag";
	case 4:
		return "Torsdag";
	case 5:
		return "Fredag";
	case 6:
		return "Lørdag";
	}
};
datetimelang_norwegian_DayName.toStringNynorsk = function(this1) {
	var d = this1;
	switch(d) {
	case 0:
		return "Sundag";
	case 1:
		return "Måndag";
	case 2:
		return "Tysdag";
	case 3:
		return "Onsdag";
	case 4:
		return "Torsdag";
	case 5:
		return "Fredag";
	case 6:
		return "Laurdag";
	}
};
datetimelang_norwegian_DayName.stringAllUpFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Søndag";
		break;
	case 1:
		str = "Mandag";
		break;
	case 2:
		str = "Tirsdag";
		break;
	case 3:
		str = "Onsdag";
		break;
	case 4:
		str = "Torsdag";
		break;
	case 5:
		str = "Fredag";
		break;
	case 6:
		str = "Lørdag";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
	return s;
};
datetimelang_norwegian_DayName.stringLowerFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Søndag";
		break;
	case 1:
		str = "Mandag";
		break;
	case 2:
		str = "Tirsdag";
		break;
	case 3:
		str = "Onsdag";
		break;
	case 4:
		str = "Torsdag";
		break;
	case 5:
		str = "Fredag";
		break;
	case 6:
		str = "Lørdag";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
	return s;
};
datetimelang_norwegian_DayName.stringShortFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Søndag";
		break;
	case 1:
		str = "Mandag";
		break;
	case 2:
		str = "Tirsdag";
		break;
	case 3:
		str = "Onsdag";
		break;
	case 4:
		str = "Torsdag";
		break;
	case 5:
		str = "Fredag";
		break;
	case 6:
		str = "Lørdag";
		break;
	}
	var s = len1 == -1 ? str : HxOverrides.substr(str,0,len1);
	return s;
};
datetimelang_norwegian_DayName.stringFromDateTime = function(dt,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var s;
	var d1 = d;
	switch(d1) {
	case 0:
		s = "Søndag";
		break;
	case 1:
		s = "Mandag";
		break;
	case 2:
		s = "Tirsdag";
		break;
	case 3:
		s = "Onsdag";
		break;
	case 4:
		s = "Torsdag";
		break;
	case 5:
		s = "Fredag";
		break;
	case 6:
		s = "Lørdag";
		break;
	}
	return s;
};
var datetimelang_norwegian_MonthName = {};
datetimelang_norwegian_MonthName._new = function(m) {
	var this1 = m;
	return this1;
};
datetimelang_norwegian_MonthName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "april":
		return 4;
	case "august":
		return 8;
	case "desember":
		return 12;
	case "februar":
		return 2;
	case "januar":
		return 1;
	case "juli":
		return 7;
	case "juni":
		return 6;
	case "mai":
		return 5;
	case "mars":
		return 3;
	case "november":
		return 11;
	case "oktober":
		return 10;
	case "september":
		return 9;
	default:
		return null;
	}
};
datetimelang_norwegian_MonthName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Januar";
		break;
	case 2:
		str = "Februar";
		break;
	case 3:
		str = "Mars";
		break;
	case 4:
		str = "April";
		break;
	case 5:
		str = "Mai";
		break;
	case 6:
		str = "Juni";
		break;
	case 7:
		str = "Juli";
		break;
	case 8:
		str = "August";
		break;
	case 9:
		str = "September";
		break;
	case 10:
		str = "Oktober";
		break;
	case 11:
		str = "November";
		break;
	case 12:
		str = "Desember";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_norwegian_MonthName.toLowerCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Januar";
		break;
	case 2:
		str = "Februar";
		break;
	case 3:
		str = "Mars";
		break;
	case 4:
		str = "April";
		break;
	case 5:
		str = "Mai";
		break;
	case 6:
		str = "Juni";
		break;
	case 7:
		str = "Juli";
		break;
	case 8:
		str = "August";
		break;
	case 9:
		str = "September";
		break;
	case 10:
		str = "Oktober";
		break;
	case 11:
		str = "November";
		break;
	case 12:
		str = "Desember";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
};
datetimelang_norwegian_MonthName.alltoUpperCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Januar";
		break;
	case 2:
		str = "Februar";
		break;
	case 3:
		str = "Mars";
		break;
	case 4:
		str = "April";
		break;
	case 5:
		str = "Mai";
		break;
	case 6:
		str = "Juni";
		break;
	case 7:
		str = "Juli";
		break;
	case 8:
		str = "August";
		break;
	case 9:
		str = "September";
		break;
	case 10:
		str = "Oktober";
		break;
	case 11:
		str = "November";
		break;
	case 12:
		str = "Desember";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
};
datetimelang_norwegian_MonthName.toString = function(this1) {
	var m = this1;
	switch(m) {
	case 1:
		return "Januar";
	case 2:
		return "Februar";
	case 3:
		return "Mars";
	case 4:
		return "April";
	case 5:
		return "Mai";
	case 6:
		return "Juni";
	case 7:
		return "Juli";
	case 8:
		return "August";
	case 9:
		return "September";
	case 10:
		return "Oktober";
	case 11:
		return "November";
	case 12:
		return "Desember";
	}
};
datetimelang_norwegian_MonthName.stringAllUpFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Januar";
		break;
	case 2:
		str = "Februar";
		break;
	case 3:
		str = "Mars";
		break;
	case 4:
		str = "April";
		break;
	case 5:
		str = "Mai";
		break;
	case 6:
		str = "Juni";
		break;
	case 7:
		str = "Juli";
		break;
	case 8:
		str = "August";
		break;
	case 9:
		str = "September";
		break;
	case 10:
		str = "Oktober";
		break;
	case 11:
		str = "November";
		break;
	case 12:
		str = "Desember";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
	return s;
};
datetimelang_norwegian_MonthName.stringLowerFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Januar";
		break;
	case 2:
		str = "Februar";
		break;
	case 3:
		str = "Mars";
		break;
	case 4:
		str = "April";
		break;
	case 5:
		str = "Mai";
		break;
	case 6:
		str = "Juni";
		break;
	case 7:
		str = "Juli";
		break;
	case 8:
		str = "August";
		break;
	case 9:
		str = "September";
		break;
	case 10:
		str = "Oktober";
		break;
	case 11:
		str = "November";
		break;
	case 12:
		str = "Desember";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
	return s;
};
datetimelang_norwegian_MonthName.stringShortFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Januar";
		break;
	case 2:
		str = "Februar";
		break;
	case 3:
		str = "Mars";
		break;
	case 4:
		str = "April";
		break;
	case 5:
		str = "Mai";
		break;
	case 6:
		str = "Juni";
		break;
	case 7:
		str = "Juli";
		break;
	case 8:
		str = "August";
		break;
	case 9:
		str = "September";
		break;
	case 10:
		str = "Oktober";
		break;
	case 11:
		str = "November";
		break;
	case 12:
		str = "Desember";
		break;
	}
	var s = len1 == -1 ? str : HxOverrides.substr(str,0,len1);
	return s;
};
datetimelang_norwegian_MonthName.stringFromDateTime = function(dt) {
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var s;
	var m1 = m;
	switch(m1) {
	case 1:
		s = "Januar";
		break;
	case 2:
		s = "Februar";
		break;
	case 3:
		s = "Mars";
		break;
	case 4:
		s = "April";
		break;
	case 5:
		s = "Mai";
		break;
	case 6:
		s = "Juni";
		break;
	case 7:
		s = "Juli";
		break;
	case 8:
		s = "August";
		break;
	case 9:
		s = "September";
		break;
	case 10:
		s = "Oktober";
		break;
	case 11:
		s = "November";
		break;
	case 12:
		s = "Desember";
		break;
	}
	return s;
};
var datetimelang_polish_DayName = {};
datetimelang_polish_DayName._new = function(d) {
	var this1 = d;
	return this1;
};
datetimelang_polish_DayName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "czwartek":
		return 4;
	case "niedziela":
		return 0;
	case "poniedzialek":
		return 1;
	case "poniedziałek":
		return 1;
	case "sobota":
		return 6;
	case "sroda":
		return 3;
	case "wtorek":
		return 2;
	case "środa":
		return 3;
	default:
		return null;
	}
};
datetimelang_polish_DayName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Niedziela";
		break;
	case 1:
		str = "Poniedziałek";
		break;
	case 2:
		str = "Wtorek";
		break;
	case 3:
		str = "Środa";
		break;
	case 4:
		str = "Czwartek";
		break;
	case 5:
		str = "Piątek";
		break;
	case 6:
		str = "Sobota";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_polish_DayName.toLowerCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Niedziela";
		break;
	case 1:
		str = "Poniedziałek";
		break;
	case 2:
		str = "Wtorek";
		break;
	case 3:
		str = "Środa";
		break;
	case 4:
		str = "Czwartek";
		break;
	case 5:
		str = "Piątek";
		break;
	case 6:
		str = "Sobota";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
};
datetimelang_polish_DayName.alltoUpperCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Niedziela";
		break;
	case 1:
		str = "Poniedziałek";
		break;
	case 2:
		str = "Wtorek";
		break;
	case 3:
		str = "Środa";
		break;
	case 4:
		str = "Czwartek";
		break;
	case 5:
		str = "Piątek";
		break;
	case 6:
		str = "Sobota";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
};
datetimelang_polish_DayName.toString = function(this1) {
	var d = this1;
	switch(d) {
	case 0:
		return "Niedziela";
	case 1:
		return "Poniedziałek";
	case 2:
		return "Wtorek";
	case 3:
		return "Środa";
	case 4:
		return "Czwartek";
	case 5:
		return "Piątek";
	case 6:
		return "Sobota";
	}
};
datetimelang_polish_DayName.stringAllUpFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Niedziela";
		break;
	case 1:
		str = "Poniedziałek";
		break;
	case 2:
		str = "Wtorek";
		break;
	case 3:
		str = "Środa";
		break;
	case 4:
		str = "Czwartek";
		break;
	case 5:
		str = "Piątek";
		break;
	case 6:
		str = "Sobota";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
	return s;
};
datetimelang_polish_DayName.stringLowerFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Niedziela";
		break;
	case 1:
		str = "Poniedziałek";
		break;
	case 2:
		str = "Wtorek";
		break;
	case 3:
		str = "Środa";
		break;
	case 4:
		str = "Czwartek";
		break;
	case 5:
		str = "Piątek";
		break;
	case 6:
		str = "Sobota";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
	return s;
};
datetimelang_polish_DayName.stringShortFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Niedziela";
		break;
	case 1:
		str = "Poniedziałek";
		break;
	case 2:
		str = "Wtorek";
		break;
	case 3:
		str = "Środa";
		break;
	case 4:
		str = "Czwartek";
		break;
	case 5:
		str = "Piątek";
		break;
	case 6:
		str = "Sobota";
		break;
	}
	var s = len1 == -1 ? str : HxOverrides.substr(str,0,len1);
	return s;
};
datetimelang_polish_DayName.stringFromDateTime = function(dt,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var s;
	var d1 = d;
	switch(d1) {
	case 0:
		s = "Niedziela";
		break;
	case 1:
		s = "Poniedziałek";
		break;
	case 2:
		s = "Wtorek";
		break;
	case 3:
		s = "Środa";
		break;
	case 4:
		s = "Czwartek";
		break;
	case 5:
		s = "Piątek";
		break;
	case 6:
		s = "Sobota";
		break;
	}
	return s;
};
var datetimelang_polish_MonthName = {};
datetimelang_polish_MonthName._new = function(m) {
	var this1 = m;
	return this1;
};
datetimelang_polish_MonthName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "czerwiec":
		return 6;
	case "grudzień":
		return 12;
	case "kwiecień":
		return 4;
	case "lipiec":
		return 7;
	case "listopad":
		return 11;
	case "luty":
		return 2;
	case "maj":
		return 5;
	case "marzec":
		return 3;
	case "październik":
		return 10;
	case "sierpień":
		return 8;
	case "styczeń":
		return 1;
	case "wrzesień":
		return 9;
	default:
		return null;
	}
};
datetimelang_polish_MonthName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Styczeń";
		break;
	case 2:
		str = "Luty";
		break;
	case 3:
		str = "Marzec";
		break;
	case 4:
		str = "Kwiecień";
		break;
	case 5:
		str = "Maj";
		break;
	case 6:
		str = "Czerwiec";
		break;
	case 7:
		str = "Lipiec";
		break;
	case 8:
		str = "Sierpień";
		break;
	case 9:
		str = "Wrzesień";
		break;
	case 10:
		str = "Październik";
		break;
	case 11:
		str = "Listopad";
		break;
	case 12:
		str = "Grudzień";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_polish_MonthName.toLowerCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Styczeń";
		break;
	case 2:
		str = "Luty";
		break;
	case 3:
		str = "Marzec";
		break;
	case 4:
		str = "Kwiecień";
		break;
	case 5:
		str = "Maj";
		break;
	case 6:
		str = "Czerwiec";
		break;
	case 7:
		str = "Lipiec";
		break;
	case 8:
		str = "Sierpień";
		break;
	case 9:
		str = "Wrzesień";
		break;
	case 10:
		str = "Październik";
		break;
	case 11:
		str = "Listopad";
		break;
	case 12:
		str = "Grudzień";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
};
datetimelang_polish_MonthName.alltoUpperCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Styczeń";
		break;
	case 2:
		str = "Luty";
		break;
	case 3:
		str = "Marzec";
		break;
	case 4:
		str = "Kwiecień";
		break;
	case 5:
		str = "Maj";
		break;
	case 6:
		str = "Czerwiec";
		break;
	case 7:
		str = "Lipiec";
		break;
	case 8:
		str = "Sierpień";
		break;
	case 9:
		str = "Wrzesień";
		break;
	case 10:
		str = "Październik";
		break;
	case 11:
		str = "Listopad";
		break;
	case 12:
		str = "Grudzień";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
};
datetimelang_polish_MonthName.toString = function(this1) {
	var m = this1;
	switch(m) {
	case 1:
		return "Styczeń";
	case 2:
		return "Luty";
	case 3:
		return "Marzec";
	case 4:
		return "Kwiecień";
	case 5:
		return "Maj";
	case 6:
		return "Czerwiec";
	case 7:
		return "Lipiec";
	case 8:
		return "Sierpień";
	case 9:
		return "Wrzesień";
	case 10:
		return "Październik";
	case 11:
		return "Listopad";
	case 12:
		return "Grudzień";
	}
};
datetimelang_polish_MonthName.stringAllUpFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Styczeń";
		break;
	case 2:
		str = "Luty";
		break;
	case 3:
		str = "Marzec";
		break;
	case 4:
		str = "Kwiecień";
		break;
	case 5:
		str = "Maj";
		break;
	case 6:
		str = "Czerwiec";
		break;
	case 7:
		str = "Lipiec";
		break;
	case 8:
		str = "Sierpień";
		break;
	case 9:
		str = "Wrzesień";
		break;
	case 10:
		str = "Październik";
		break;
	case 11:
		str = "Listopad";
		break;
	case 12:
		str = "Grudzień";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
	return s;
};
datetimelang_polish_MonthName.stringLowerFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Styczeń";
		break;
	case 2:
		str = "Luty";
		break;
	case 3:
		str = "Marzec";
		break;
	case 4:
		str = "Kwiecień";
		break;
	case 5:
		str = "Maj";
		break;
	case 6:
		str = "Czerwiec";
		break;
	case 7:
		str = "Lipiec";
		break;
	case 8:
		str = "Sierpień";
		break;
	case 9:
		str = "Wrzesień";
		break;
	case 10:
		str = "Październik";
		break;
	case 11:
		str = "Listopad";
		break;
	case 12:
		str = "Grudzień";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
	return s;
};
datetimelang_polish_MonthName.stringShortFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Styczeń";
		break;
	case 2:
		str = "Luty";
		break;
	case 3:
		str = "Marzec";
		break;
	case 4:
		str = "Kwiecień";
		break;
	case 5:
		str = "Maj";
		break;
	case 6:
		str = "Czerwiec";
		break;
	case 7:
		str = "Lipiec";
		break;
	case 8:
		str = "Sierpień";
		break;
	case 9:
		str = "Wrzesień";
		break;
	case 10:
		str = "Październik";
		break;
	case 11:
		str = "Listopad";
		break;
	case 12:
		str = "Grudzień";
		break;
	}
	var s = len1 == -1 ? str : HxOverrides.substr(str,0,len1);
	return s;
};
datetimelang_polish_MonthName.stringFromDateTime = function(dt) {
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var s;
	var m1 = m;
	switch(m1) {
	case 1:
		s = "Styczeń";
		break;
	case 2:
		s = "Luty";
		break;
	case 3:
		s = "Marzec";
		break;
	case 4:
		s = "Kwiecień";
		break;
	case 5:
		s = "Maj";
		break;
	case 6:
		s = "Czerwiec";
		break;
	case 7:
		s = "Lipiec";
		break;
	case 8:
		s = "Sierpień";
		break;
	case 9:
		s = "Wrzesień";
		break;
	case 10:
		s = "Październik";
		break;
	case 11:
		s = "Listopad";
		break;
	case 12:
		s = "Grudzień";
		break;
	}
	return s;
};
var datetimelang_portuguese_DayName = {};
datetimelang_portuguese_DayName._new = function(d) {
	var this1 = d;
	return this1;
};
datetimelang_portuguese_DayName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "domingo":
		return 0;
	case "quarta-feira":
		return 3;
	case "quinta-feira":
		return 4;
	case "sabado":
		return 6;
	case "segunda-feira":
		return 1;
	case "sexta-feira":
		return 5;
	case "sábado":
		return 6;
	case "terca-feira":
		return 2;
	case "terça-feira":
		return 2;
	default:
		return null;
	}
};
datetimelang_portuguese_DayName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Domingo";
		break;
	case 1:
		str = "Segunda";
		break;
	case 2:
		str = "Terça";
		break;
	case 3:
		str = "Quarta";
		break;
	case 4:
		str = "Quinta";
		break;
	case 5:
		str = "Sexta";
		break;
	case 6:
		str = "Sábado";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_portuguese_DayName.toLowerCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Domingo";
		break;
	case 1:
		str = "Segunda";
		break;
	case 2:
		str = "Terça";
		break;
	case 3:
		str = "Quarta";
		break;
	case 4:
		str = "Quinta";
		break;
	case 5:
		str = "Sexta";
		break;
	case 6:
		str = "Sábado";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
};
datetimelang_portuguese_DayName.alltoUpperCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Domingo";
		break;
	case 1:
		str = "Segunda";
		break;
	case 2:
		str = "Terça";
		break;
	case 3:
		str = "Quarta";
		break;
	case 4:
		str = "Quinta";
		break;
	case 5:
		str = "Sexta";
		break;
	case 6:
		str = "Sábado";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
};
datetimelang_portuguese_DayName.toString = function(this1) {
	var d = this1;
	switch(d) {
	case 0:
		return "Domingo";
	case 1:
		return "Segunda";
	case 2:
		return "Terça";
	case 3:
		return "Quarta";
	case 4:
		return "Quinta";
	case 5:
		return "Sexta";
	case 6:
		return "Sábado";
	}
};
datetimelang_portuguese_DayName.toStringDay = function(this1) {
	var d = this1;
	switch(d) {
	case 0:
		return "Domingo";
	case 1:
		return "feira-Segunda";
	case 2:
		return "feira-Terça";
	case 3:
		return "feira-Quarta";
	case 4:
		return "feira-Quinta";
	case 5:
		return "feira-Sexta";
	case 6:
		return "Sábado";
	}
};
datetimelang_portuguese_DayName.stringAllUpFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Domingo";
		break;
	case 1:
		str = "Segunda";
		break;
	case 2:
		str = "Terça";
		break;
	case 3:
		str = "Quarta";
		break;
	case 4:
		str = "Quinta";
		break;
	case 5:
		str = "Sexta";
		break;
	case 6:
		str = "Sábado";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
	return s;
};
datetimelang_portuguese_DayName.stringLowerFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Domingo";
		break;
	case 1:
		str = "Segunda";
		break;
	case 2:
		str = "Terça";
		break;
	case 3:
		str = "Quarta";
		break;
	case 4:
		str = "Quinta";
		break;
	case 5:
		str = "Sexta";
		break;
	case 6:
		str = "Sábado";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
	return s;
};
datetimelang_portuguese_DayName.stringShortFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Domingo";
		break;
	case 1:
		str = "Segunda";
		break;
	case 2:
		str = "Terça";
		break;
	case 3:
		str = "Quarta";
		break;
	case 4:
		str = "Quinta";
		break;
	case 5:
		str = "Sexta";
		break;
	case 6:
		str = "Sábado";
		break;
	}
	var s = len1 == -1 ? str : HxOverrides.substr(str,0,len1);
	return s;
};
datetimelang_portuguese_DayName.stringFromDateTime = function(dt,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var s;
	var d1 = d;
	switch(d1) {
	case 0:
		s = "Domingo";
		break;
	case 1:
		s = "Segunda";
		break;
	case 2:
		s = "Terça";
		break;
	case 3:
		s = "Quarta";
		break;
	case 4:
		s = "Quinta";
		break;
	case 5:
		s = "Sexta";
		break;
	case 6:
		s = "Sábado";
		break;
	}
	return s;
};
var datetimelang_portuguese_MonthName = {};
datetimelang_portuguese_MonthName._new = function(m) {
	var this1 = m;
	return this1;
};
datetimelang_portuguese_MonthName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "abril":
		return 4;
	case "agosto":
		return 8;
	case "dezembro":
		return 12;
	case "fevereiro":
		return 2;
	case "janeiro":
		return 1;
	case "julho":
		return 7;
	case "junho":
		return 6;
	case "maio":
		return 5;
	case "marco":
		return 3;
	case "março":
		return 3;
	case "novembro":
		return 11;
	case "outubro":
		return 10;
	case "setembro":
		return 9;
	default:
		return null;
	}
};
datetimelang_portuguese_MonthName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Janeiro";
		break;
	case 2:
		str = "Fevereiro";
		break;
	case 3:
		str = "Março";
		break;
	case 4:
		str = "Abril";
		break;
	case 5:
		str = "Maio";
		break;
	case 6:
		str = "Junho";
		break;
	case 7:
		str = "Julho";
		break;
	case 8:
		str = "Agosto";
		break;
	case 9:
		str = "Setembro";
		break;
	case 10:
		str = "Outubro";
		break;
	case 11:
		str = "Novembro";
		break;
	case 12:
		str = "Dezembro";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_portuguese_MonthName.toLowerCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Janeiro";
		break;
	case 2:
		str = "Fevereiro";
		break;
	case 3:
		str = "Março";
		break;
	case 4:
		str = "Abril";
		break;
	case 5:
		str = "Maio";
		break;
	case 6:
		str = "Junho";
		break;
	case 7:
		str = "Julho";
		break;
	case 8:
		str = "Agosto";
		break;
	case 9:
		str = "Setembro";
		break;
	case 10:
		str = "Outubro";
		break;
	case 11:
		str = "Novembro";
		break;
	case 12:
		str = "Dezembro";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
};
datetimelang_portuguese_MonthName.alltoUpperCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Janeiro";
		break;
	case 2:
		str = "Fevereiro";
		break;
	case 3:
		str = "Março";
		break;
	case 4:
		str = "Abril";
		break;
	case 5:
		str = "Maio";
		break;
	case 6:
		str = "Junho";
		break;
	case 7:
		str = "Julho";
		break;
	case 8:
		str = "Agosto";
		break;
	case 9:
		str = "Setembro";
		break;
	case 10:
		str = "Outubro";
		break;
	case 11:
		str = "Novembro";
		break;
	case 12:
		str = "Dezembro";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
};
datetimelang_portuguese_MonthName.toString = function(this1) {
	var m = this1;
	switch(m) {
	case 1:
		return "Janeiro";
	case 2:
		return "Fevereiro";
	case 3:
		return "Março";
	case 4:
		return "Abril";
	case 5:
		return "Maio";
	case 6:
		return "Junho";
	case 7:
		return "Julho";
	case 8:
		return "Agosto";
	case 9:
		return "Setembro";
	case 10:
		return "Outubro";
	case 11:
		return "Novembro";
	case 12:
		return "Dezembro";
	}
};
datetimelang_portuguese_MonthName.stringAllUpFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Janeiro";
		break;
	case 2:
		str = "Fevereiro";
		break;
	case 3:
		str = "Março";
		break;
	case 4:
		str = "Abril";
		break;
	case 5:
		str = "Maio";
		break;
	case 6:
		str = "Junho";
		break;
	case 7:
		str = "Julho";
		break;
	case 8:
		str = "Agosto";
		break;
	case 9:
		str = "Setembro";
		break;
	case 10:
		str = "Outubro";
		break;
	case 11:
		str = "Novembro";
		break;
	case 12:
		str = "Dezembro";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
	return s;
};
datetimelang_portuguese_MonthName.stringLowerFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Janeiro";
		break;
	case 2:
		str = "Fevereiro";
		break;
	case 3:
		str = "Março";
		break;
	case 4:
		str = "Abril";
		break;
	case 5:
		str = "Maio";
		break;
	case 6:
		str = "Junho";
		break;
	case 7:
		str = "Julho";
		break;
	case 8:
		str = "Agosto";
		break;
	case 9:
		str = "Setembro";
		break;
	case 10:
		str = "Outubro";
		break;
	case 11:
		str = "Novembro";
		break;
	case 12:
		str = "Dezembro";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
	return s;
};
datetimelang_portuguese_MonthName.stringShortFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Janeiro";
		break;
	case 2:
		str = "Fevereiro";
		break;
	case 3:
		str = "Março";
		break;
	case 4:
		str = "Abril";
		break;
	case 5:
		str = "Maio";
		break;
	case 6:
		str = "Junho";
		break;
	case 7:
		str = "Julho";
		break;
	case 8:
		str = "Agosto";
		break;
	case 9:
		str = "Setembro";
		break;
	case 10:
		str = "Outubro";
		break;
	case 11:
		str = "Novembro";
		break;
	case 12:
		str = "Dezembro";
		break;
	}
	var s = len1 == -1 ? str : HxOverrides.substr(str,0,len1);
	return s;
};
datetimelang_portuguese_MonthName.stringFromDateTime = function(dt) {
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var s;
	var m1 = m;
	switch(m1) {
	case 1:
		s = "Janeiro";
		break;
	case 2:
		s = "Fevereiro";
		break;
	case 3:
		s = "Março";
		break;
	case 4:
		s = "Abril";
		break;
	case 5:
		s = "Maio";
		break;
	case 6:
		s = "Junho";
		break;
	case 7:
		s = "Julho";
		break;
	case 8:
		s = "Agosto";
		break;
	case 9:
		s = "Setembro";
		break;
	case 10:
		s = "Outubro";
		break;
	case 11:
		s = "Novembro";
		break;
	case 12:
		s = "Dezembro";
		break;
	}
	return s;
};
var datetimelang_romanian_DayName = {};
datetimelang_romanian_DayName._new = function(d) {
	var this1 = d;
	return this1;
};
datetimelang_romanian_DayName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "duminica":
		return 0;
	case "duminică":
		return 0;
	case "joi":
		return 4;
	case "luni":
		return 1;
	case "marti":
		return 2;
	case "marţi":
		return 2;
	case "miercuri":
		return 3;
	case "simbata":
		return 6;
	case "sîmbătă":
		return 6;
	case "vineri":
		return 5;
	default:
		return null;
	}
};
datetimelang_romanian_DayName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Duminică";
		break;
	case 1:
		str = "Luni";
		break;
	case 2:
		str = "Marţi";
		break;
	case 3:
		str = "Miercuri";
		break;
	case 4:
		str = "Joi";
		break;
	case 5:
		str = "Vineri";
		break;
	case 6:
		str = "Sîmbătă";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_romanian_DayName.toLowerCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Duminică";
		break;
	case 1:
		str = "Luni";
		break;
	case 2:
		str = "Marţi";
		break;
	case 3:
		str = "Miercuri";
		break;
	case 4:
		str = "Joi";
		break;
	case 5:
		str = "Vineri";
		break;
	case 6:
		str = "Sîmbătă";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
};
datetimelang_romanian_DayName.alltoUpperCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Duminică";
		break;
	case 1:
		str = "Luni";
		break;
	case 2:
		str = "Marţi";
		break;
	case 3:
		str = "Miercuri";
		break;
	case 4:
		str = "Joi";
		break;
	case 5:
		str = "Vineri";
		break;
	case 6:
		str = "Sîmbătă";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
};
datetimelang_romanian_DayName.toString = function(this1) {
	var d = this1;
	switch(d) {
	case 0:
		return "Duminică";
	case 1:
		return "Luni";
	case 2:
		return "Marţi";
	case 3:
		return "Miercuri";
	case 4:
		return "Joi";
	case 5:
		return "Vineri";
	case 6:
		return "Sîmbătă";
	}
};
datetimelang_romanian_DayName.stringAllUpFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Duminică";
		break;
	case 1:
		str = "Luni";
		break;
	case 2:
		str = "Marţi";
		break;
	case 3:
		str = "Miercuri";
		break;
	case 4:
		str = "Joi";
		break;
	case 5:
		str = "Vineri";
		break;
	case 6:
		str = "Sîmbătă";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
	return s;
};
datetimelang_romanian_DayName.stringLowerFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Duminică";
		break;
	case 1:
		str = "Luni";
		break;
	case 2:
		str = "Marţi";
		break;
	case 3:
		str = "Miercuri";
		break;
	case 4:
		str = "Joi";
		break;
	case 5:
		str = "Vineri";
		break;
	case 6:
		str = "Sîmbătă";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
	return s;
};
datetimelang_romanian_DayName.stringShortFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Duminică";
		break;
	case 1:
		str = "Luni";
		break;
	case 2:
		str = "Marţi";
		break;
	case 3:
		str = "Miercuri";
		break;
	case 4:
		str = "Joi";
		break;
	case 5:
		str = "Vineri";
		break;
	case 6:
		str = "Sîmbătă";
		break;
	}
	var s = len1 == -1 ? str : HxOverrides.substr(str,0,len1);
	return s;
};
datetimelang_romanian_DayName.stringFromDateTime = function(dt,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var s;
	var d1 = d;
	switch(d1) {
	case 0:
		s = "Duminică";
		break;
	case 1:
		s = "Luni";
		break;
	case 2:
		s = "Marţi";
		break;
	case 3:
		s = "Miercuri";
		break;
	case 4:
		s = "Joi";
		break;
	case 5:
		s = "Vineri";
		break;
	case 6:
		s = "Sîmbătă";
		break;
	}
	return s;
};
var datetimelang_romanian_MonthName = {};
datetimelang_romanian_MonthName._new = function(m) {
	var this1 = m;
	return this1;
};
datetimelang_romanian_MonthName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "aprilie":
		return 4;
	case "august":
		return 8;
	case "decembrie":
		return 12;
	case "februarie":
		return 2;
	case "ianuarie":
		return 1;
	case "iulie":
		return 7;
	case "iunie":
		return 6;
	case "mai":
		return 5;
	case "martie":
		return 3;
	case "noiembrie":
		return 11;
	case "octombrie":
		return 10;
	case "septembrie":
		return 9;
	default:
		return null;
	}
};
datetimelang_romanian_MonthName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Ianuarie";
		break;
	case 2:
		str = "Februarie";
		break;
	case 3:
		str = "Martie";
		break;
	case 4:
		str = "Aprilie";
		break;
	case 5:
		str = "Mai";
		break;
	case 6:
		str = "Iunie";
		break;
	case 7:
		str = "Iulie";
		break;
	case 8:
		str = "August";
		break;
	case 9:
		str = "Septembrie";
		break;
	case 10:
		str = "Octombrie";
		break;
	case 11:
		str = "Noiembrie";
		break;
	case 12:
		str = "Decembrie";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_romanian_MonthName.toLowerCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Ianuarie";
		break;
	case 2:
		str = "Februarie";
		break;
	case 3:
		str = "Martie";
		break;
	case 4:
		str = "Aprilie";
		break;
	case 5:
		str = "Mai";
		break;
	case 6:
		str = "Iunie";
		break;
	case 7:
		str = "Iulie";
		break;
	case 8:
		str = "August";
		break;
	case 9:
		str = "Septembrie";
		break;
	case 10:
		str = "Octombrie";
		break;
	case 11:
		str = "Noiembrie";
		break;
	case 12:
		str = "Decembrie";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
};
datetimelang_romanian_MonthName.alltoUpperCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Ianuarie";
		break;
	case 2:
		str = "Februarie";
		break;
	case 3:
		str = "Martie";
		break;
	case 4:
		str = "Aprilie";
		break;
	case 5:
		str = "Mai";
		break;
	case 6:
		str = "Iunie";
		break;
	case 7:
		str = "Iulie";
		break;
	case 8:
		str = "August";
		break;
	case 9:
		str = "Septembrie";
		break;
	case 10:
		str = "Octombrie";
		break;
	case 11:
		str = "Noiembrie";
		break;
	case 12:
		str = "Decembrie";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
};
datetimelang_romanian_MonthName.toString = function(this1) {
	var m = this1;
	switch(m) {
	case 1:
		return "Ianuarie";
	case 2:
		return "Februarie";
	case 3:
		return "Martie";
	case 4:
		return "Aprilie";
	case 5:
		return "Mai";
	case 6:
		return "Iunie";
	case 7:
		return "Iulie";
	case 8:
		return "August";
	case 9:
		return "Septembrie";
	case 10:
		return "Octombrie";
	case 11:
		return "Noiembrie";
	case 12:
		return "Decembrie";
	}
};
datetimelang_romanian_MonthName.stringAllUpFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Ianuarie";
		break;
	case 2:
		str = "Februarie";
		break;
	case 3:
		str = "Martie";
		break;
	case 4:
		str = "Aprilie";
		break;
	case 5:
		str = "Mai";
		break;
	case 6:
		str = "Iunie";
		break;
	case 7:
		str = "Iulie";
		break;
	case 8:
		str = "August";
		break;
	case 9:
		str = "Septembrie";
		break;
	case 10:
		str = "Octombrie";
		break;
	case 11:
		str = "Noiembrie";
		break;
	case 12:
		str = "Decembrie";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
	return s;
};
datetimelang_romanian_MonthName.stringLowerFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Ianuarie";
		break;
	case 2:
		str = "Februarie";
		break;
	case 3:
		str = "Martie";
		break;
	case 4:
		str = "Aprilie";
		break;
	case 5:
		str = "Mai";
		break;
	case 6:
		str = "Iunie";
		break;
	case 7:
		str = "Iulie";
		break;
	case 8:
		str = "August";
		break;
	case 9:
		str = "Septembrie";
		break;
	case 10:
		str = "Octombrie";
		break;
	case 11:
		str = "Noiembrie";
		break;
	case 12:
		str = "Decembrie";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
	return s;
};
datetimelang_romanian_MonthName.stringShortFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Ianuarie";
		break;
	case 2:
		str = "Februarie";
		break;
	case 3:
		str = "Martie";
		break;
	case 4:
		str = "Aprilie";
		break;
	case 5:
		str = "Mai";
		break;
	case 6:
		str = "Iunie";
		break;
	case 7:
		str = "Iulie";
		break;
	case 8:
		str = "August";
		break;
	case 9:
		str = "Septembrie";
		break;
	case 10:
		str = "Octombrie";
		break;
	case 11:
		str = "Noiembrie";
		break;
	case 12:
		str = "Decembrie";
		break;
	}
	var s = len1 == -1 ? str : HxOverrides.substr(str,0,len1);
	return s;
};
datetimelang_romanian_MonthName.stringFromDateTime = function(dt) {
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var s;
	var m1 = m;
	switch(m1) {
	case 1:
		s = "Ianuarie";
		break;
	case 2:
		s = "Februarie";
		break;
	case 3:
		s = "Martie";
		break;
	case 4:
		s = "Aprilie";
		break;
	case 5:
		s = "Mai";
		break;
	case 6:
		s = "Iunie";
		break;
	case 7:
		s = "Iulie";
		break;
	case 8:
		s = "August";
		break;
	case 9:
		s = "Septembrie";
		break;
	case 10:
		s = "Octombrie";
		break;
	case 11:
		s = "Noiembrie";
		break;
	case 12:
		s = "Decembrie";
		break;
	}
	return s;
};
var datetimelang_russian_DayName = {};
datetimelang_russian_DayName._new = function(d) {
	var this1 = d;
	return this1;
};
datetimelang_russian_DayName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "воскресенье":
		return 0;
	case "вторник":
		return 2;
	case "понедельник":
		return 1;
	case "пятница":
		return 5;
	case "среда":
		return 3;
	case "суббота":
		return 6;
	case "четверг":
		return 4;
	default:
		return null;
	}
};
datetimelang_russian_DayName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "воскресенье";
		break;
	case 1:
		str = "понедельник";
		break;
	case 2:
		str = "вторник";
		break;
	case 3:
		str = "среда";
		break;
	case 4:
		str = "четверг";
		break;
	case 5:
		str = "пятница";
		break;
	case 6:
		str = "суббота";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_russian_DayName.toLowerCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "воскресенье";
		break;
	case 1:
		str = "понедельник";
		break;
	case 2:
		str = "вторник";
		break;
	case 3:
		str = "среда";
		break;
	case 4:
		str = "четверг";
		break;
	case 5:
		str = "пятница";
		break;
	case 6:
		str = "суббота";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
};
datetimelang_russian_DayName.alltoUpperCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "воскресенье";
		break;
	case 1:
		str = "понедельник";
		break;
	case 2:
		str = "вторник";
		break;
	case 3:
		str = "среда";
		break;
	case 4:
		str = "четверг";
		break;
	case 5:
		str = "пятница";
		break;
	case 6:
		str = "суббота";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
};
datetimelang_russian_DayName.toString = function(this1) {
	var d = this1;
	switch(d) {
	case 0:
		return "воскресенье";
	case 1:
		return "понедельник";
	case 2:
		return "вторник";
	case 3:
		return "среда";
	case 4:
		return "четверг";
	case 5:
		return "пятница";
	case 6:
		return "суббота";
	}
};
datetimelang_russian_DayName.stringShortFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "воскресенье";
		break;
	case 1:
		str = "понедельник";
		break;
	case 2:
		str = "вторник";
		break;
	case 3:
		str = "среда";
		break;
	case 4:
		str = "четверг";
		break;
	case 5:
		str = "пятница";
		break;
	case 6:
		str = "суббота";
		break;
	}
	var s = len1 == -1 ? str : HxOverrides.substr(str,0,len1);
	return s;
};
datetimelang_russian_DayName.stringFromDateTime = function(dt,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var s;
	var d1 = d;
	switch(d1) {
	case 0:
		s = "воскресенье";
		break;
	case 1:
		s = "понедельник";
		break;
	case 2:
		s = "вторник";
		break;
	case 3:
		s = "среда";
		break;
	case 4:
		s = "четверг";
		break;
	case 5:
		s = "пятница";
		break;
	case 6:
		s = "суббота";
		break;
	}
	return s;
};
var datetimelang_russian_MonthName = {};
datetimelang_russian_MonthName._new = function(m) {
	var this1 = m;
	return this1;
};
datetimelang_russian_MonthName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "август":
		return 8;
	case "апрель":
		return 4;
	case "декабрь":
		return 12;
	case "июль":
		return 7;
	case "июнь":
		return 6;
	case "май":
		return 5;
	case "март":
		return 3;
	case "ноябрь":
		return 11;
	case "октябрь":
		return 10;
	case "сентябрь":
		return 9;
	case "февраль":
		return 2;
	case "январь":
		return 1;
	default:
		return null;
	}
};
datetimelang_russian_MonthName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "январь";
		break;
	case 2:
		str = "февраль";
		break;
	case 3:
		str = "март";
		break;
	case 4:
		str = "апрель";
		break;
	case 5:
		str = "май";
		break;
	case 6:
		str = "июнь";
		break;
	case 7:
		str = "июль";
		break;
	case 8:
		str = "август";
		break;
	case 9:
		str = "сентябрь";
		break;
	case 10:
		str = "октябрь";
		break;
	case 11:
		str = "ноябрь";
		break;
	case 12:
		str = "декабрь";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_russian_MonthName.toLowerCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "январь";
		break;
	case 2:
		str = "февраль";
		break;
	case 3:
		str = "март";
		break;
	case 4:
		str = "апрель";
		break;
	case 5:
		str = "май";
		break;
	case 6:
		str = "июнь";
		break;
	case 7:
		str = "июль";
		break;
	case 8:
		str = "август";
		break;
	case 9:
		str = "сентябрь";
		break;
	case 10:
		str = "октябрь";
		break;
	case 11:
		str = "ноябрь";
		break;
	case 12:
		str = "декабрь";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
};
datetimelang_russian_MonthName.alltoUpperCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "январь";
		break;
	case 2:
		str = "февраль";
		break;
	case 3:
		str = "март";
		break;
	case 4:
		str = "апрель";
		break;
	case 5:
		str = "май";
		break;
	case 6:
		str = "июнь";
		break;
	case 7:
		str = "июль";
		break;
	case 8:
		str = "август";
		break;
	case 9:
		str = "сентябрь";
		break;
	case 10:
		str = "октябрь";
		break;
	case 11:
		str = "ноябрь";
		break;
	case 12:
		str = "декабрь";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
};
datetimelang_russian_MonthName.toString = function(this1) {
	var m = this1;
	switch(m) {
	case 1:
		return "январь";
	case 2:
		return "февраль";
	case 3:
		return "март";
	case 4:
		return "апрель";
	case 5:
		return "май";
	case 6:
		return "июнь";
	case 7:
		return "июль";
	case 8:
		return "август";
	case 9:
		return "сентябрь";
	case 10:
		return "октябрь";
	case 11:
		return "ноябрь";
	case 12:
		return "декабрь";
	}
};
datetimelang_russian_MonthName.stringAllUpFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "январь";
		break;
	case 2:
		str = "февраль";
		break;
	case 3:
		str = "март";
		break;
	case 4:
		str = "апрель";
		break;
	case 5:
		str = "май";
		break;
	case 6:
		str = "июнь";
		break;
	case 7:
		str = "июль";
		break;
	case 8:
		str = "август";
		break;
	case 9:
		str = "сентябрь";
		break;
	case 10:
		str = "октябрь";
		break;
	case 11:
		str = "ноябрь";
		break;
	case 12:
		str = "декабрь";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
	return s;
};
datetimelang_russian_MonthName.stringLowerFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "январь";
		break;
	case 2:
		str = "февраль";
		break;
	case 3:
		str = "март";
		break;
	case 4:
		str = "апрель";
		break;
	case 5:
		str = "май";
		break;
	case 6:
		str = "июнь";
		break;
	case 7:
		str = "июль";
		break;
	case 8:
		str = "август";
		break;
	case 9:
		str = "сентябрь";
		break;
	case 10:
		str = "октябрь";
		break;
	case 11:
		str = "ноябрь";
		break;
	case 12:
		str = "декабрь";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
	return s;
};
datetimelang_russian_MonthName.stringShortFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "январь";
		break;
	case 2:
		str = "февраль";
		break;
	case 3:
		str = "март";
		break;
	case 4:
		str = "апрель";
		break;
	case 5:
		str = "май";
		break;
	case 6:
		str = "июнь";
		break;
	case 7:
		str = "июль";
		break;
	case 8:
		str = "август";
		break;
	case 9:
		str = "сентябрь";
		break;
	case 10:
		str = "октябрь";
		break;
	case 11:
		str = "ноябрь";
		break;
	case 12:
		str = "декабрь";
		break;
	}
	var s = len1 == -1 ? str : HxOverrides.substr(str,0,len1);
	return s;
};
datetimelang_russian_MonthName.stringFromDateTime = function(dt) {
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var s;
	var m1 = m;
	switch(m1) {
	case 1:
		s = "январь";
		break;
	case 2:
		s = "февраль";
		break;
	case 3:
		s = "март";
		break;
	case 4:
		s = "апрель";
		break;
	case 5:
		s = "май";
		break;
	case 6:
		s = "июнь";
		break;
	case 7:
		s = "июль";
		break;
	case 8:
		s = "август";
		break;
	case 9:
		s = "сентябрь";
		break;
	case 10:
		s = "октябрь";
		break;
	case 11:
		s = "ноябрь";
		break;
	case 12:
		s = "декабрь";
		break;
	}
	return s;
};
var datetimelang_somali_DayName = {};
datetimelang_somali_DayName._new = function(d) {
	var this1 = d;
	return this1;
};
datetimelang_somali_DayName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "hakisa":
		return 4;
	case "hakisa-bile":
		return 5;
	case "koobin":
		return 0;
	case "koodaar":
		return 3;
	case "lamatoke":
		return 2;
	case "lammin":
		return 1;
	case "soo roga":
		return 6;
	default:
		return null;
	}
};
datetimelang_somali_DayName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Koobin";
		break;
	case 1:
		str = "Lammin";
		break;
	case 2:
		str = "Lamatoke";
		break;
	case 3:
		str = "Koodaar";
		break;
	case 4:
		str = "Hakisa";
		break;
	case 5:
		str = "Hakisa-Bile";
		break;
	case 6:
		str = "Soo Roga";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_somali_DayName.toLowerCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Koobin";
		break;
	case 1:
		str = "Lammin";
		break;
	case 2:
		str = "Lamatoke";
		break;
	case 3:
		str = "Koodaar";
		break;
	case 4:
		str = "Hakisa";
		break;
	case 5:
		str = "Hakisa-Bile";
		break;
	case 6:
		str = "Soo Roga";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
};
datetimelang_somali_DayName.alltoUpperCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Koobin";
		break;
	case 1:
		str = "Lammin";
		break;
	case 2:
		str = "Lamatoke";
		break;
	case 3:
		str = "Koodaar";
		break;
	case 4:
		str = "Hakisa";
		break;
	case 5:
		str = "Hakisa-Bile";
		break;
	case 6:
		str = "Soo Roga";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
};
datetimelang_somali_DayName.toString = function(this1) {
	var d = this1;
	switch(d) {
	case 0:
		return "Koobin";
	case 1:
		return "Lammin";
	case 2:
		return "Lamatoke";
	case 3:
		return "Koodaar";
	case 4:
		return "Hakisa";
	case 5:
		return "Hakisa-Bile";
	case 6:
		return "Soo Roga";
	}
};
datetimelang_somali_DayName.stringAllUpFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Koobin";
		break;
	case 1:
		str = "Lammin";
		break;
	case 2:
		str = "Lamatoke";
		break;
	case 3:
		str = "Koodaar";
		break;
	case 4:
		str = "Hakisa";
		break;
	case 5:
		str = "Hakisa-Bile";
		break;
	case 6:
		str = "Soo Roga";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
	return s;
};
datetimelang_somali_DayName.stringLowerFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Koobin";
		break;
	case 1:
		str = "Lammin";
		break;
	case 2:
		str = "Lamatoke";
		break;
	case 3:
		str = "Koodaar";
		break;
	case 4:
		str = "Hakisa";
		break;
	case 5:
		str = "Hakisa-Bile";
		break;
	case 6:
		str = "Soo Roga";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
	return s;
};
datetimelang_somali_DayName.stringShortFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Koobin";
		break;
	case 1:
		str = "Lammin";
		break;
	case 2:
		str = "Lamatoke";
		break;
	case 3:
		str = "Koodaar";
		break;
	case 4:
		str = "Hakisa";
		break;
	case 5:
		str = "Hakisa-Bile";
		break;
	case 6:
		str = "Soo Roga";
		break;
	}
	var s = len1 == -1 ? str : HxOverrides.substr(str,0,len1);
	return s;
};
datetimelang_somali_DayName.stringFromDateTime = function(dt,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var s;
	var d1 = d;
	switch(d1) {
	case 0:
		s = "Koobin";
		break;
	case 1:
		s = "Lammin";
		break;
	case 2:
		s = "Lamatoke";
		break;
	case 3:
		s = "Koodaar";
		break;
	case 4:
		s = "Hakisa";
		break;
	case 5:
		s = "Hakisa-Bile";
		break;
	case 6:
		s = "Soo Roga";
		break;
	}
	return s;
};
var datetimelang_somali_MonthName = {};
datetimelang_somali_MonthName._new = function(m) {
	var this1 = m;
	return this1;
};
datetimelang_somali_MonthName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "Oktoobar":
		return 10;
	case "abriil":
		return 4;
	case "december":
		return 12;
	case "febraayo":
		return 2;
	case "jannaayo":
		return 1;
	case "julay":
		return 7;
	case "juun":
		return 6;
	case "maarso":
		return 3;
	case "maayo":
		return 5;
	case "november":
		return 11;
	case "ogost":
		return 8;
	case "setembar":
		return 9;
	default:
		return null;
	}
};
datetimelang_somali_MonthName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Jannaayo";
		break;
	case 2:
		str = "Febraayo";
		break;
	case 3:
		str = "Maarso";
		break;
	case 4:
		str = "Abriil";
		break;
	case 5:
		str = "Maayo";
		break;
	case 6:
		str = "Juun";
		break;
	case 7:
		str = "Julay";
		break;
	case 8:
		str = "Ogost";
		break;
	case 9:
		str = "Setembar";
		break;
	case 10:
		str = "Oktoobar";
		break;
	case 11:
		str = "Noofeembar";
		break;
	case 12:
		str = "Desembar";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_somali_MonthName.toLowerCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Jannaayo";
		break;
	case 2:
		str = "Febraayo";
		break;
	case 3:
		str = "Maarso";
		break;
	case 4:
		str = "Abriil";
		break;
	case 5:
		str = "Maayo";
		break;
	case 6:
		str = "Juun";
		break;
	case 7:
		str = "Julay";
		break;
	case 8:
		str = "Ogost";
		break;
	case 9:
		str = "Setembar";
		break;
	case 10:
		str = "Oktoobar";
		break;
	case 11:
		str = "Noofeembar";
		break;
	case 12:
		str = "Desembar";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
};
datetimelang_somali_MonthName.alltoUpperCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Jannaayo";
		break;
	case 2:
		str = "Febraayo";
		break;
	case 3:
		str = "Maarso";
		break;
	case 4:
		str = "Abriil";
		break;
	case 5:
		str = "Maayo";
		break;
	case 6:
		str = "Juun";
		break;
	case 7:
		str = "Julay";
		break;
	case 8:
		str = "Ogost";
		break;
	case 9:
		str = "Setembar";
		break;
	case 10:
		str = "Oktoobar";
		break;
	case 11:
		str = "Noofeembar";
		break;
	case 12:
		str = "Desembar";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
};
datetimelang_somali_MonthName.toString = function(this1) {
	var m = this1;
	switch(m) {
	case 1:
		return "Jannaayo";
	case 2:
		return "Febraayo";
	case 3:
		return "Maarso";
	case 4:
		return "Abriil";
	case 5:
		return "Maayo";
	case 6:
		return "Juun";
	case 7:
		return "Julay";
	case 8:
		return "Ogost";
	case 9:
		return "Setembar";
	case 10:
		return "Oktoobar";
	case 11:
		return "Noofeembar";
	case 12:
		return "Desembar";
	}
};
datetimelang_somali_MonthName.stringAllUpFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Jannaayo";
		break;
	case 2:
		str = "Febraayo";
		break;
	case 3:
		str = "Maarso";
		break;
	case 4:
		str = "Abriil";
		break;
	case 5:
		str = "Maayo";
		break;
	case 6:
		str = "Juun";
		break;
	case 7:
		str = "Julay";
		break;
	case 8:
		str = "Ogost";
		break;
	case 9:
		str = "Setembar";
		break;
	case 10:
		str = "Oktoobar";
		break;
	case 11:
		str = "Noofeembar";
		break;
	case 12:
		str = "Desembar";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
	return s;
};
datetimelang_somali_MonthName.stringLowerFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Jannaayo";
		break;
	case 2:
		str = "Febraayo";
		break;
	case 3:
		str = "Maarso";
		break;
	case 4:
		str = "Abriil";
		break;
	case 5:
		str = "Maayo";
		break;
	case 6:
		str = "Juun";
		break;
	case 7:
		str = "Julay";
		break;
	case 8:
		str = "Ogost";
		break;
	case 9:
		str = "Setembar";
		break;
	case 10:
		str = "Oktoobar";
		break;
	case 11:
		str = "Noofeembar";
		break;
	case 12:
		str = "Desembar";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
	return s;
};
datetimelang_somali_MonthName.stringShortFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Jannaayo";
		break;
	case 2:
		str = "Febraayo";
		break;
	case 3:
		str = "Maarso";
		break;
	case 4:
		str = "Abriil";
		break;
	case 5:
		str = "Maayo";
		break;
	case 6:
		str = "Juun";
		break;
	case 7:
		str = "Julay";
		break;
	case 8:
		str = "Ogost";
		break;
	case 9:
		str = "Setembar";
		break;
	case 10:
		str = "Oktoobar";
		break;
	case 11:
		str = "Noofeembar";
		break;
	case 12:
		str = "Desembar";
		break;
	}
	var s = len1 == -1 ? str : HxOverrides.substr(str,0,len1);
	return s;
};
datetimelang_somali_MonthName.stringFromDateTime = function(dt) {
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var s;
	var m1 = m;
	switch(m1) {
	case 1:
		s = "Jannaayo";
		break;
	case 2:
		s = "Febraayo";
		break;
	case 3:
		s = "Maarso";
		break;
	case 4:
		s = "Abriil";
		break;
	case 5:
		s = "Maayo";
		break;
	case 6:
		s = "Juun";
		break;
	case 7:
		s = "Julay";
		break;
	case 8:
		s = "Ogost";
		break;
	case 9:
		s = "Setembar";
		break;
	case 10:
		s = "Oktoobar";
		break;
	case 11:
		s = "Noofeembar";
		break;
	case 12:
		s = "Desembar";
		break;
	}
	return s;
};
var datetimelang_spanish_DayName = {};
datetimelang_spanish_DayName._new = function(d) {
	var this1 = d;
	return this1;
};
datetimelang_spanish_DayName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "domingo":
		return 0;
	case "jueves":
		return 4;
	case "lunes":
		return 1;
	case "martes":
		return 2;
	case "miercoles":
		return 3;
	case "miércoles":
		return 3;
	case "sabado":
		return 6;
	case "sábado":
		return 6;
	case "viernes":
		return 5;
	default:
		return null;
	}
};
datetimelang_spanish_DayName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Domingo";
		break;
	case 1:
		str = "Lunes";
		break;
	case 2:
		str = "Martes";
		break;
	case 3:
		str = "Mieroles";
		break;
	case 4:
		str = "Jueves";
		break;
	case 5:
		str = "Viernes";
		break;
	case 6:
		str = "Sábado";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_spanish_DayName.toLowerCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Domingo";
		break;
	case 1:
		str = "Lunes";
		break;
	case 2:
		str = "Martes";
		break;
	case 3:
		str = "Mieroles";
		break;
	case 4:
		str = "Jueves";
		break;
	case 5:
		str = "Viernes";
		break;
	case 6:
		str = "Sábado";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
};
datetimelang_spanish_DayName.alltoUpperCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Domingo";
		break;
	case 1:
		str = "Lunes";
		break;
	case 2:
		str = "Martes";
		break;
	case 3:
		str = "Mieroles";
		break;
	case 4:
		str = "Jueves";
		break;
	case 5:
		str = "Viernes";
		break;
	case 6:
		str = "Sábado";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
};
datetimelang_spanish_DayName.toString = function(this1) {
	var d = this1;
	switch(d) {
	case 0:
		return "Domingo";
	case 1:
		return "Lunes";
	case 2:
		return "Martes";
	case 3:
		return "Mieroles";
	case 4:
		return "Jueves";
	case 5:
		return "Viernes";
	case 6:
		return "Sábado";
	}
};
datetimelang_spanish_DayName.stringAllUpFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Domingo";
		break;
	case 1:
		str = "Lunes";
		break;
	case 2:
		str = "Martes";
		break;
	case 3:
		str = "Mieroles";
		break;
	case 4:
		str = "Jueves";
		break;
	case 5:
		str = "Viernes";
		break;
	case 6:
		str = "Sábado";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
	return s;
};
datetimelang_spanish_DayName.stringLowerFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Domingo";
		break;
	case 1:
		str = "Lunes";
		break;
	case 2:
		str = "Martes";
		break;
	case 3:
		str = "Mieroles";
		break;
	case 4:
		str = "Jueves";
		break;
	case 5:
		str = "Viernes";
		break;
	case 6:
		str = "Sábado";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
	return s;
};
datetimelang_spanish_DayName.stringShortFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Domingo";
		break;
	case 1:
		str = "Lunes";
		break;
	case 2:
		str = "Martes";
		break;
	case 3:
		str = "Mieroles";
		break;
	case 4:
		str = "Jueves";
		break;
	case 5:
		str = "Viernes";
		break;
	case 6:
		str = "Sábado";
		break;
	}
	var s = len1 == -1 ? str : HxOverrides.substr(str,0,len1);
	return s;
};
datetimelang_spanish_DayName.stringFromDateTime = function(dt,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var s;
	var d1 = d;
	switch(d1) {
	case 0:
		s = "Domingo";
		break;
	case 1:
		s = "Lunes";
		break;
	case 2:
		s = "Martes";
		break;
	case 3:
		s = "Mieroles";
		break;
	case 4:
		s = "Jueves";
		break;
	case 5:
		s = "Viernes";
		break;
	case 6:
		s = "Sábado";
		break;
	}
	return s;
};
var datetimelang_spanish_MonthName = {};
datetimelang_spanish_MonthName._new = function(m) {
	var this1 = m;
	return this1;
};
datetimelang_spanish_MonthName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "abril":
		return 4;
	case "agosto":
		return 8;
	case "diciembre":
		return 12;
	case "enero":
		return 1;
	case "febrero":
		return 2;
	case "julio":
		return 7;
	case "junio":
		return 6;
	case "marzo":
		return 3;
	case "mayo":
		return 5;
	case "noviembre":
		return 11;
	case "octubre":
		return 10;
	case "septiembre":
		return 9;
	default:
		return null;
	}
};
datetimelang_spanish_MonthName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Enero";
		break;
	case 2:
		str = "Febrero";
		break;
	case 3:
		str = "Marzo";
		break;
	case 4:
		str = "Abril";
		break;
	case 5:
		str = "Mayo";
		break;
	case 6:
		str = "Junio";
		break;
	case 7:
		str = "Julio";
		break;
	case 8:
		str = "Agosto";
		break;
	case 9:
		str = "Septiembre";
		break;
	case 10:
		str = "Octubre";
		break;
	case 11:
		str = "Noviembre";
		break;
	case 12:
		str = "Diciembre";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_spanish_MonthName.toLowerCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Enero";
		break;
	case 2:
		str = "Febrero";
		break;
	case 3:
		str = "Marzo";
		break;
	case 4:
		str = "Abril";
		break;
	case 5:
		str = "Mayo";
		break;
	case 6:
		str = "Junio";
		break;
	case 7:
		str = "Julio";
		break;
	case 8:
		str = "Agosto";
		break;
	case 9:
		str = "Septiembre";
		break;
	case 10:
		str = "Octubre";
		break;
	case 11:
		str = "Noviembre";
		break;
	case 12:
		str = "Diciembre";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
};
datetimelang_spanish_MonthName.alltoUpperCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Enero";
		break;
	case 2:
		str = "Febrero";
		break;
	case 3:
		str = "Marzo";
		break;
	case 4:
		str = "Abril";
		break;
	case 5:
		str = "Mayo";
		break;
	case 6:
		str = "Junio";
		break;
	case 7:
		str = "Julio";
		break;
	case 8:
		str = "Agosto";
		break;
	case 9:
		str = "Septiembre";
		break;
	case 10:
		str = "Octubre";
		break;
	case 11:
		str = "Noviembre";
		break;
	case 12:
		str = "Diciembre";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
};
datetimelang_spanish_MonthName.toString = function(this1) {
	var m = this1;
	switch(m) {
	case 1:
		return "Enero";
	case 2:
		return "Febrero";
	case 3:
		return "Marzo";
	case 4:
		return "Abril";
	case 5:
		return "Mayo";
	case 6:
		return "Junio";
	case 7:
		return "Julio";
	case 8:
		return "Agosto";
	case 9:
		return "Septiembre";
	case 10:
		return "Octubre";
	case 11:
		return "Noviembre";
	case 12:
		return "Diciembre";
	}
};
datetimelang_spanish_MonthName.stringAllUpFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Enero";
		break;
	case 2:
		str = "Febrero";
		break;
	case 3:
		str = "Marzo";
		break;
	case 4:
		str = "Abril";
		break;
	case 5:
		str = "Mayo";
		break;
	case 6:
		str = "Junio";
		break;
	case 7:
		str = "Julio";
		break;
	case 8:
		str = "Agosto";
		break;
	case 9:
		str = "Septiembre";
		break;
	case 10:
		str = "Octubre";
		break;
	case 11:
		str = "Noviembre";
		break;
	case 12:
		str = "Diciembre";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
	return s;
};
datetimelang_spanish_MonthName.stringLowerFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Enero";
		break;
	case 2:
		str = "Febrero";
		break;
	case 3:
		str = "Marzo";
		break;
	case 4:
		str = "Abril";
		break;
	case 5:
		str = "Mayo";
		break;
	case 6:
		str = "Junio";
		break;
	case 7:
		str = "Julio";
		break;
	case 8:
		str = "Agosto";
		break;
	case 9:
		str = "Septiembre";
		break;
	case 10:
		str = "Octubre";
		break;
	case 11:
		str = "Noviembre";
		break;
	case 12:
		str = "Diciembre";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
	return s;
};
datetimelang_spanish_MonthName.stringShortFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Enero";
		break;
	case 2:
		str = "Febrero";
		break;
	case 3:
		str = "Marzo";
		break;
	case 4:
		str = "Abril";
		break;
	case 5:
		str = "Mayo";
		break;
	case 6:
		str = "Junio";
		break;
	case 7:
		str = "Julio";
		break;
	case 8:
		str = "Agosto";
		break;
	case 9:
		str = "Septiembre";
		break;
	case 10:
		str = "Octubre";
		break;
	case 11:
		str = "Noviembre";
		break;
	case 12:
		str = "Diciembre";
		break;
	}
	var s = len1 == -1 ? str : HxOverrides.substr(str,0,len1);
	return s;
};
datetimelang_spanish_MonthName.stringFromDateTime = function(dt) {
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var s;
	var m1 = m;
	switch(m1) {
	case 1:
		s = "Enero";
		break;
	case 2:
		s = "Febrero";
		break;
	case 3:
		s = "Marzo";
		break;
	case 4:
		s = "Abril";
		break;
	case 5:
		s = "Mayo";
		break;
	case 6:
		s = "Junio";
		break;
	case 7:
		s = "Julio";
		break;
	case 8:
		s = "Agosto";
		break;
	case 9:
		s = "Septiembre";
		break;
	case 10:
		s = "Octubre";
		break;
	case 11:
		s = "Noviembre";
		break;
	case 12:
		s = "Diciembre";
		break;
	}
	return s;
};
var datetimelang_swedish_DayName = {};
datetimelang_swedish_DayName._new = function(d) {
	var this1 = d;
	return this1;
};
datetimelang_swedish_DayName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "fredag":
		return 5;
	case "lordag":
		return 6;
	case "lördag":
		return 6;
	case "mandag":
		return 1;
	case "måndag":
		return 1;
	case "onsdag":
		return 3;
	case "sondag":
		return 0;
	case "söndag":
		return 0;
	case "tisdag":
		return 2;
	case "torsdag":
		return 4;
	default:
		return null;
	}
};
datetimelang_swedish_DayName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Söndag";
		break;
	case 1:
		str = "Måndag";
		break;
	case 2:
		str = "Tisdag";
		break;
	case 3:
		str = "Onsdag";
		break;
	case 4:
		str = "Torsdag";
		break;
	case 5:
		str = "Fredag";
		break;
	case 6:
		str = "Lördag";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_swedish_DayName.toLowerCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Söndag";
		break;
	case 1:
		str = "Måndag";
		break;
	case 2:
		str = "Tisdag";
		break;
	case 3:
		str = "Onsdag";
		break;
	case 4:
		str = "Torsdag";
		break;
	case 5:
		str = "Fredag";
		break;
	case 6:
		str = "Lördag";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
};
datetimelang_swedish_DayName.alltoUpperCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Söndag";
		break;
	case 1:
		str = "Måndag";
		break;
	case 2:
		str = "Tisdag";
		break;
	case 3:
		str = "Onsdag";
		break;
	case 4:
		str = "Torsdag";
		break;
	case 5:
		str = "Fredag";
		break;
	case 6:
		str = "Lördag";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
};
datetimelang_swedish_DayName.toString = function(this1) {
	var d = this1;
	switch(d) {
	case 0:
		return "Söndag";
	case 1:
		return "Måndag";
	case 2:
		return "Tisdag";
	case 3:
		return "Onsdag";
	case 4:
		return "Torsdag";
	case 5:
		return "Fredag";
	case 6:
		return "Lördag";
	}
};
datetimelang_swedish_DayName.stringAllUpFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Söndag";
		break;
	case 1:
		str = "Måndag";
		break;
	case 2:
		str = "Tisdag";
		break;
	case 3:
		str = "Onsdag";
		break;
	case 4:
		str = "Torsdag";
		break;
	case 5:
		str = "Fredag";
		break;
	case 6:
		str = "Lördag";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
	return s;
};
datetimelang_swedish_DayName.stringLowerFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Söndag";
		break;
	case 1:
		str = "Måndag";
		break;
	case 2:
		str = "Tisdag";
		break;
	case 3:
		str = "Onsdag";
		break;
	case 4:
		str = "Torsdag";
		break;
	case 5:
		str = "Fredag";
		break;
	case 6:
		str = "Lördag";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
	return s;
};
datetimelang_swedish_DayName.stringShortFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Söndag";
		break;
	case 1:
		str = "Måndag";
		break;
	case 2:
		str = "Tisdag";
		break;
	case 3:
		str = "Onsdag";
		break;
	case 4:
		str = "Torsdag";
		break;
	case 5:
		str = "Fredag";
		break;
	case 6:
		str = "Lördag";
		break;
	}
	var s = len1 == -1 ? str : HxOverrides.substr(str,0,len1);
	return s;
};
datetimelang_swedish_DayName.stringFromDateTime = function(dt,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var s;
	var d1 = d;
	switch(d1) {
	case 0:
		s = "Söndag";
		break;
	case 1:
		s = "Måndag";
		break;
	case 2:
		s = "Tisdag";
		break;
	case 3:
		s = "Onsdag";
		break;
	case 4:
		s = "Torsdag";
		break;
	case 5:
		s = "Fredag";
		break;
	case 6:
		s = "Lördag";
		break;
	}
	return s;
};
var datetimelang_swedish_MonthName = {};
datetimelang_swedish_MonthName._new = function(m) {
	var this1 = m;
	return this1;
};
datetimelang_swedish_MonthName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "april":
		return 4;
	case "augusti":
		return 8;
	case "december":
		return 12;
	case "februari":
		return 2;
	case "januari":
		return 1;
	case "juli":
		return 7;
	case "juni":
		return 6;
	case "maj":
		return 5;
	case "mars":
		return 3;
	case "november":
		return 11;
	case "oktober":
		return 10;
	case "september":
		return 9;
	default:
		return null;
	}
};
datetimelang_swedish_MonthName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Januari";
		break;
	case 2:
		str = "Februari";
		break;
	case 3:
		str = "Mars";
		break;
	case 4:
		str = "April";
		break;
	case 5:
		str = "Maj";
		break;
	case 6:
		str = "Juni";
		break;
	case 7:
		str = "Juli";
		break;
	case 8:
		str = "Augusti";
		break;
	case 9:
		str = "September";
		break;
	case 10:
		str = "Oktober";
		break;
	case 11:
		str = "November";
		break;
	case 12:
		str = "December";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_swedish_MonthName.toLowerCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Januari";
		break;
	case 2:
		str = "Februari";
		break;
	case 3:
		str = "Mars";
		break;
	case 4:
		str = "April";
		break;
	case 5:
		str = "Maj";
		break;
	case 6:
		str = "Juni";
		break;
	case 7:
		str = "Juli";
		break;
	case 8:
		str = "Augusti";
		break;
	case 9:
		str = "September";
		break;
	case 10:
		str = "Oktober";
		break;
	case 11:
		str = "November";
		break;
	case 12:
		str = "December";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
};
datetimelang_swedish_MonthName.alltoUpperCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Januari";
		break;
	case 2:
		str = "Februari";
		break;
	case 3:
		str = "Mars";
		break;
	case 4:
		str = "April";
		break;
	case 5:
		str = "Maj";
		break;
	case 6:
		str = "Juni";
		break;
	case 7:
		str = "Juli";
		break;
	case 8:
		str = "Augusti";
		break;
	case 9:
		str = "September";
		break;
	case 10:
		str = "Oktober";
		break;
	case 11:
		str = "November";
		break;
	case 12:
		str = "December";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
};
datetimelang_swedish_MonthName.toString = function(this1) {
	var m = this1;
	switch(m) {
	case 1:
		return "Januari";
	case 2:
		return "Februari";
	case 3:
		return "Mars";
	case 4:
		return "April";
	case 5:
		return "Maj";
	case 6:
		return "Juni";
	case 7:
		return "Juli";
	case 8:
		return "Augusti";
	case 9:
		return "September";
	case 10:
		return "Oktober";
	case 11:
		return "November";
	case 12:
		return "December";
	}
};
datetimelang_swedish_MonthName.stringAllUpFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Januari";
		break;
	case 2:
		str = "Februari";
		break;
	case 3:
		str = "Mars";
		break;
	case 4:
		str = "April";
		break;
	case 5:
		str = "Maj";
		break;
	case 6:
		str = "Juni";
		break;
	case 7:
		str = "Juli";
		break;
	case 8:
		str = "Augusti";
		break;
	case 9:
		str = "September";
		break;
	case 10:
		str = "Oktober";
		break;
	case 11:
		str = "November";
		break;
	case 12:
		str = "December";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
	return s;
};
datetimelang_swedish_MonthName.stringLowerFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Januari";
		break;
	case 2:
		str = "Februari";
		break;
	case 3:
		str = "Mars";
		break;
	case 4:
		str = "April";
		break;
	case 5:
		str = "Maj";
		break;
	case 6:
		str = "Juni";
		break;
	case 7:
		str = "Juli";
		break;
	case 8:
		str = "Augusti";
		break;
	case 9:
		str = "September";
		break;
	case 10:
		str = "Oktober";
		break;
	case 11:
		str = "November";
		break;
	case 12:
		str = "December";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
	return s;
};
datetimelang_swedish_MonthName.stringShortFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Januari";
		break;
	case 2:
		str = "Februari";
		break;
	case 3:
		str = "Mars";
		break;
	case 4:
		str = "April";
		break;
	case 5:
		str = "Maj";
		break;
	case 6:
		str = "Juni";
		break;
	case 7:
		str = "Juli";
		break;
	case 8:
		str = "Augusti";
		break;
	case 9:
		str = "September";
		break;
	case 10:
		str = "Oktober";
		break;
	case 11:
		str = "November";
		break;
	case 12:
		str = "December";
		break;
	}
	var s = len1 == -1 ? str : HxOverrides.substr(str,0,len1);
	return s;
};
datetimelang_swedish_MonthName.stringFromDateTime = function(dt) {
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var s;
	var m1 = m;
	switch(m1) {
	case 1:
		s = "Januari";
		break;
	case 2:
		s = "Februari";
		break;
	case 3:
		s = "Mars";
		break;
	case 4:
		s = "April";
		break;
	case 5:
		s = "Maj";
		break;
	case 6:
		s = "Juni";
		break;
	case 7:
		s = "Juli";
		break;
	case 8:
		s = "Augusti";
		break;
	case 9:
		s = "September";
		break;
	case 10:
		s = "Oktober";
		break;
	case 11:
		s = "November";
		break;
	case 12:
		s = "December";
		break;
	}
	return s;
};
var datetimelang_turkish_DayName = {};
datetimelang_turkish_DayName._new = function(d) {
	var this1 = d;
	return this1;
};
datetimelang_turkish_DayName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "carsamba":
		return 3;
	case "cuma":
		return 5;
	case "cumartesi":
		return 6;
	case "pazar":
		return 0;
	case "pazartesi":
		return 1;
	case "persembe":
		return 4;
	case "perşembe":
		return 4;
	case "sali":
		return 2;
	case "salı":
		return 2;
	case "çarşamba":
		return 3;
	default:
		return null;
	}
};
datetimelang_turkish_DayName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Pazar";
		break;
	case 1:
		str = "Pazartesi";
		break;
	case 2:
		str = "Salı";
		break;
	case 3:
		str = "Çarşamba";
		break;
	case 4:
		str = "Perşembe";
		break;
	case 5:
		str = "Cuma";
		break;
	case 6:
		str = "Cumartesi";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_turkish_DayName.toLowerCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Pazar";
		break;
	case 1:
		str = "Pazartesi";
		break;
	case 2:
		str = "Salı";
		break;
	case 3:
		str = "Çarşamba";
		break;
	case 4:
		str = "Perşembe";
		break;
	case 5:
		str = "Cuma";
		break;
	case 6:
		str = "Cumartesi";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
};
datetimelang_turkish_DayName.alltoUpperCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Pazar";
		break;
	case 1:
		str = "Pazartesi";
		break;
	case 2:
		str = "Salı";
		break;
	case 3:
		str = "Çarşamba";
		break;
	case 4:
		str = "Perşembe";
		break;
	case 5:
		str = "Cuma";
		break;
	case 6:
		str = "Cumartesi";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
};
datetimelang_turkish_DayName.toString = function(this1) {
	var d = this1;
	switch(d) {
	case 0:
		return "Pazar";
	case 1:
		return "Pazartesi";
	case 2:
		return "Salı";
	case 3:
		return "Çarşamba";
	case 4:
		return "Perşembe";
	case 5:
		return "Cuma";
	case 6:
		return "Cumartesi";
	}
};
datetimelang_turkish_DayName.stringAllUpFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Pazar";
		break;
	case 1:
		str = "Pazartesi";
		break;
	case 2:
		str = "Salı";
		break;
	case 3:
		str = "Çarşamba";
		break;
	case 4:
		str = "Perşembe";
		break;
	case 5:
		str = "Cuma";
		break;
	case 6:
		str = "Cumartesi";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
	return s;
};
datetimelang_turkish_DayName.stringLowerFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Pazar";
		break;
	case 1:
		str = "Pazartesi";
		break;
	case 2:
		str = "Salı";
		break;
	case 3:
		str = "Çarşamba";
		break;
	case 4:
		str = "Perşembe";
		break;
	case 5:
		str = "Cuma";
		break;
	case 6:
		str = "Cumartesi";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
	return s;
};
datetimelang_turkish_DayName.stringShortFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Pazar";
		break;
	case 1:
		str = "Pazartesi";
		break;
	case 2:
		str = "Salı";
		break;
	case 3:
		str = "Çarşamba";
		break;
	case 4:
		str = "Perşembe";
		break;
	case 5:
		str = "Cuma";
		break;
	case 6:
		str = "Cumartesi";
		break;
	}
	var s = len1 == -1 ? str : HxOverrides.substr(str,0,len1);
	return s;
};
datetimelang_turkish_DayName.stringFromDateTime = function(dt,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var s;
	var d1 = d;
	switch(d1) {
	case 0:
		s = "Pazar";
		break;
	case 1:
		s = "Pazartesi";
		break;
	case 2:
		s = "Salı";
		break;
	case 3:
		s = "Çarşamba";
		break;
	case 4:
		s = "Perşembe";
		break;
	case 5:
		s = "Cuma";
		break;
	case 6:
		s = "Cumartesi";
		break;
	}
	return s;
};
var datetimelang_turkish_MonthName = {};
datetimelang_turkish_MonthName._new = function(m) {
	var this1 = m;
	return this1;
};
datetimelang_turkish_MonthName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "agustos":
		return 8;
	case "aralik":
		return 12;
	case "aralık":
		return 12;
	case "ağustos":
		return 8;
	case "ekim":
		return 10;
	case "eylul":
		return 9;
	case "eylül":
		return 9;
	case "haziran":
		return 6;
	case "kasim":
		return 11;
	case "kasım":
		return 11;
	case "mart":
		return 3;
	case "mayis":
		return 5;
	case "nisan":
		return 4;
	case "ocak":
		return 1;
	case "subat":
		return 2;
	case "temmuz":
		return 7;
	case "şubat":
		return 2;
	default:
		return null;
	}
};
datetimelang_turkish_MonthName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Ocak";
		break;
	case 2:
		str = "Şubat";
		break;
	case 3:
		str = "Mart";
		break;
	case 4:
		str = "Nisan";
		break;
	case 5:
		str = "Mayis";
		break;
	case 6:
		str = "Haziran";
		break;
	case 7:
		str = "Temmuz";
		break;
	case 8:
		str = "Ağustos";
		break;
	case 9:
		str = "Eylül";
		break;
	case 10:
		str = "Ekim";
		break;
	case 11:
		str = "Kasım";
		break;
	case 12:
		str = "Aralık";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_turkish_MonthName.toLowerCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Ocak";
		break;
	case 2:
		str = "Şubat";
		break;
	case 3:
		str = "Mart";
		break;
	case 4:
		str = "Nisan";
		break;
	case 5:
		str = "Mayis";
		break;
	case 6:
		str = "Haziran";
		break;
	case 7:
		str = "Temmuz";
		break;
	case 8:
		str = "Ağustos";
		break;
	case 9:
		str = "Eylül";
		break;
	case 10:
		str = "Ekim";
		break;
	case 11:
		str = "Kasım";
		break;
	case 12:
		str = "Aralık";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
};
datetimelang_turkish_MonthName.alltoUpperCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Ocak";
		break;
	case 2:
		str = "Şubat";
		break;
	case 3:
		str = "Mart";
		break;
	case 4:
		str = "Nisan";
		break;
	case 5:
		str = "Mayis";
		break;
	case 6:
		str = "Haziran";
		break;
	case 7:
		str = "Temmuz";
		break;
	case 8:
		str = "Ağustos";
		break;
	case 9:
		str = "Eylül";
		break;
	case 10:
		str = "Ekim";
		break;
	case 11:
		str = "Kasım";
		break;
	case 12:
		str = "Aralık";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
};
datetimelang_turkish_MonthName.toString = function(this1) {
	var m = this1;
	switch(m) {
	case 1:
		return "Ocak";
	case 2:
		return "Şubat";
	case 3:
		return "Mart";
	case 4:
		return "Nisan";
	case 5:
		return "Mayis";
	case 6:
		return "Haziran";
	case 7:
		return "Temmuz";
	case 8:
		return "Ağustos";
	case 9:
		return "Eylül";
	case 10:
		return "Ekim";
	case 11:
		return "Kasım";
	case 12:
		return "Aralık";
	}
};
datetimelang_turkish_MonthName.stringAllUpFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Ocak";
		break;
	case 2:
		str = "Şubat";
		break;
	case 3:
		str = "Mart";
		break;
	case 4:
		str = "Nisan";
		break;
	case 5:
		str = "Mayis";
		break;
	case 6:
		str = "Haziran";
		break;
	case 7:
		str = "Temmuz";
		break;
	case 8:
		str = "Ağustos";
		break;
	case 9:
		str = "Eylül";
		break;
	case 10:
		str = "Ekim";
		break;
	case 11:
		str = "Kasım";
		break;
	case 12:
		str = "Aralık";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
	return s;
};
datetimelang_turkish_MonthName.stringLowerFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Ocak";
		break;
	case 2:
		str = "Şubat";
		break;
	case 3:
		str = "Mart";
		break;
	case 4:
		str = "Nisan";
		break;
	case 5:
		str = "Mayis";
		break;
	case 6:
		str = "Haziran";
		break;
	case 7:
		str = "Temmuz";
		break;
	case 8:
		str = "Ağustos";
		break;
	case 9:
		str = "Eylül";
		break;
	case 10:
		str = "Ekim";
		break;
	case 11:
		str = "Kasım";
		break;
	case 12:
		str = "Aralık";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
	return s;
};
datetimelang_turkish_MonthName.stringShortFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Ocak";
		break;
	case 2:
		str = "Şubat";
		break;
	case 3:
		str = "Mart";
		break;
	case 4:
		str = "Nisan";
		break;
	case 5:
		str = "Mayis";
		break;
	case 6:
		str = "Haziran";
		break;
	case 7:
		str = "Temmuz";
		break;
	case 8:
		str = "Ağustos";
		break;
	case 9:
		str = "Eylül";
		break;
	case 10:
		str = "Ekim";
		break;
	case 11:
		str = "Kasım";
		break;
	case 12:
		str = "Aralık";
		break;
	}
	var s = len1 == -1 ? str : HxOverrides.substr(str,0,len1);
	return s;
};
datetimelang_turkish_MonthName.stringFromDateTime = function(dt) {
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var s;
	var m1 = m;
	switch(m1) {
	case 1:
		s = "Ocak";
		break;
	case 2:
		s = "Şubat";
		break;
	case 3:
		s = "Mart";
		break;
	case 4:
		s = "Nisan";
		break;
	case 5:
		s = "Mayis";
		break;
	case 6:
		s = "Haziran";
		break;
	case 7:
		s = "Temmuz";
		break;
	case 8:
		s = "Ağustos";
		break;
	case 9:
		s = "Eylül";
		break;
	case 10:
		s = "Ekim";
		break;
	case 11:
		s = "Kasım";
		break;
	case 12:
		s = "Aralık";
		break;
	}
	return s;
};
var datetimelang_util_Demo = function() {
	var this1 = Math.floor(new Date().getTime() / 1000) + 62135596800.0;
	var now = this1;
	var all = ["arabic","english","french","german","greek","hebrew","hindi","italian","norwegian","polish","portuguese","romanian","russian","somali","spanish","swedish","turkish","welsh"];
	var lang;
	var _g = 0;
	while(_g < all.length) {
		var country = all[_g];
		++_g;
		var this1 = country;
		lang = this1;
		var s = lang;
		s = "language " + s;
		haxe_Log.trace(s,{ fileName : "src/datetimelang/util/Demo.hx", lineNumber : 20, className : "datetimelang.util.Demo", methodName : "new"});
		var c = lang;
		var month;
		switch(c) {
		case "arabic":
			var days = ((now - 62135596800.0 - datetime_DateTime.yearStart(now)) / 86400 | 0) + 1;
			var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(now)) , Int);
			var s1;
			var m1 = m;
			switch(m1) {
			case 1:
				s1 = "يناير";
				break;
			case 2:
				s1 = "فبراير";
				break;
			case 3:
				s1 = "مارس";
				break;
			case 4:
				s1 = "أبريل";
				break;
			case 5:
				s1 = "مايو";
				break;
			case 6:
				s1 = "يونيو";
				break;
			case 7:
				s1 = "يوليه";
				break;
			case 8:
				s1 = "أغسطس";
				break;
			case 9:
				s1 = "سبتمبر";
				break;
			case 10:
				s1 = "أكتوبر";
				break;
			case 11:
				s1 = "نوفمبر";
				break;
			case 12:
				s1 = "ديسمبر";
				break;
			}
			month = s1;
			break;
		case "english":
			var days1 = ((now - 62135596800.0 - datetime_DateTime.yearStart(now)) / 86400 | 0) + 1;
			var m2 = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days1,datetime_DateTime.isLeapYear(now)) , Int);
			var s2;
			var m3 = m2;
			switch(m3) {
			case 1:
				s2 = "January";
				break;
			case 2:
				s2 = "February";
				break;
			case 3:
				s2 = "March";
				break;
			case 4:
				s2 = "April";
				break;
			case 5:
				s2 = "May";
				break;
			case 6:
				s2 = "June";
				break;
			case 7:
				s2 = "July";
				break;
			case 8:
				s2 = "August";
				break;
			case 9:
				s2 = "September";
				break;
			case 10:
				s2 = "October";
				break;
			case 11:
				s2 = "November";
				break;
			case 12:
				s2 = "December";
				break;
			}
			month = s2;
			break;
		case "french":
			var days2 = ((now - 62135596800.0 - datetime_DateTime.yearStart(now)) / 86400 | 0) + 1;
			var m4 = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days2,datetime_DateTime.isLeapYear(now)) , Int);
			var s3;
			var m5 = m4;
			switch(m5) {
			case 1:
				s3 = "Janvier";
				break;
			case 2:
				s3 = "Février";
				break;
			case 3:
				s3 = "Mars";
				break;
			case 4:
				s3 = "Avril";
				break;
			case 5:
				s3 = "Mai";
				break;
			case 6:
				s3 = "Juin";
				break;
			case 7:
				s3 = "Juillet";
				break;
			case 8:
				s3 = "Août";
				break;
			case 9:
				s3 = "Septembre";
				break;
			case 10:
				s3 = "Octobre";
				break;
			case 11:
				s3 = "Novembre";
				break;
			case 12:
				s3 = "Décembre";
				break;
			}
			month = s3;
			break;
		case "german":
			var days3 = ((now - 62135596800.0 - datetime_DateTime.yearStart(now)) / 86400 | 0) + 1;
			var m6 = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days3,datetime_DateTime.isLeapYear(now)) , Int);
			var s4;
			var m7 = m6;
			switch(m7) {
			case 1:
				s4 = "Januar";
				break;
			case 2:
				s4 = "Februar";
				break;
			case 3:
				s4 = "März";
				break;
			case 4:
				s4 = "April";
				break;
			case 5:
				s4 = "Mai";
				break;
			case 6:
				s4 = "Juni";
				break;
			case 7:
				s4 = "Juli";
				break;
			case 8:
				s4 = "August";
				break;
			case 9:
				s4 = "September";
				break;
			case 10:
				s4 = "Oktober";
				break;
			case 11:
				s4 = "November";
				break;
			case 12:
				s4 = "Dezember";
				break;
			}
			month = s4;
			break;
		case "greek":
			var days4 = ((now - 62135596800.0 - datetime_DateTime.yearStart(now)) / 86400 | 0) + 1;
			var m8 = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days4,datetime_DateTime.isLeapYear(now)) , Int);
			var s5;
			var m9 = m8;
			switch(m9) {
			case 1:
				s5 = "Iανουάριος";
				break;
			case 2:
				s5 = "Φεβρουάριος";
				break;
			case 3:
				s5 = "Μάρτιος";
				break;
			case 4:
				s5 = "Aρίλιος";
				break;
			case 5:
				s5 = "Μάιος";
				break;
			case 6:
				s5 = "Iούνιος";
				break;
			case 7:
				s5 = "Iούλιος";
				break;
			case 8:
				s5 = "ύγουστος";
				break;
			case 9:
				s5 = "Σεπτέμβριος";
				break;
			case 10:
				s5 = "Oκτώβριος";
				break;
			case 11:
				s5 = "Νοέμβριος";
				break;
			case 12:
				s5 = "Δεκέμβριος";
				break;
			}
			month = s5;
			break;
		case "hebrew":
			var days5 = ((now - 62135596800.0 - datetime_DateTime.yearStart(now)) / 86400 | 0) + 1;
			var m10 = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days5,datetime_DateTime.isLeapYear(now)) , Int);
			var s6;
			var m11 = m10;
			switch(m11) {
			case 1:
				s6 = "ינואר";
				break;
			case 2:
				s6 = "פברואר";
				break;
			case 3:
				s6 = "מרץ";
				break;
			case 4:
				s6 = "אפריל";
				break;
			case 5:
				s6 = "מאי";
				break;
			case 6:
				s6 = "יוני";
				break;
			case 7:
				s6 = "יולי";
				break;
			case 8:
				s6 = "אוגוסט";
				break;
			case 9:
				s6 = "ספטמבר";
				break;
			case 10:
				s6 = "אוקטובר";
				break;
			case 11:
				s6 = "נובמבר";
				break;
			case 12:
				s6 = "דצמבר";
				break;
			}
			month = s6;
			break;
		case "hindi":
			var days6 = ((now - 62135596800.0 - datetime_DateTime.yearStart(now)) / 86400 | 0) + 1;
			var m12 = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days6,datetime_DateTime.isLeapYear(now)) , Int);
			var s7;
			var m13 = m12;
			switch(m13) {
			case 1:
				s7 = "जनवरी";
				break;
			case 2:
				s7 = "फ़रवरी";
				break;
			case 3:
				s7 = "मार्च";
				break;
			case 4:
				s7 = "अप्रैल";
				break;
			case 5:
				s7 = "मई";
				break;
			case 6:
				s7 = "जून";
				break;
			case 7:
				s7 = "जुलाई";
				break;
			case 8:
				s7 = "अगस्त";
				break;
			case 9:
				s7 = "सितंबर";
				break;
			case 10:
				s7 = "अक्टूबर";
				break;
			case 11:
				s7 = "नवंबर";
				break;
			case 12:
				s7 = "दिसंबर";
				break;
			}
			month = s7;
			break;
		case "italian":
			var days7 = ((now - 62135596800.0 - datetime_DateTime.yearStart(now)) / 86400 | 0) + 1;
			var m14 = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days7,datetime_DateTime.isLeapYear(now)) , Int);
			var s8;
			var m15 = m14;
			switch(m15) {
			case 1:
				s8 = "Gennaio";
				break;
			case 2:
				s8 = "Febbraio";
				break;
			case 3:
				s8 = "Marzo";
				break;
			case 4:
				s8 = "Aprile";
				break;
			case 5:
				s8 = "Maggio";
				break;
			case 6:
				s8 = "Giugno";
				break;
			case 7:
				s8 = "Luglio";
				break;
			case 8:
				s8 = "Agosto";
				break;
			case 9:
				s8 = "Settembre";
				break;
			case 10:
				s8 = "Ottobre";
				break;
			case 11:
				s8 = "Novembre";
				break;
			case 12:
				s8 = "Dicembre";
				break;
			}
			month = s8;
			break;
		case "norwegian":
			var days8 = ((now - 62135596800.0 - datetime_DateTime.yearStart(now)) / 86400 | 0) + 1;
			var m16 = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days8,datetime_DateTime.isLeapYear(now)) , Int);
			var s9;
			var m17 = m16;
			switch(m17) {
			case 1:
				s9 = "Januar";
				break;
			case 2:
				s9 = "Februar";
				break;
			case 3:
				s9 = "Mars";
				break;
			case 4:
				s9 = "April";
				break;
			case 5:
				s9 = "Mai";
				break;
			case 6:
				s9 = "Juni";
				break;
			case 7:
				s9 = "Juli";
				break;
			case 8:
				s9 = "August";
				break;
			case 9:
				s9 = "September";
				break;
			case 10:
				s9 = "Oktober";
				break;
			case 11:
				s9 = "November";
				break;
			case 12:
				s9 = "Desember";
				break;
			}
			month = s9;
			break;
		case "polish":
			var days9 = ((now - 62135596800.0 - datetime_DateTime.yearStart(now)) / 86400 | 0) + 1;
			var m18 = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days9,datetime_DateTime.isLeapYear(now)) , Int);
			var s10;
			var m19 = m18;
			switch(m19) {
			case 1:
				s10 = "Styczeń";
				break;
			case 2:
				s10 = "Luty";
				break;
			case 3:
				s10 = "Marzec";
				break;
			case 4:
				s10 = "Kwiecień";
				break;
			case 5:
				s10 = "Maj";
				break;
			case 6:
				s10 = "Czerwiec";
				break;
			case 7:
				s10 = "Lipiec";
				break;
			case 8:
				s10 = "Sierpień";
				break;
			case 9:
				s10 = "Wrzesień";
				break;
			case 10:
				s10 = "Październik";
				break;
			case 11:
				s10 = "Listopad";
				break;
			case 12:
				s10 = "Grudzień";
				break;
			}
			month = s10;
			break;
		case "portuguese":
			var days10 = ((now - 62135596800.0 - datetime_DateTime.yearStart(now)) / 86400 | 0) + 1;
			var m20 = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days10,datetime_DateTime.isLeapYear(now)) , Int);
			var s11;
			var m21 = m20;
			switch(m21) {
			case 1:
				s11 = "Janeiro";
				break;
			case 2:
				s11 = "Fevereiro";
				break;
			case 3:
				s11 = "Março";
				break;
			case 4:
				s11 = "Abril";
				break;
			case 5:
				s11 = "Maio";
				break;
			case 6:
				s11 = "Junho";
				break;
			case 7:
				s11 = "Julho";
				break;
			case 8:
				s11 = "Agosto";
				break;
			case 9:
				s11 = "Setembro";
				break;
			case 10:
				s11 = "Outubro";
				break;
			case 11:
				s11 = "Novembro";
				break;
			case 12:
				s11 = "Dezembro";
				break;
			}
			month = s11;
			break;
		case "romanian":
			var days11 = ((now - 62135596800.0 - datetime_DateTime.yearStart(now)) / 86400 | 0) + 1;
			var m22 = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days11,datetime_DateTime.isLeapYear(now)) , Int);
			var s12;
			var m23 = m22;
			switch(m23) {
			case 1:
				s12 = "Ianuarie";
				break;
			case 2:
				s12 = "Februarie";
				break;
			case 3:
				s12 = "Martie";
				break;
			case 4:
				s12 = "Aprilie";
				break;
			case 5:
				s12 = "Mai";
				break;
			case 6:
				s12 = "Iunie";
				break;
			case 7:
				s12 = "Iulie";
				break;
			case 8:
				s12 = "August";
				break;
			case 9:
				s12 = "Septembrie";
				break;
			case 10:
				s12 = "Octombrie";
				break;
			case 11:
				s12 = "Noiembrie";
				break;
			case 12:
				s12 = "Decembrie";
				break;
			}
			month = s12;
			break;
		case "russian":
			var days12 = ((now - 62135596800.0 - datetime_DateTime.yearStart(now)) / 86400 | 0) + 1;
			var m24 = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days12,datetime_DateTime.isLeapYear(now)) , Int);
			var s13;
			var m25 = m24;
			switch(m25) {
			case 1:
				s13 = "январь";
				break;
			case 2:
				s13 = "февраль";
				break;
			case 3:
				s13 = "март";
				break;
			case 4:
				s13 = "апрель";
				break;
			case 5:
				s13 = "май";
				break;
			case 6:
				s13 = "июнь";
				break;
			case 7:
				s13 = "июль";
				break;
			case 8:
				s13 = "август";
				break;
			case 9:
				s13 = "сентябрь";
				break;
			case 10:
				s13 = "октябрь";
				break;
			case 11:
				s13 = "ноябрь";
				break;
			case 12:
				s13 = "декабрь";
				break;
			}
			month = s13;
			break;
		case "somali":
			var days13 = ((now - 62135596800.0 - datetime_DateTime.yearStart(now)) / 86400 | 0) + 1;
			var m26 = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days13,datetime_DateTime.isLeapYear(now)) , Int);
			var s14;
			var m27 = m26;
			switch(m27) {
			case 1:
				s14 = "Jannaayo";
				break;
			case 2:
				s14 = "Febraayo";
				break;
			case 3:
				s14 = "Maarso";
				break;
			case 4:
				s14 = "Abriil";
				break;
			case 5:
				s14 = "Maayo";
				break;
			case 6:
				s14 = "Juun";
				break;
			case 7:
				s14 = "Julay";
				break;
			case 8:
				s14 = "Ogost";
				break;
			case 9:
				s14 = "Setembar";
				break;
			case 10:
				s14 = "Oktoobar";
				break;
			case 11:
				s14 = "Noofeembar";
				break;
			case 12:
				s14 = "Desembar";
				break;
			}
			month = s14;
			break;
		case "spanish":
			var days14 = ((now - 62135596800.0 - datetime_DateTime.yearStart(now)) / 86400 | 0) + 1;
			var m28 = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days14,datetime_DateTime.isLeapYear(now)) , Int);
			var s15;
			var m29 = m28;
			switch(m29) {
			case 1:
				s15 = "Enero";
				break;
			case 2:
				s15 = "Febrero";
				break;
			case 3:
				s15 = "Marzo";
				break;
			case 4:
				s15 = "Abril";
				break;
			case 5:
				s15 = "Mayo";
				break;
			case 6:
				s15 = "Junio";
				break;
			case 7:
				s15 = "Julio";
				break;
			case 8:
				s15 = "Agosto";
				break;
			case 9:
				s15 = "Septiembre";
				break;
			case 10:
				s15 = "Octubre";
				break;
			case 11:
				s15 = "Noviembre";
				break;
			case 12:
				s15 = "Diciembre";
				break;
			}
			month = s15;
			break;
		case "swedish":
			var days15 = ((now - 62135596800.0 - datetime_DateTime.yearStart(now)) / 86400 | 0) + 1;
			var m30 = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days15,datetime_DateTime.isLeapYear(now)) , Int);
			var s16;
			var m31 = m30;
			switch(m31) {
			case 1:
				s16 = "Januari";
				break;
			case 2:
				s16 = "Februari";
				break;
			case 3:
				s16 = "Mars";
				break;
			case 4:
				s16 = "April";
				break;
			case 5:
				s16 = "Maj";
				break;
			case 6:
				s16 = "Juni";
				break;
			case 7:
				s16 = "Juli";
				break;
			case 8:
				s16 = "Augusti";
				break;
			case 9:
				s16 = "September";
				break;
			case 10:
				s16 = "Oktober";
				break;
			case 11:
				s16 = "November";
				break;
			case 12:
				s16 = "December";
				break;
			}
			month = s16;
			break;
		case "turkish":
			var days16 = ((now - 62135596800.0 - datetime_DateTime.yearStart(now)) / 86400 | 0) + 1;
			var m32 = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days16,datetime_DateTime.isLeapYear(now)) , Int);
			var s17;
			var m33 = m32;
			switch(m33) {
			case 1:
				s17 = "Ocak";
				break;
			case 2:
				s17 = "Şubat";
				break;
			case 3:
				s17 = "Mart";
				break;
			case 4:
				s17 = "Nisan";
				break;
			case 5:
				s17 = "Mayis";
				break;
			case 6:
				s17 = "Haziran";
				break;
			case 7:
				s17 = "Temmuz";
				break;
			case 8:
				s17 = "Ağustos";
				break;
			case 9:
				s17 = "Eylül";
				break;
			case 10:
				s17 = "Ekim";
				break;
			case 11:
				s17 = "Kasım";
				break;
			case 12:
				s17 = "Aralık";
				break;
			}
			month = s17;
			break;
		case "welsh":
			var days17 = ((now - 62135596800.0 - datetime_DateTime.yearStart(now)) / 86400 | 0) + 1;
			var m34 = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days17,datetime_DateTime.isLeapYear(now)) , Int);
			var s18;
			var m35 = m34;
			switch(m35) {
			case 1:
				s18 = "Ionawr";
				break;
			case 2:
				s18 = "Chwefror";
				break;
			case 3:
				s18 = "Mawrth";
				break;
			case 4:
				s18 = "Ebrill";
				break;
			case 5:
				s18 = "Mai";
				break;
			case 6:
				s18 = "Mehefin";
				break;
			case 7:
				s18 = "Gorffennaf";
				break;
			case 8:
				s18 = "Awst";
				break;
			case 9:
				s18 = "Medi";
				break;
			case 10:
				s18 = "Hydref";
				break;
			case 11:
				s18 = "Tachwedd";
				break;
			case 12:
				s18 = "Rhagfyr";
				break;
			}
			month = s18;
			break;
		default:
			month = null;
		}
		haxe_Log.trace("current month " + month,{ fileName : "src/datetimelang/util/Demo.hx", lineNumber : 22, className : "datetimelang.util.Demo", methodName : "new"});
		var c1 = lang;
		var tmp;
		switch(c1) {
		case "arabic":
			var mondayBased = false;
			if(mondayBased == null) {
				mondayBased = false;
			}
			var d = js_Boot.__cast(datetime_DateTime.getWeekDay(now,mondayBased) , Int);
			var s19;
			var d1 = d;
			switch(d1) {
			case 0:
				s19 = "يوم الأحد";
				break;
			case 1:
				s19 = "يوم الإثنين";
				break;
			case 2:
				s19 = "يوم الثلاثاء";
				break;
			case 3:
				s19 = "يوم الأربعاء";
				break;
			case 4:
				s19 = "يوم الخميس";
				break;
			case 5:
				s19 = "يوم الجمعة";
				break;
			case 6:
				s19 = "يوم السبت";
				break;
			}
			tmp = s19;
			break;
		case "english":
			var mondayBased1 = false;
			if(mondayBased1 == null) {
				mondayBased1 = false;
			}
			var d2 = js_Boot.__cast(datetime_DateTime.getWeekDay(now,mondayBased1) , Int);
			var s20;
			var d3 = d2;
			switch(d3) {
			case 0:
				s20 = "Sunday";
				break;
			case 1:
				s20 = "Monday";
				break;
			case 2:
				s20 = "Tuesday";
				break;
			case 3:
				s20 = "Wednesday";
				break;
			case 4:
				s20 = "Thursday";
				break;
			case 5:
				s20 = "Friday";
				break;
			case 6:
				s20 = "Saturday";
				break;
			}
			tmp = s20;
			break;
		case "french":
			var mondayBased2 = false;
			if(mondayBased2 == null) {
				mondayBased2 = false;
			}
			var d4 = js_Boot.__cast(datetime_DateTime.getWeekDay(now,mondayBased2) , Int);
			var s21;
			var d5 = d4;
			switch(d5) {
			case 0:
				s21 = "Dimanche";
				break;
			case 1:
				s21 = "Lundi";
				break;
			case 2:
				s21 = "Mardi";
				break;
			case 3:
				s21 = "Mercredi";
				break;
			case 4:
				s21 = "Jeudi";
				break;
			case 5:
				s21 = "Vendredi";
				break;
			case 6:
				s21 = "Samedi";
				break;
			}
			tmp = s21;
			break;
		case "german":
			var mondayBased3 = false;
			if(mondayBased3 == null) {
				mondayBased3 = false;
			}
			var d6 = js_Boot.__cast(datetime_DateTime.getWeekDay(now,mondayBased3) , Int);
			var s22;
			var d7 = d6;
			switch(d7) {
			case 0:
				s22 = "Sonntag";
				break;
			case 1:
				s22 = "Montag";
				break;
			case 2:
				s22 = "Dienstag";
				break;
			case 3:
				s22 = "Mittwoch";
				break;
			case 4:
				s22 = "Donnerstag";
				break;
			case 5:
				s22 = "Freitag";
				break;
			case 6:
				s22 = "Samtag";
				break;
			}
			tmp = s22;
			break;
		case "greek":
			var mondayBased4 = false;
			if(mondayBased4 == null) {
				mondayBased4 = false;
			}
			var d8 = js_Boot.__cast(datetime_DateTime.getWeekDay(now,mondayBased4) , Int);
			var s23;
			var d9 = d8;
			switch(d9) {
			case 0:
				s23 = "Κυριακή";
				break;
			case 1:
				s23 = "Δευτέρα";
				break;
			case 2:
				s23 = "Τρίτη";
				break;
			case 3:
				s23 = "Τετάρτη";
				break;
			case 4:
				s23 = "Πέμπτη";
				break;
			case 5:
				s23 = "Παρασκευή";
				break;
			case 6:
				s23 = "Σάββατο";
				break;
			}
			tmp = s23;
			break;
		case "hebrew":
			var mondayBased5 = false;
			if(mondayBased5 == null) {
				mondayBased5 = false;
			}
			var d10 = js_Boot.__cast(datetime_DateTime.getWeekDay(now,mondayBased5) , Int);
			var s24;
			var d11 = d10;
			switch(d11) {
			case 0:
				s24 = "יום ראשון";
				break;
			case 1:
				s24 = "יום שני";
				break;
			case 2:
				s24 = "יום שלישי";
				break;
			case 3:
				s24 = "יום רביעי";
				break;
			case 4:
				s24 = "יום חמישי";
				break;
			case 5:
				s24 = "יום שישי";
				break;
			case 6:
				s24 = "יום שבת";
				break;
			}
			tmp = s24;
			break;
		case "hindi":
			var mondayBased6 = false;
			if(mondayBased6 == null) {
				mondayBased6 = false;
			}
			var d12 = js_Boot.__cast(datetime_DateTime.getWeekDay(now,mondayBased6) , Int);
			var s25;
			var d13 = d12;
			switch(d13) {
			case 0:
				s25 = "रविवार";
				break;
			case 1:
				s25 = "सोमवार";
				break;
			case 2:
				s25 = "मंगलवार";
				break;
			case 3:
				s25 = "बुधवार";
				break;
			case 4:
				s25 = "गुरुवार";
				break;
			case 5:
				s25 = "शुक्रवार";
				break;
			case 6:
				s25 = "शनिवार";
				break;
			}
			tmp = s25;
			break;
		case "italian":
			var mondayBased7 = false;
			if(mondayBased7 == null) {
				mondayBased7 = false;
			}
			var d14 = js_Boot.__cast(datetime_DateTime.getWeekDay(now,mondayBased7) , Int);
			var s26;
			var d15 = d14;
			switch(d15) {
			case 0:
				s26 = "domenica";
				break;
			case 1:
				s26 = "lunedì";
				break;
			case 2:
				s26 = "martedì";
				break;
			case 3:
				s26 = "mercoledì";
				break;
			case 4:
				s26 = "giovedì";
				break;
			case 5:
				s26 = "venerdì";
				break;
			case 6:
				s26 = "sabato";
				break;
			}
			tmp = s26;
			break;
		case "norwegian":
			var mondayBased8 = false;
			if(mondayBased8 == null) {
				mondayBased8 = false;
			}
			var d16 = js_Boot.__cast(datetime_DateTime.getWeekDay(now,mondayBased8) , Int);
			var s27;
			var d17 = d16;
			switch(d17) {
			case 0:
				s27 = "Søndag";
				break;
			case 1:
				s27 = "Mandag";
				break;
			case 2:
				s27 = "Tirsdag";
				break;
			case 3:
				s27 = "Onsdag";
				break;
			case 4:
				s27 = "Torsdag";
				break;
			case 5:
				s27 = "Fredag";
				break;
			case 6:
				s27 = "Lørdag";
				break;
			}
			tmp = s27;
			break;
		case "polish":
			var mondayBased9 = false;
			if(mondayBased9 == null) {
				mondayBased9 = false;
			}
			var d18 = js_Boot.__cast(datetime_DateTime.getWeekDay(now,mondayBased9) , Int);
			var s28;
			var d19 = d18;
			switch(d19) {
			case 0:
				s28 = "Niedziela";
				break;
			case 1:
				s28 = "Poniedziałek";
				break;
			case 2:
				s28 = "Wtorek";
				break;
			case 3:
				s28 = "Środa";
				break;
			case 4:
				s28 = "Czwartek";
				break;
			case 5:
				s28 = "Piątek";
				break;
			case 6:
				s28 = "Sobota";
				break;
			}
			tmp = s28;
			break;
		case "portuguese":
			var mondayBased10 = false;
			if(mondayBased10 == null) {
				mondayBased10 = false;
			}
			var d20 = js_Boot.__cast(datetime_DateTime.getWeekDay(now,mondayBased10) , Int);
			var s29;
			var d21 = d20;
			switch(d21) {
			case 0:
				s29 = "Domingo";
				break;
			case 1:
				s29 = "Segunda";
				break;
			case 2:
				s29 = "Terça";
				break;
			case 3:
				s29 = "Quarta";
				break;
			case 4:
				s29 = "Quinta";
				break;
			case 5:
				s29 = "Sexta";
				break;
			case 6:
				s29 = "Sábado";
				break;
			}
			tmp = s29;
			break;
		case "romanian":
			var mondayBased11 = false;
			if(mondayBased11 == null) {
				mondayBased11 = false;
			}
			var d22 = js_Boot.__cast(datetime_DateTime.getWeekDay(now,mondayBased11) , Int);
			var s30;
			var d23 = d22;
			switch(d23) {
			case 0:
				s30 = "Duminică";
				break;
			case 1:
				s30 = "Luni";
				break;
			case 2:
				s30 = "Marţi";
				break;
			case 3:
				s30 = "Miercuri";
				break;
			case 4:
				s30 = "Joi";
				break;
			case 5:
				s30 = "Vineri";
				break;
			case 6:
				s30 = "Sîmbătă";
				break;
			}
			tmp = s30;
			break;
		case "russian":
			var mondayBased12 = false;
			if(mondayBased12 == null) {
				mondayBased12 = false;
			}
			var d24 = js_Boot.__cast(datetime_DateTime.getWeekDay(now,mondayBased12) , Int);
			var s31;
			var d25 = d24;
			switch(d25) {
			case 0:
				s31 = "воскресенье";
				break;
			case 1:
				s31 = "понедельник";
				break;
			case 2:
				s31 = "вторник";
				break;
			case 3:
				s31 = "среда";
				break;
			case 4:
				s31 = "четверг";
				break;
			case 5:
				s31 = "пятница";
				break;
			case 6:
				s31 = "суббота";
				break;
			}
			tmp = s31;
			break;
		case "somali":
			var mondayBased13 = false;
			if(mondayBased13 == null) {
				mondayBased13 = false;
			}
			var d26 = js_Boot.__cast(datetime_DateTime.getWeekDay(now,mondayBased13) , Int);
			var s32;
			var d27 = d26;
			switch(d27) {
			case 0:
				s32 = "Koobin";
				break;
			case 1:
				s32 = "Lammin";
				break;
			case 2:
				s32 = "Lamatoke";
				break;
			case 3:
				s32 = "Koodaar";
				break;
			case 4:
				s32 = "Hakisa";
				break;
			case 5:
				s32 = "Hakisa-Bile";
				break;
			case 6:
				s32 = "Soo Roga";
				break;
			}
			tmp = s32;
			break;
		case "spanish":
			var mondayBased14 = false;
			if(mondayBased14 == null) {
				mondayBased14 = false;
			}
			var d28 = js_Boot.__cast(datetime_DateTime.getWeekDay(now,mondayBased14) , Int);
			var s33;
			var d29 = d28;
			switch(d29) {
			case 0:
				s33 = "Domingo";
				break;
			case 1:
				s33 = "Lunes";
				break;
			case 2:
				s33 = "Martes";
				break;
			case 3:
				s33 = "Mieroles";
				break;
			case 4:
				s33 = "Jueves";
				break;
			case 5:
				s33 = "Viernes";
				break;
			case 6:
				s33 = "Sábado";
				break;
			}
			tmp = s33;
			break;
		case "swedish":
			var mondayBased15 = false;
			if(mondayBased15 == null) {
				mondayBased15 = false;
			}
			var d30 = js_Boot.__cast(datetime_DateTime.getWeekDay(now,mondayBased15) , Int);
			var s34;
			var d31 = d30;
			switch(d31) {
			case 0:
				s34 = "Söndag";
				break;
			case 1:
				s34 = "Måndag";
				break;
			case 2:
				s34 = "Tisdag";
				break;
			case 3:
				s34 = "Onsdag";
				break;
			case 4:
				s34 = "Torsdag";
				break;
			case 5:
				s34 = "Fredag";
				break;
			case 6:
				s34 = "Lördag";
				break;
			}
			tmp = s34;
			break;
		case "turkish":
			var mondayBased16 = false;
			if(mondayBased16 == null) {
				mondayBased16 = false;
			}
			var d32 = js_Boot.__cast(datetime_DateTime.getWeekDay(now,mondayBased16) , Int);
			var s35;
			var d33 = d32;
			switch(d33) {
			case 0:
				s35 = "Pazar";
				break;
			case 1:
				s35 = "Pazartesi";
				break;
			case 2:
				s35 = "Salı";
				break;
			case 3:
				s35 = "Çarşamba";
				break;
			case 4:
				s35 = "Perşembe";
				break;
			case 5:
				s35 = "Cuma";
				break;
			case 6:
				s35 = "Cumartesi";
				break;
			}
			tmp = s35;
			break;
		case "welsh":
			var mondayBased17 = false;
			if(mondayBased17 == null) {
				mondayBased17 = false;
			}
			var d34 = js_Boot.__cast(datetime_DateTime.getWeekDay(now,mondayBased17) , Int);
			var s36;
			var d35 = d34;
			switch(d35) {
			case 0:
				s36 = "Sul";
				break;
			case 1:
				s36 = "Llun";
				break;
			case 2:
				s36 = "Mawrth";
				break;
			case 3:
				s36 = "Mercher";
				break;
			case 4:
				s36 = "Iau";
				break;
			case 5:
				s36 = "Gwener";
				break;
			case 6:
				s36 = "Sadwrn";
				break;
			}
			tmp = s36;
			break;
		default:
			tmp = null;
		}
		haxe_Log.trace("today is a " + tmp,{ fileName : "src/datetimelang/util/Demo.hx", lineNumber : 23, className : "datetimelang.util.Demo", methodName : "new"});
		var this2 = datetime_DateTime.add(now,datetime_DTPeriod.Day(1));
		var dt = this2;
		var c2 = lang;
		var tmp1;
		switch(c2) {
		case "arabic":
			var mondayBased18 = false;
			if(mondayBased18 == null) {
				mondayBased18 = false;
			}
			var d36 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased18) , Int);
			var s37;
			var d37 = d36;
			switch(d37) {
			case 0:
				s37 = "يوم الأحد";
				break;
			case 1:
				s37 = "يوم الإثنين";
				break;
			case 2:
				s37 = "يوم الثلاثاء";
				break;
			case 3:
				s37 = "يوم الأربعاء";
				break;
			case 4:
				s37 = "يوم الخميس";
				break;
			case 5:
				s37 = "يوم الجمعة";
				break;
			case 6:
				s37 = "يوم السبت";
				break;
			}
			tmp1 = s37;
			break;
		case "english":
			var mondayBased19 = false;
			if(mondayBased19 == null) {
				mondayBased19 = false;
			}
			var d38 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased19) , Int);
			var s38;
			var d39 = d38;
			switch(d39) {
			case 0:
				s38 = "Sunday";
				break;
			case 1:
				s38 = "Monday";
				break;
			case 2:
				s38 = "Tuesday";
				break;
			case 3:
				s38 = "Wednesday";
				break;
			case 4:
				s38 = "Thursday";
				break;
			case 5:
				s38 = "Friday";
				break;
			case 6:
				s38 = "Saturday";
				break;
			}
			tmp1 = s38;
			break;
		case "french":
			var mondayBased20 = false;
			if(mondayBased20 == null) {
				mondayBased20 = false;
			}
			var d40 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased20) , Int);
			var s39;
			var d41 = d40;
			switch(d41) {
			case 0:
				s39 = "Dimanche";
				break;
			case 1:
				s39 = "Lundi";
				break;
			case 2:
				s39 = "Mardi";
				break;
			case 3:
				s39 = "Mercredi";
				break;
			case 4:
				s39 = "Jeudi";
				break;
			case 5:
				s39 = "Vendredi";
				break;
			case 6:
				s39 = "Samedi";
				break;
			}
			tmp1 = s39;
			break;
		case "german":
			var mondayBased21 = false;
			if(mondayBased21 == null) {
				mondayBased21 = false;
			}
			var d42 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased21) , Int);
			var s40;
			var d43 = d42;
			switch(d43) {
			case 0:
				s40 = "Sonntag";
				break;
			case 1:
				s40 = "Montag";
				break;
			case 2:
				s40 = "Dienstag";
				break;
			case 3:
				s40 = "Mittwoch";
				break;
			case 4:
				s40 = "Donnerstag";
				break;
			case 5:
				s40 = "Freitag";
				break;
			case 6:
				s40 = "Samtag";
				break;
			}
			tmp1 = s40;
			break;
		case "greek":
			var mondayBased22 = false;
			if(mondayBased22 == null) {
				mondayBased22 = false;
			}
			var d44 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased22) , Int);
			var s41;
			var d45 = d44;
			switch(d45) {
			case 0:
				s41 = "Κυριακή";
				break;
			case 1:
				s41 = "Δευτέρα";
				break;
			case 2:
				s41 = "Τρίτη";
				break;
			case 3:
				s41 = "Τετάρτη";
				break;
			case 4:
				s41 = "Πέμπτη";
				break;
			case 5:
				s41 = "Παρασκευή";
				break;
			case 6:
				s41 = "Σάββατο";
				break;
			}
			tmp1 = s41;
			break;
		case "hebrew":
			var mondayBased23 = false;
			if(mondayBased23 == null) {
				mondayBased23 = false;
			}
			var d46 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased23) , Int);
			var s42;
			var d47 = d46;
			switch(d47) {
			case 0:
				s42 = "יום ראשון";
				break;
			case 1:
				s42 = "יום שני";
				break;
			case 2:
				s42 = "יום שלישי";
				break;
			case 3:
				s42 = "יום רביעי";
				break;
			case 4:
				s42 = "יום חמישי";
				break;
			case 5:
				s42 = "יום שישי";
				break;
			case 6:
				s42 = "יום שבת";
				break;
			}
			tmp1 = s42;
			break;
		case "hindi":
			var mondayBased24 = false;
			if(mondayBased24 == null) {
				mondayBased24 = false;
			}
			var d48 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased24) , Int);
			var s43;
			var d49 = d48;
			switch(d49) {
			case 0:
				s43 = "रविवार";
				break;
			case 1:
				s43 = "सोमवार";
				break;
			case 2:
				s43 = "मंगलवार";
				break;
			case 3:
				s43 = "बुधवार";
				break;
			case 4:
				s43 = "गुरुवार";
				break;
			case 5:
				s43 = "शुक्रवार";
				break;
			case 6:
				s43 = "शनिवार";
				break;
			}
			tmp1 = s43;
			break;
		case "italian":
			var mondayBased25 = false;
			if(mondayBased25 == null) {
				mondayBased25 = false;
			}
			var d50 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased25) , Int);
			var s44;
			var d51 = d50;
			switch(d51) {
			case 0:
				s44 = "domenica";
				break;
			case 1:
				s44 = "lunedì";
				break;
			case 2:
				s44 = "martedì";
				break;
			case 3:
				s44 = "mercoledì";
				break;
			case 4:
				s44 = "giovedì";
				break;
			case 5:
				s44 = "venerdì";
				break;
			case 6:
				s44 = "sabato";
				break;
			}
			tmp1 = s44;
			break;
		case "norwegian":
			var mondayBased26 = false;
			if(mondayBased26 == null) {
				mondayBased26 = false;
			}
			var d52 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased26) , Int);
			var s45;
			var d53 = d52;
			switch(d53) {
			case 0:
				s45 = "Søndag";
				break;
			case 1:
				s45 = "Mandag";
				break;
			case 2:
				s45 = "Tirsdag";
				break;
			case 3:
				s45 = "Onsdag";
				break;
			case 4:
				s45 = "Torsdag";
				break;
			case 5:
				s45 = "Fredag";
				break;
			case 6:
				s45 = "Lørdag";
				break;
			}
			tmp1 = s45;
			break;
		case "polish":
			var mondayBased27 = false;
			if(mondayBased27 == null) {
				mondayBased27 = false;
			}
			var d54 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased27) , Int);
			var s46;
			var d55 = d54;
			switch(d55) {
			case 0:
				s46 = "Niedziela";
				break;
			case 1:
				s46 = "Poniedziałek";
				break;
			case 2:
				s46 = "Wtorek";
				break;
			case 3:
				s46 = "Środa";
				break;
			case 4:
				s46 = "Czwartek";
				break;
			case 5:
				s46 = "Piątek";
				break;
			case 6:
				s46 = "Sobota";
				break;
			}
			tmp1 = s46;
			break;
		case "portuguese":
			var mondayBased28 = false;
			if(mondayBased28 == null) {
				mondayBased28 = false;
			}
			var d56 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased28) , Int);
			var s47;
			var d57 = d56;
			switch(d57) {
			case 0:
				s47 = "Domingo";
				break;
			case 1:
				s47 = "Segunda";
				break;
			case 2:
				s47 = "Terça";
				break;
			case 3:
				s47 = "Quarta";
				break;
			case 4:
				s47 = "Quinta";
				break;
			case 5:
				s47 = "Sexta";
				break;
			case 6:
				s47 = "Sábado";
				break;
			}
			tmp1 = s47;
			break;
		case "romanian":
			var mondayBased29 = false;
			if(mondayBased29 == null) {
				mondayBased29 = false;
			}
			var d58 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased29) , Int);
			var s48;
			var d59 = d58;
			switch(d59) {
			case 0:
				s48 = "Duminică";
				break;
			case 1:
				s48 = "Luni";
				break;
			case 2:
				s48 = "Marţi";
				break;
			case 3:
				s48 = "Miercuri";
				break;
			case 4:
				s48 = "Joi";
				break;
			case 5:
				s48 = "Vineri";
				break;
			case 6:
				s48 = "Sîmbătă";
				break;
			}
			tmp1 = s48;
			break;
		case "russian":
			var mondayBased30 = false;
			if(mondayBased30 == null) {
				mondayBased30 = false;
			}
			var d60 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased30) , Int);
			var s49;
			var d61 = d60;
			switch(d61) {
			case 0:
				s49 = "воскресенье";
				break;
			case 1:
				s49 = "понедельник";
				break;
			case 2:
				s49 = "вторник";
				break;
			case 3:
				s49 = "среда";
				break;
			case 4:
				s49 = "четверг";
				break;
			case 5:
				s49 = "пятница";
				break;
			case 6:
				s49 = "суббота";
				break;
			}
			tmp1 = s49;
			break;
		case "somali":
			var mondayBased31 = false;
			if(mondayBased31 == null) {
				mondayBased31 = false;
			}
			var d62 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased31) , Int);
			var s50;
			var d63 = d62;
			switch(d63) {
			case 0:
				s50 = "Koobin";
				break;
			case 1:
				s50 = "Lammin";
				break;
			case 2:
				s50 = "Lamatoke";
				break;
			case 3:
				s50 = "Koodaar";
				break;
			case 4:
				s50 = "Hakisa";
				break;
			case 5:
				s50 = "Hakisa-Bile";
				break;
			case 6:
				s50 = "Soo Roga";
				break;
			}
			tmp1 = s50;
			break;
		case "spanish":
			var mondayBased32 = false;
			if(mondayBased32 == null) {
				mondayBased32 = false;
			}
			var d64 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased32) , Int);
			var s51;
			var d65 = d64;
			switch(d65) {
			case 0:
				s51 = "Domingo";
				break;
			case 1:
				s51 = "Lunes";
				break;
			case 2:
				s51 = "Martes";
				break;
			case 3:
				s51 = "Mieroles";
				break;
			case 4:
				s51 = "Jueves";
				break;
			case 5:
				s51 = "Viernes";
				break;
			case 6:
				s51 = "Sábado";
				break;
			}
			tmp1 = s51;
			break;
		case "swedish":
			var mondayBased33 = false;
			if(mondayBased33 == null) {
				mondayBased33 = false;
			}
			var d66 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased33) , Int);
			var s52;
			var d67 = d66;
			switch(d67) {
			case 0:
				s52 = "Söndag";
				break;
			case 1:
				s52 = "Måndag";
				break;
			case 2:
				s52 = "Tisdag";
				break;
			case 3:
				s52 = "Onsdag";
				break;
			case 4:
				s52 = "Torsdag";
				break;
			case 5:
				s52 = "Fredag";
				break;
			case 6:
				s52 = "Lördag";
				break;
			}
			tmp1 = s52;
			break;
		case "turkish":
			var mondayBased34 = false;
			if(mondayBased34 == null) {
				mondayBased34 = false;
			}
			var d68 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased34) , Int);
			var s53;
			var d69 = d68;
			switch(d69) {
			case 0:
				s53 = "Pazar";
				break;
			case 1:
				s53 = "Pazartesi";
				break;
			case 2:
				s53 = "Salı";
				break;
			case 3:
				s53 = "Çarşamba";
				break;
			case 4:
				s53 = "Perşembe";
				break;
			case 5:
				s53 = "Cuma";
				break;
			case 6:
				s53 = "Cumartesi";
				break;
			}
			tmp1 = s53;
			break;
		case "welsh":
			var mondayBased35 = false;
			if(mondayBased35 == null) {
				mondayBased35 = false;
			}
			var d70 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased35) , Int);
			var s54;
			var d71 = d70;
			switch(d71) {
			case 0:
				s54 = "Sul";
				break;
			case 1:
				s54 = "Llun";
				break;
			case 2:
				s54 = "Mawrth";
				break;
			case 3:
				s54 = "Mercher";
				break;
			case 4:
				s54 = "Iau";
				break;
			case 5:
				s54 = "Gwener";
				break;
			case 6:
				s54 = "Sadwrn";
				break;
			}
			tmp1 = s54;
			break;
		default:
			tmp1 = null;
		}
		haxe_Log.trace("... " + tmp1,{ fileName : "src/datetimelang/util/Demo.hx", lineNumber : 25, className : "datetimelang.util.Demo", methodName : "new"});
		var this3 = datetime_DateTime.add(now,datetime_DTPeriod.Day(2));
		var dt1 = this3;
		var c3 = lang;
		var tmp2;
		switch(c3) {
		case "arabic":
			var mondayBased36 = false;
			if(mondayBased36 == null) {
				mondayBased36 = false;
			}
			var d72 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt1,mondayBased36) , Int);
			var s55;
			var d73 = d72;
			switch(d73) {
			case 0:
				s55 = "يوم الأحد";
				break;
			case 1:
				s55 = "يوم الإثنين";
				break;
			case 2:
				s55 = "يوم الثلاثاء";
				break;
			case 3:
				s55 = "يوم الأربعاء";
				break;
			case 4:
				s55 = "يوم الخميس";
				break;
			case 5:
				s55 = "يوم الجمعة";
				break;
			case 6:
				s55 = "يوم السبت";
				break;
			}
			tmp2 = s55;
			break;
		case "english":
			var mondayBased37 = false;
			if(mondayBased37 == null) {
				mondayBased37 = false;
			}
			var d74 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt1,mondayBased37) , Int);
			var s56;
			var d75 = d74;
			switch(d75) {
			case 0:
				s56 = "Sunday";
				break;
			case 1:
				s56 = "Monday";
				break;
			case 2:
				s56 = "Tuesday";
				break;
			case 3:
				s56 = "Wednesday";
				break;
			case 4:
				s56 = "Thursday";
				break;
			case 5:
				s56 = "Friday";
				break;
			case 6:
				s56 = "Saturday";
				break;
			}
			tmp2 = s56;
			break;
		case "french":
			var mondayBased38 = false;
			if(mondayBased38 == null) {
				mondayBased38 = false;
			}
			var d76 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt1,mondayBased38) , Int);
			var s57;
			var d77 = d76;
			switch(d77) {
			case 0:
				s57 = "Dimanche";
				break;
			case 1:
				s57 = "Lundi";
				break;
			case 2:
				s57 = "Mardi";
				break;
			case 3:
				s57 = "Mercredi";
				break;
			case 4:
				s57 = "Jeudi";
				break;
			case 5:
				s57 = "Vendredi";
				break;
			case 6:
				s57 = "Samedi";
				break;
			}
			tmp2 = s57;
			break;
		case "german":
			var mondayBased39 = false;
			if(mondayBased39 == null) {
				mondayBased39 = false;
			}
			var d78 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt1,mondayBased39) , Int);
			var s58;
			var d79 = d78;
			switch(d79) {
			case 0:
				s58 = "Sonntag";
				break;
			case 1:
				s58 = "Montag";
				break;
			case 2:
				s58 = "Dienstag";
				break;
			case 3:
				s58 = "Mittwoch";
				break;
			case 4:
				s58 = "Donnerstag";
				break;
			case 5:
				s58 = "Freitag";
				break;
			case 6:
				s58 = "Samtag";
				break;
			}
			tmp2 = s58;
			break;
		case "greek":
			var mondayBased40 = false;
			if(mondayBased40 == null) {
				mondayBased40 = false;
			}
			var d80 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt1,mondayBased40) , Int);
			var s59;
			var d81 = d80;
			switch(d81) {
			case 0:
				s59 = "Κυριακή";
				break;
			case 1:
				s59 = "Δευτέρα";
				break;
			case 2:
				s59 = "Τρίτη";
				break;
			case 3:
				s59 = "Τετάρτη";
				break;
			case 4:
				s59 = "Πέμπτη";
				break;
			case 5:
				s59 = "Παρασκευή";
				break;
			case 6:
				s59 = "Σάββατο";
				break;
			}
			tmp2 = s59;
			break;
		case "hebrew":
			var mondayBased41 = false;
			if(mondayBased41 == null) {
				mondayBased41 = false;
			}
			var d82 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt1,mondayBased41) , Int);
			var s60;
			var d83 = d82;
			switch(d83) {
			case 0:
				s60 = "יום ראשון";
				break;
			case 1:
				s60 = "יום שני";
				break;
			case 2:
				s60 = "יום שלישי";
				break;
			case 3:
				s60 = "יום רביעי";
				break;
			case 4:
				s60 = "יום חמישי";
				break;
			case 5:
				s60 = "יום שישי";
				break;
			case 6:
				s60 = "יום שבת";
				break;
			}
			tmp2 = s60;
			break;
		case "hindi":
			var mondayBased42 = false;
			if(mondayBased42 == null) {
				mondayBased42 = false;
			}
			var d84 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt1,mondayBased42) , Int);
			var s61;
			var d85 = d84;
			switch(d85) {
			case 0:
				s61 = "रविवार";
				break;
			case 1:
				s61 = "सोमवार";
				break;
			case 2:
				s61 = "मंगलवार";
				break;
			case 3:
				s61 = "बुधवार";
				break;
			case 4:
				s61 = "गुरुवार";
				break;
			case 5:
				s61 = "शुक्रवार";
				break;
			case 6:
				s61 = "शनिवार";
				break;
			}
			tmp2 = s61;
			break;
		case "italian":
			var mondayBased43 = false;
			if(mondayBased43 == null) {
				mondayBased43 = false;
			}
			var d86 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt1,mondayBased43) , Int);
			var s62;
			var d87 = d86;
			switch(d87) {
			case 0:
				s62 = "domenica";
				break;
			case 1:
				s62 = "lunedì";
				break;
			case 2:
				s62 = "martedì";
				break;
			case 3:
				s62 = "mercoledì";
				break;
			case 4:
				s62 = "giovedì";
				break;
			case 5:
				s62 = "venerdì";
				break;
			case 6:
				s62 = "sabato";
				break;
			}
			tmp2 = s62;
			break;
		case "norwegian":
			var mondayBased44 = false;
			if(mondayBased44 == null) {
				mondayBased44 = false;
			}
			var d88 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt1,mondayBased44) , Int);
			var s63;
			var d89 = d88;
			switch(d89) {
			case 0:
				s63 = "Søndag";
				break;
			case 1:
				s63 = "Mandag";
				break;
			case 2:
				s63 = "Tirsdag";
				break;
			case 3:
				s63 = "Onsdag";
				break;
			case 4:
				s63 = "Torsdag";
				break;
			case 5:
				s63 = "Fredag";
				break;
			case 6:
				s63 = "Lørdag";
				break;
			}
			tmp2 = s63;
			break;
		case "polish":
			var mondayBased45 = false;
			if(mondayBased45 == null) {
				mondayBased45 = false;
			}
			var d90 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt1,mondayBased45) , Int);
			var s64;
			var d91 = d90;
			switch(d91) {
			case 0:
				s64 = "Niedziela";
				break;
			case 1:
				s64 = "Poniedziałek";
				break;
			case 2:
				s64 = "Wtorek";
				break;
			case 3:
				s64 = "Środa";
				break;
			case 4:
				s64 = "Czwartek";
				break;
			case 5:
				s64 = "Piątek";
				break;
			case 6:
				s64 = "Sobota";
				break;
			}
			tmp2 = s64;
			break;
		case "portuguese":
			var mondayBased46 = false;
			if(mondayBased46 == null) {
				mondayBased46 = false;
			}
			var d92 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt1,mondayBased46) , Int);
			var s65;
			var d93 = d92;
			switch(d93) {
			case 0:
				s65 = "Domingo";
				break;
			case 1:
				s65 = "Segunda";
				break;
			case 2:
				s65 = "Terça";
				break;
			case 3:
				s65 = "Quarta";
				break;
			case 4:
				s65 = "Quinta";
				break;
			case 5:
				s65 = "Sexta";
				break;
			case 6:
				s65 = "Sábado";
				break;
			}
			tmp2 = s65;
			break;
		case "romanian":
			var mondayBased47 = false;
			if(mondayBased47 == null) {
				mondayBased47 = false;
			}
			var d94 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt1,mondayBased47) , Int);
			var s66;
			var d95 = d94;
			switch(d95) {
			case 0:
				s66 = "Duminică";
				break;
			case 1:
				s66 = "Luni";
				break;
			case 2:
				s66 = "Marţi";
				break;
			case 3:
				s66 = "Miercuri";
				break;
			case 4:
				s66 = "Joi";
				break;
			case 5:
				s66 = "Vineri";
				break;
			case 6:
				s66 = "Sîmbătă";
				break;
			}
			tmp2 = s66;
			break;
		case "russian":
			var mondayBased48 = false;
			if(mondayBased48 == null) {
				mondayBased48 = false;
			}
			var d96 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt1,mondayBased48) , Int);
			var s67;
			var d97 = d96;
			switch(d97) {
			case 0:
				s67 = "воскресенье";
				break;
			case 1:
				s67 = "понедельник";
				break;
			case 2:
				s67 = "вторник";
				break;
			case 3:
				s67 = "среда";
				break;
			case 4:
				s67 = "четверг";
				break;
			case 5:
				s67 = "пятница";
				break;
			case 6:
				s67 = "суббота";
				break;
			}
			tmp2 = s67;
			break;
		case "somali":
			var mondayBased49 = false;
			if(mondayBased49 == null) {
				mondayBased49 = false;
			}
			var d98 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt1,mondayBased49) , Int);
			var s68;
			var d99 = d98;
			switch(d99) {
			case 0:
				s68 = "Koobin";
				break;
			case 1:
				s68 = "Lammin";
				break;
			case 2:
				s68 = "Lamatoke";
				break;
			case 3:
				s68 = "Koodaar";
				break;
			case 4:
				s68 = "Hakisa";
				break;
			case 5:
				s68 = "Hakisa-Bile";
				break;
			case 6:
				s68 = "Soo Roga";
				break;
			}
			tmp2 = s68;
			break;
		case "spanish":
			var mondayBased50 = false;
			if(mondayBased50 == null) {
				mondayBased50 = false;
			}
			var d100 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt1,mondayBased50) , Int);
			var s69;
			var d101 = d100;
			switch(d101) {
			case 0:
				s69 = "Domingo";
				break;
			case 1:
				s69 = "Lunes";
				break;
			case 2:
				s69 = "Martes";
				break;
			case 3:
				s69 = "Mieroles";
				break;
			case 4:
				s69 = "Jueves";
				break;
			case 5:
				s69 = "Viernes";
				break;
			case 6:
				s69 = "Sábado";
				break;
			}
			tmp2 = s69;
			break;
		case "swedish":
			var mondayBased51 = false;
			if(mondayBased51 == null) {
				mondayBased51 = false;
			}
			var d102 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt1,mondayBased51) , Int);
			var s70;
			var d103 = d102;
			switch(d103) {
			case 0:
				s70 = "Söndag";
				break;
			case 1:
				s70 = "Måndag";
				break;
			case 2:
				s70 = "Tisdag";
				break;
			case 3:
				s70 = "Onsdag";
				break;
			case 4:
				s70 = "Torsdag";
				break;
			case 5:
				s70 = "Fredag";
				break;
			case 6:
				s70 = "Lördag";
				break;
			}
			tmp2 = s70;
			break;
		case "turkish":
			var mondayBased52 = false;
			if(mondayBased52 == null) {
				mondayBased52 = false;
			}
			var d104 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt1,mondayBased52) , Int);
			var s71;
			var d105 = d104;
			switch(d105) {
			case 0:
				s71 = "Pazar";
				break;
			case 1:
				s71 = "Pazartesi";
				break;
			case 2:
				s71 = "Salı";
				break;
			case 3:
				s71 = "Çarşamba";
				break;
			case 4:
				s71 = "Perşembe";
				break;
			case 5:
				s71 = "Cuma";
				break;
			case 6:
				s71 = "Cumartesi";
				break;
			}
			tmp2 = s71;
			break;
		case "welsh":
			var mondayBased53 = false;
			if(mondayBased53 == null) {
				mondayBased53 = false;
			}
			var d106 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt1,mondayBased53) , Int);
			var s72;
			var d107 = d106;
			switch(d107) {
			case 0:
				s72 = "Sul";
				break;
			case 1:
				s72 = "Llun";
				break;
			case 2:
				s72 = "Mawrth";
				break;
			case 3:
				s72 = "Mercher";
				break;
			case 4:
				s72 = "Iau";
				break;
			case 5:
				s72 = "Gwener";
				break;
			case 6:
				s72 = "Sadwrn";
				break;
			}
			tmp2 = s72;
			break;
		default:
			tmp2 = null;
		}
		haxe_Log.trace("... " + tmp2,{ fileName : "src/datetimelang/util/Demo.hx", lineNumber : 25, className : "datetimelang.util.Demo", methodName : "new"});
		var this4 = datetime_DateTime.add(now,datetime_DTPeriod.Day(3));
		var dt2 = this4;
		var c4 = lang;
		var tmp3;
		switch(c4) {
		case "arabic":
			var mondayBased54 = false;
			if(mondayBased54 == null) {
				mondayBased54 = false;
			}
			var d108 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt2,mondayBased54) , Int);
			var s73;
			var d109 = d108;
			switch(d109) {
			case 0:
				s73 = "يوم الأحد";
				break;
			case 1:
				s73 = "يوم الإثنين";
				break;
			case 2:
				s73 = "يوم الثلاثاء";
				break;
			case 3:
				s73 = "يوم الأربعاء";
				break;
			case 4:
				s73 = "يوم الخميس";
				break;
			case 5:
				s73 = "يوم الجمعة";
				break;
			case 6:
				s73 = "يوم السبت";
				break;
			}
			tmp3 = s73;
			break;
		case "english":
			var mondayBased55 = false;
			if(mondayBased55 == null) {
				mondayBased55 = false;
			}
			var d110 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt2,mondayBased55) , Int);
			var s74;
			var d111 = d110;
			switch(d111) {
			case 0:
				s74 = "Sunday";
				break;
			case 1:
				s74 = "Monday";
				break;
			case 2:
				s74 = "Tuesday";
				break;
			case 3:
				s74 = "Wednesday";
				break;
			case 4:
				s74 = "Thursday";
				break;
			case 5:
				s74 = "Friday";
				break;
			case 6:
				s74 = "Saturday";
				break;
			}
			tmp3 = s74;
			break;
		case "french":
			var mondayBased56 = false;
			if(mondayBased56 == null) {
				mondayBased56 = false;
			}
			var d112 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt2,mondayBased56) , Int);
			var s75;
			var d113 = d112;
			switch(d113) {
			case 0:
				s75 = "Dimanche";
				break;
			case 1:
				s75 = "Lundi";
				break;
			case 2:
				s75 = "Mardi";
				break;
			case 3:
				s75 = "Mercredi";
				break;
			case 4:
				s75 = "Jeudi";
				break;
			case 5:
				s75 = "Vendredi";
				break;
			case 6:
				s75 = "Samedi";
				break;
			}
			tmp3 = s75;
			break;
		case "german":
			var mondayBased57 = false;
			if(mondayBased57 == null) {
				mondayBased57 = false;
			}
			var d114 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt2,mondayBased57) , Int);
			var s76;
			var d115 = d114;
			switch(d115) {
			case 0:
				s76 = "Sonntag";
				break;
			case 1:
				s76 = "Montag";
				break;
			case 2:
				s76 = "Dienstag";
				break;
			case 3:
				s76 = "Mittwoch";
				break;
			case 4:
				s76 = "Donnerstag";
				break;
			case 5:
				s76 = "Freitag";
				break;
			case 6:
				s76 = "Samtag";
				break;
			}
			tmp3 = s76;
			break;
		case "greek":
			var mondayBased58 = false;
			if(mondayBased58 == null) {
				mondayBased58 = false;
			}
			var d116 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt2,mondayBased58) , Int);
			var s77;
			var d117 = d116;
			switch(d117) {
			case 0:
				s77 = "Κυριακή";
				break;
			case 1:
				s77 = "Δευτέρα";
				break;
			case 2:
				s77 = "Τρίτη";
				break;
			case 3:
				s77 = "Τετάρτη";
				break;
			case 4:
				s77 = "Πέμπτη";
				break;
			case 5:
				s77 = "Παρασκευή";
				break;
			case 6:
				s77 = "Σάββατο";
				break;
			}
			tmp3 = s77;
			break;
		case "hebrew":
			var mondayBased59 = false;
			if(mondayBased59 == null) {
				mondayBased59 = false;
			}
			var d118 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt2,mondayBased59) , Int);
			var s78;
			var d119 = d118;
			switch(d119) {
			case 0:
				s78 = "יום ראשון";
				break;
			case 1:
				s78 = "יום שני";
				break;
			case 2:
				s78 = "יום שלישי";
				break;
			case 3:
				s78 = "יום רביעי";
				break;
			case 4:
				s78 = "יום חמישי";
				break;
			case 5:
				s78 = "יום שישי";
				break;
			case 6:
				s78 = "יום שבת";
				break;
			}
			tmp3 = s78;
			break;
		case "hindi":
			var mondayBased60 = false;
			if(mondayBased60 == null) {
				mondayBased60 = false;
			}
			var d120 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt2,mondayBased60) , Int);
			var s79;
			var d121 = d120;
			switch(d121) {
			case 0:
				s79 = "रविवार";
				break;
			case 1:
				s79 = "सोमवार";
				break;
			case 2:
				s79 = "मंगलवार";
				break;
			case 3:
				s79 = "बुधवार";
				break;
			case 4:
				s79 = "गुरुवार";
				break;
			case 5:
				s79 = "शुक्रवार";
				break;
			case 6:
				s79 = "शनिवार";
				break;
			}
			tmp3 = s79;
			break;
		case "italian":
			var mondayBased61 = false;
			if(mondayBased61 == null) {
				mondayBased61 = false;
			}
			var d122 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt2,mondayBased61) , Int);
			var s80;
			var d123 = d122;
			switch(d123) {
			case 0:
				s80 = "domenica";
				break;
			case 1:
				s80 = "lunedì";
				break;
			case 2:
				s80 = "martedì";
				break;
			case 3:
				s80 = "mercoledì";
				break;
			case 4:
				s80 = "giovedì";
				break;
			case 5:
				s80 = "venerdì";
				break;
			case 6:
				s80 = "sabato";
				break;
			}
			tmp3 = s80;
			break;
		case "norwegian":
			var mondayBased62 = false;
			if(mondayBased62 == null) {
				mondayBased62 = false;
			}
			var d124 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt2,mondayBased62) , Int);
			var s81;
			var d125 = d124;
			switch(d125) {
			case 0:
				s81 = "Søndag";
				break;
			case 1:
				s81 = "Mandag";
				break;
			case 2:
				s81 = "Tirsdag";
				break;
			case 3:
				s81 = "Onsdag";
				break;
			case 4:
				s81 = "Torsdag";
				break;
			case 5:
				s81 = "Fredag";
				break;
			case 6:
				s81 = "Lørdag";
				break;
			}
			tmp3 = s81;
			break;
		case "polish":
			var mondayBased63 = false;
			if(mondayBased63 == null) {
				mondayBased63 = false;
			}
			var d126 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt2,mondayBased63) , Int);
			var s82;
			var d127 = d126;
			switch(d127) {
			case 0:
				s82 = "Niedziela";
				break;
			case 1:
				s82 = "Poniedziałek";
				break;
			case 2:
				s82 = "Wtorek";
				break;
			case 3:
				s82 = "Środa";
				break;
			case 4:
				s82 = "Czwartek";
				break;
			case 5:
				s82 = "Piątek";
				break;
			case 6:
				s82 = "Sobota";
				break;
			}
			tmp3 = s82;
			break;
		case "portuguese":
			var mondayBased64 = false;
			if(mondayBased64 == null) {
				mondayBased64 = false;
			}
			var d128 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt2,mondayBased64) , Int);
			var s83;
			var d129 = d128;
			switch(d129) {
			case 0:
				s83 = "Domingo";
				break;
			case 1:
				s83 = "Segunda";
				break;
			case 2:
				s83 = "Terça";
				break;
			case 3:
				s83 = "Quarta";
				break;
			case 4:
				s83 = "Quinta";
				break;
			case 5:
				s83 = "Sexta";
				break;
			case 6:
				s83 = "Sábado";
				break;
			}
			tmp3 = s83;
			break;
		case "romanian":
			var mondayBased65 = false;
			if(mondayBased65 == null) {
				mondayBased65 = false;
			}
			var d130 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt2,mondayBased65) , Int);
			var s84;
			var d131 = d130;
			switch(d131) {
			case 0:
				s84 = "Duminică";
				break;
			case 1:
				s84 = "Luni";
				break;
			case 2:
				s84 = "Marţi";
				break;
			case 3:
				s84 = "Miercuri";
				break;
			case 4:
				s84 = "Joi";
				break;
			case 5:
				s84 = "Vineri";
				break;
			case 6:
				s84 = "Sîmbătă";
				break;
			}
			tmp3 = s84;
			break;
		case "russian":
			var mondayBased66 = false;
			if(mondayBased66 == null) {
				mondayBased66 = false;
			}
			var d132 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt2,mondayBased66) , Int);
			var s85;
			var d133 = d132;
			switch(d133) {
			case 0:
				s85 = "воскресенье";
				break;
			case 1:
				s85 = "понедельник";
				break;
			case 2:
				s85 = "вторник";
				break;
			case 3:
				s85 = "среда";
				break;
			case 4:
				s85 = "четверг";
				break;
			case 5:
				s85 = "пятница";
				break;
			case 6:
				s85 = "суббота";
				break;
			}
			tmp3 = s85;
			break;
		case "somali":
			var mondayBased67 = false;
			if(mondayBased67 == null) {
				mondayBased67 = false;
			}
			var d134 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt2,mondayBased67) , Int);
			var s86;
			var d135 = d134;
			switch(d135) {
			case 0:
				s86 = "Koobin";
				break;
			case 1:
				s86 = "Lammin";
				break;
			case 2:
				s86 = "Lamatoke";
				break;
			case 3:
				s86 = "Koodaar";
				break;
			case 4:
				s86 = "Hakisa";
				break;
			case 5:
				s86 = "Hakisa-Bile";
				break;
			case 6:
				s86 = "Soo Roga";
				break;
			}
			tmp3 = s86;
			break;
		case "spanish":
			var mondayBased68 = false;
			if(mondayBased68 == null) {
				mondayBased68 = false;
			}
			var d136 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt2,mondayBased68) , Int);
			var s87;
			var d137 = d136;
			switch(d137) {
			case 0:
				s87 = "Domingo";
				break;
			case 1:
				s87 = "Lunes";
				break;
			case 2:
				s87 = "Martes";
				break;
			case 3:
				s87 = "Mieroles";
				break;
			case 4:
				s87 = "Jueves";
				break;
			case 5:
				s87 = "Viernes";
				break;
			case 6:
				s87 = "Sábado";
				break;
			}
			tmp3 = s87;
			break;
		case "swedish":
			var mondayBased69 = false;
			if(mondayBased69 == null) {
				mondayBased69 = false;
			}
			var d138 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt2,mondayBased69) , Int);
			var s88;
			var d139 = d138;
			switch(d139) {
			case 0:
				s88 = "Söndag";
				break;
			case 1:
				s88 = "Måndag";
				break;
			case 2:
				s88 = "Tisdag";
				break;
			case 3:
				s88 = "Onsdag";
				break;
			case 4:
				s88 = "Torsdag";
				break;
			case 5:
				s88 = "Fredag";
				break;
			case 6:
				s88 = "Lördag";
				break;
			}
			tmp3 = s88;
			break;
		case "turkish":
			var mondayBased70 = false;
			if(mondayBased70 == null) {
				mondayBased70 = false;
			}
			var d140 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt2,mondayBased70) , Int);
			var s89;
			var d141 = d140;
			switch(d141) {
			case 0:
				s89 = "Pazar";
				break;
			case 1:
				s89 = "Pazartesi";
				break;
			case 2:
				s89 = "Salı";
				break;
			case 3:
				s89 = "Çarşamba";
				break;
			case 4:
				s89 = "Perşembe";
				break;
			case 5:
				s89 = "Cuma";
				break;
			case 6:
				s89 = "Cumartesi";
				break;
			}
			tmp3 = s89;
			break;
		case "welsh":
			var mondayBased71 = false;
			if(mondayBased71 == null) {
				mondayBased71 = false;
			}
			var d142 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt2,mondayBased71) , Int);
			var s90;
			var d143 = d142;
			switch(d143) {
			case 0:
				s90 = "Sul";
				break;
			case 1:
				s90 = "Llun";
				break;
			case 2:
				s90 = "Mawrth";
				break;
			case 3:
				s90 = "Mercher";
				break;
			case 4:
				s90 = "Iau";
				break;
			case 5:
				s90 = "Gwener";
				break;
			case 6:
				s90 = "Sadwrn";
				break;
			}
			tmp3 = s90;
			break;
		default:
			tmp3 = null;
		}
		haxe_Log.trace("... " + tmp3,{ fileName : "src/datetimelang/util/Demo.hx", lineNumber : 25, className : "datetimelang.util.Demo", methodName : "new"});
		var this5 = datetime_DateTime.add(now,datetime_DTPeriod.Day(4));
		var dt3 = this5;
		var c5 = lang;
		var tmp4;
		switch(c5) {
		case "arabic":
			var mondayBased72 = false;
			if(mondayBased72 == null) {
				mondayBased72 = false;
			}
			var d144 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt3,mondayBased72) , Int);
			var s91;
			var d145 = d144;
			switch(d145) {
			case 0:
				s91 = "يوم الأحد";
				break;
			case 1:
				s91 = "يوم الإثنين";
				break;
			case 2:
				s91 = "يوم الثلاثاء";
				break;
			case 3:
				s91 = "يوم الأربعاء";
				break;
			case 4:
				s91 = "يوم الخميس";
				break;
			case 5:
				s91 = "يوم الجمعة";
				break;
			case 6:
				s91 = "يوم السبت";
				break;
			}
			tmp4 = s91;
			break;
		case "english":
			var mondayBased73 = false;
			if(mondayBased73 == null) {
				mondayBased73 = false;
			}
			var d146 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt3,mondayBased73) , Int);
			var s92;
			var d147 = d146;
			switch(d147) {
			case 0:
				s92 = "Sunday";
				break;
			case 1:
				s92 = "Monday";
				break;
			case 2:
				s92 = "Tuesday";
				break;
			case 3:
				s92 = "Wednesday";
				break;
			case 4:
				s92 = "Thursday";
				break;
			case 5:
				s92 = "Friday";
				break;
			case 6:
				s92 = "Saturday";
				break;
			}
			tmp4 = s92;
			break;
		case "french":
			var mondayBased74 = false;
			if(mondayBased74 == null) {
				mondayBased74 = false;
			}
			var d148 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt3,mondayBased74) , Int);
			var s93;
			var d149 = d148;
			switch(d149) {
			case 0:
				s93 = "Dimanche";
				break;
			case 1:
				s93 = "Lundi";
				break;
			case 2:
				s93 = "Mardi";
				break;
			case 3:
				s93 = "Mercredi";
				break;
			case 4:
				s93 = "Jeudi";
				break;
			case 5:
				s93 = "Vendredi";
				break;
			case 6:
				s93 = "Samedi";
				break;
			}
			tmp4 = s93;
			break;
		case "german":
			var mondayBased75 = false;
			if(mondayBased75 == null) {
				mondayBased75 = false;
			}
			var d150 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt3,mondayBased75) , Int);
			var s94;
			var d151 = d150;
			switch(d151) {
			case 0:
				s94 = "Sonntag";
				break;
			case 1:
				s94 = "Montag";
				break;
			case 2:
				s94 = "Dienstag";
				break;
			case 3:
				s94 = "Mittwoch";
				break;
			case 4:
				s94 = "Donnerstag";
				break;
			case 5:
				s94 = "Freitag";
				break;
			case 6:
				s94 = "Samtag";
				break;
			}
			tmp4 = s94;
			break;
		case "greek":
			var mondayBased76 = false;
			if(mondayBased76 == null) {
				mondayBased76 = false;
			}
			var d152 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt3,mondayBased76) , Int);
			var s95;
			var d153 = d152;
			switch(d153) {
			case 0:
				s95 = "Κυριακή";
				break;
			case 1:
				s95 = "Δευτέρα";
				break;
			case 2:
				s95 = "Τρίτη";
				break;
			case 3:
				s95 = "Τετάρτη";
				break;
			case 4:
				s95 = "Πέμπτη";
				break;
			case 5:
				s95 = "Παρασκευή";
				break;
			case 6:
				s95 = "Σάββατο";
				break;
			}
			tmp4 = s95;
			break;
		case "hebrew":
			var mondayBased77 = false;
			if(mondayBased77 == null) {
				mondayBased77 = false;
			}
			var d154 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt3,mondayBased77) , Int);
			var s96;
			var d155 = d154;
			switch(d155) {
			case 0:
				s96 = "יום ראשון";
				break;
			case 1:
				s96 = "יום שני";
				break;
			case 2:
				s96 = "יום שלישי";
				break;
			case 3:
				s96 = "יום רביעי";
				break;
			case 4:
				s96 = "יום חמישי";
				break;
			case 5:
				s96 = "יום שישי";
				break;
			case 6:
				s96 = "יום שבת";
				break;
			}
			tmp4 = s96;
			break;
		case "hindi":
			var mondayBased78 = false;
			if(mondayBased78 == null) {
				mondayBased78 = false;
			}
			var d156 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt3,mondayBased78) , Int);
			var s97;
			var d157 = d156;
			switch(d157) {
			case 0:
				s97 = "रविवार";
				break;
			case 1:
				s97 = "सोमवार";
				break;
			case 2:
				s97 = "मंगलवार";
				break;
			case 3:
				s97 = "बुधवार";
				break;
			case 4:
				s97 = "गुरुवार";
				break;
			case 5:
				s97 = "शुक्रवार";
				break;
			case 6:
				s97 = "शनिवार";
				break;
			}
			tmp4 = s97;
			break;
		case "italian":
			var mondayBased79 = false;
			if(mondayBased79 == null) {
				mondayBased79 = false;
			}
			var d158 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt3,mondayBased79) , Int);
			var s98;
			var d159 = d158;
			switch(d159) {
			case 0:
				s98 = "domenica";
				break;
			case 1:
				s98 = "lunedì";
				break;
			case 2:
				s98 = "martedì";
				break;
			case 3:
				s98 = "mercoledì";
				break;
			case 4:
				s98 = "giovedì";
				break;
			case 5:
				s98 = "venerdì";
				break;
			case 6:
				s98 = "sabato";
				break;
			}
			tmp4 = s98;
			break;
		case "norwegian":
			var mondayBased80 = false;
			if(mondayBased80 == null) {
				mondayBased80 = false;
			}
			var d160 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt3,mondayBased80) , Int);
			var s99;
			var d161 = d160;
			switch(d161) {
			case 0:
				s99 = "Søndag";
				break;
			case 1:
				s99 = "Mandag";
				break;
			case 2:
				s99 = "Tirsdag";
				break;
			case 3:
				s99 = "Onsdag";
				break;
			case 4:
				s99 = "Torsdag";
				break;
			case 5:
				s99 = "Fredag";
				break;
			case 6:
				s99 = "Lørdag";
				break;
			}
			tmp4 = s99;
			break;
		case "polish":
			var mondayBased81 = false;
			if(mondayBased81 == null) {
				mondayBased81 = false;
			}
			var d162 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt3,mondayBased81) , Int);
			var s100;
			var d163 = d162;
			switch(d163) {
			case 0:
				s100 = "Niedziela";
				break;
			case 1:
				s100 = "Poniedziałek";
				break;
			case 2:
				s100 = "Wtorek";
				break;
			case 3:
				s100 = "Środa";
				break;
			case 4:
				s100 = "Czwartek";
				break;
			case 5:
				s100 = "Piątek";
				break;
			case 6:
				s100 = "Sobota";
				break;
			}
			tmp4 = s100;
			break;
		case "portuguese":
			var mondayBased82 = false;
			if(mondayBased82 == null) {
				mondayBased82 = false;
			}
			var d164 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt3,mondayBased82) , Int);
			var s101;
			var d165 = d164;
			switch(d165) {
			case 0:
				s101 = "Domingo";
				break;
			case 1:
				s101 = "Segunda";
				break;
			case 2:
				s101 = "Terça";
				break;
			case 3:
				s101 = "Quarta";
				break;
			case 4:
				s101 = "Quinta";
				break;
			case 5:
				s101 = "Sexta";
				break;
			case 6:
				s101 = "Sábado";
				break;
			}
			tmp4 = s101;
			break;
		case "romanian":
			var mondayBased83 = false;
			if(mondayBased83 == null) {
				mondayBased83 = false;
			}
			var d166 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt3,mondayBased83) , Int);
			var s102;
			var d167 = d166;
			switch(d167) {
			case 0:
				s102 = "Duminică";
				break;
			case 1:
				s102 = "Luni";
				break;
			case 2:
				s102 = "Marţi";
				break;
			case 3:
				s102 = "Miercuri";
				break;
			case 4:
				s102 = "Joi";
				break;
			case 5:
				s102 = "Vineri";
				break;
			case 6:
				s102 = "Sîmbătă";
				break;
			}
			tmp4 = s102;
			break;
		case "russian":
			var mondayBased84 = false;
			if(mondayBased84 == null) {
				mondayBased84 = false;
			}
			var d168 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt3,mondayBased84) , Int);
			var s103;
			var d169 = d168;
			switch(d169) {
			case 0:
				s103 = "воскресенье";
				break;
			case 1:
				s103 = "понедельник";
				break;
			case 2:
				s103 = "вторник";
				break;
			case 3:
				s103 = "среда";
				break;
			case 4:
				s103 = "четверг";
				break;
			case 5:
				s103 = "пятница";
				break;
			case 6:
				s103 = "суббота";
				break;
			}
			tmp4 = s103;
			break;
		case "somali":
			var mondayBased85 = false;
			if(mondayBased85 == null) {
				mondayBased85 = false;
			}
			var d170 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt3,mondayBased85) , Int);
			var s104;
			var d171 = d170;
			switch(d171) {
			case 0:
				s104 = "Koobin";
				break;
			case 1:
				s104 = "Lammin";
				break;
			case 2:
				s104 = "Lamatoke";
				break;
			case 3:
				s104 = "Koodaar";
				break;
			case 4:
				s104 = "Hakisa";
				break;
			case 5:
				s104 = "Hakisa-Bile";
				break;
			case 6:
				s104 = "Soo Roga";
				break;
			}
			tmp4 = s104;
			break;
		case "spanish":
			var mondayBased86 = false;
			if(mondayBased86 == null) {
				mondayBased86 = false;
			}
			var d172 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt3,mondayBased86) , Int);
			var s105;
			var d173 = d172;
			switch(d173) {
			case 0:
				s105 = "Domingo";
				break;
			case 1:
				s105 = "Lunes";
				break;
			case 2:
				s105 = "Martes";
				break;
			case 3:
				s105 = "Mieroles";
				break;
			case 4:
				s105 = "Jueves";
				break;
			case 5:
				s105 = "Viernes";
				break;
			case 6:
				s105 = "Sábado";
				break;
			}
			tmp4 = s105;
			break;
		case "swedish":
			var mondayBased87 = false;
			if(mondayBased87 == null) {
				mondayBased87 = false;
			}
			var d174 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt3,mondayBased87) , Int);
			var s106;
			var d175 = d174;
			switch(d175) {
			case 0:
				s106 = "Söndag";
				break;
			case 1:
				s106 = "Måndag";
				break;
			case 2:
				s106 = "Tisdag";
				break;
			case 3:
				s106 = "Onsdag";
				break;
			case 4:
				s106 = "Torsdag";
				break;
			case 5:
				s106 = "Fredag";
				break;
			case 6:
				s106 = "Lördag";
				break;
			}
			tmp4 = s106;
			break;
		case "turkish":
			var mondayBased88 = false;
			if(mondayBased88 == null) {
				mondayBased88 = false;
			}
			var d176 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt3,mondayBased88) , Int);
			var s107;
			var d177 = d176;
			switch(d177) {
			case 0:
				s107 = "Pazar";
				break;
			case 1:
				s107 = "Pazartesi";
				break;
			case 2:
				s107 = "Salı";
				break;
			case 3:
				s107 = "Çarşamba";
				break;
			case 4:
				s107 = "Perşembe";
				break;
			case 5:
				s107 = "Cuma";
				break;
			case 6:
				s107 = "Cumartesi";
				break;
			}
			tmp4 = s107;
			break;
		case "welsh":
			var mondayBased89 = false;
			if(mondayBased89 == null) {
				mondayBased89 = false;
			}
			var d178 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt3,mondayBased89) , Int);
			var s108;
			var d179 = d178;
			switch(d179) {
			case 0:
				s108 = "Sul";
				break;
			case 1:
				s108 = "Llun";
				break;
			case 2:
				s108 = "Mawrth";
				break;
			case 3:
				s108 = "Mercher";
				break;
			case 4:
				s108 = "Iau";
				break;
			case 5:
				s108 = "Gwener";
				break;
			case 6:
				s108 = "Sadwrn";
				break;
			}
			tmp4 = s108;
			break;
		default:
			tmp4 = null;
		}
		haxe_Log.trace("... " + tmp4,{ fileName : "src/datetimelang/util/Demo.hx", lineNumber : 25, className : "datetimelang.util.Demo", methodName : "new"});
		var this6 = datetime_DateTime.add(now,datetime_DTPeriod.Day(5));
		var dt4 = this6;
		var c6 = lang;
		var tmp5;
		switch(c6) {
		case "arabic":
			var mondayBased90 = false;
			if(mondayBased90 == null) {
				mondayBased90 = false;
			}
			var d180 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt4,mondayBased90) , Int);
			var s109;
			var d181 = d180;
			switch(d181) {
			case 0:
				s109 = "يوم الأحد";
				break;
			case 1:
				s109 = "يوم الإثنين";
				break;
			case 2:
				s109 = "يوم الثلاثاء";
				break;
			case 3:
				s109 = "يوم الأربعاء";
				break;
			case 4:
				s109 = "يوم الخميس";
				break;
			case 5:
				s109 = "يوم الجمعة";
				break;
			case 6:
				s109 = "يوم السبت";
				break;
			}
			tmp5 = s109;
			break;
		case "english":
			var mondayBased91 = false;
			if(mondayBased91 == null) {
				mondayBased91 = false;
			}
			var d182 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt4,mondayBased91) , Int);
			var s110;
			var d183 = d182;
			switch(d183) {
			case 0:
				s110 = "Sunday";
				break;
			case 1:
				s110 = "Monday";
				break;
			case 2:
				s110 = "Tuesday";
				break;
			case 3:
				s110 = "Wednesday";
				break;
			case 4:
				s110 = "Thursday";
				break;
			case 5:
				s110 = "Friday";
				break;
			case 6:
				s110 = "Saturday";
				break;
			}
			tmp5 = s110;
			break;
		case "french":
			var mondayBased92 = false;
			if(mondayBased92 == null) {
				mondayBased92 = false;
			}
			var d184 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt4,mondayBased92) , Int);
			var s111;
			var d185 = d184;
			switch(d185) {
			case 0:
				s111 = "Dimanche";
				break;
			case 1:
				s111 = "Lundi";
				break;
			case 2:
				s111 = "Mardi";
				break;
			case 3:
				s111 = "Mercredi";
				break;
			case 4:
				s111 = "Jeudi";
				break;
			case 5:
				s111 = "Vendredi";
				break;
			case 6:
				s111 = "Samedi";
				break;
			}
			tmp5 = s111;
			break;
		case "german":
			var mondayBased93 = false;
			if(mondayBased93 == null) {
				mondayBased93 = false;
			}
			var d186 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt4,mondayBased93) , Int);
			var s112;
			var d187 = d186;
			switch(d187) {
			case 0:
				s112 = "Sonntag";
				break;
			case 1:
				s112 = "Montag";
				break;
			case 2:
				s112 = "Dienstag";
				break;
			case 3:
				s112 = "Mittwoch";
				break;
			case 4:
				s112 = "Donnerstag";
				break;
			case 5:
				s112 = "Freitag";
				break;
			case 6:
				s112 = "Samtag";
				break;
			}
			tmp5 = s112;
			break;
		case "greek":
			var mondayBased94 = false;
			if(mondayBased94 == null) {
				mondayBased94 = false;
			}
			var d188 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt4,mondayBased94) , Int);
			var s113;
			var d189 = d188;
			switch(d189) {
			case 0:
				s113 = "Κυριακή";
				break;
			case 1:
				s113 = "Δευτέρα";
				break;
			case 2:
				s113 = "Τρίτη";
				break;
			case 3:
				s113 = "Τετάρτη";
				break;
			case 4:
				s113 = "Πέμπτη";
				break;
			case 5:
				s113 = "Παρασκευή";
				break;
			case 6:
				s113 = "Σάββατο";
				break;
			}
			tmp5 = s113;
			break;
		case "hebrew":
			var mondayBased95 = false;
			if(mondayBased95 == null) {
				mondayBased95 = false;
			}
			var d190 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt4,mondayBased95) , Int);
			var s114;
			var d191 = d190;
			switch(d191) {
			case 0:
				s114 = "יום ראשון";
				break;
			case 1:
				s114 = "יום שני";
				break;
			case 2:
				s114 = "יום שלישי";
				break;
			case 3:
				s114 = "יום רביעי";
				break;
			case 4:
				s114 = "יום חמישי";
				break;
			case 5:
				s114 = "יום שישי";
				break;
			case 6:
				s114 = "יום שבת";
				break;
			}
			tmp5 = s114;
			break;
		case "hindi":
			var mondayBased96 = false;
			if(mondayBased96 == null) {
				mondayBased96 = false;
			}
			var d192 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt4,mondayBased96) , Int);
			var s115;
			var d193 = d192;
			switch(d193) {
			case 0:
				s115 = "रविवार";
				break;
			case 1:
				s115 = "सोमवार";
				break;
			case 2:
				s115 = "मंगलवार";
				break;
			case 3:
				s115 = "बुधवार";
				break;
			case 4:
				s115 = "गुरुवार";
				break;
			case 5:
				s115 = "शुक्रवार";
				break;
			case 6:
				s115 = "शनिवार";
				break;
			}
			tmp5 = s115;
			break;
		case "italian":
			var mondayBased97 = false;
			if(mondayBased97 == null) {
				mondayBased97 = false;
			}
			var d194 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt4,mondayBased97) , Int);
			var s116;
			var d195 = d194;
			switch(d195) {
			case 0:
				s116 = "domenica";
				break;
			case 1:
				s116 = "lunedì";
				break;
			case 2:
				s116 = "martedì";
				break;
			case 3:
				s116 = "mercoledì";
				break;
			case 4:
				s116 = "giovedì";
				break;
			case 5:
				s116 = "venerdì";
				break;
			case 6:
				s116 = "sabato";
				break;
			}
			tmp5 = s116;
			break;
		case "norwegian":
			var mondayBased98 = false;
			if(mondayBased98 == null) {
				mondayBased98 = false;
			}
			var d196 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt4,mondayBased98) , Int);
			var s117;
			var d197 = d196;
			switch(d197) {
			case 0:
				s117 = "Søndag";
				break;
			case 1:
				s117 = "Mandag";
				break;
			case 2:
				s117 = "Tirsdag";
				break;
			case 3:
				s117 = "Onsdag";
				break;
			case 4:
				s117 = "Torsdag";
				break;
			case 5:
				s117 = "Fredag";
				break;
			case 6:
				s117 = "Lørdag";
				break;
			}
			tmp5 = s117;
			break;
		case "polish":
			var mondayBased99 = false;
			if(mondayBased99 == null) {
				mondayBased99 = false;
			}
			var d198 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt4,mondayBased99) , Int);
			var s118;
			var d199 = d198;
			switch(d199) {
			case 0:
				s118 = "Niedziela";
				break;
			case 1:
				s118 = "Poniedziałek";
				break;
			case 2:
				s118 = "Wtorek";
				break;
			case 3:
				s118 = "Środa";
				break;
			case 4:
				s118 = "Czwartek";
				break;
			case 5:
				s118 = "Piątek";
				break;
			case 6:
				s118 = "Sobota";
				break;
			}
			tmp5 = s118;
			break;
		case "portuguese":
			var mondayBased100 = false;
			if(mondayBased100 == null) {
				mondayBased100 = false;
			}
			var d200 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt4,mondayBased100) , Int);
			var s119;
			var d201 = d200;
			switch(d201) {
			case 0:
				s119 = "Domingo";
				break;
			case 1:
				s119 = "Segunda";
				break;
			case 2:
				s119 = "Terça";
				break;
			case 3:
				s119 = "Quarta";
				break;
			case 4:
				s119 = "Quinta";
				break;
			case 5:
				s119 = "Sexta";
				break;
			case 6:
				s119 = "Sábado";
				break;
			}
			tmp5 = s119;
			break;
		case "romanian":
			var mondayBased101 = false;
			if(mondayBased101 == null) {
				mondayBased101 = false;
			}
			var d202 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt4,mondayBased101) , Int);
			var s120;
			var d203 = d202;
			switch(d203) {
			case 0:
				s120 = "Duminică";
				break;
			case 1:
				s120 = "Luni";
				break;
			case 2:
				s120 = "Marţi";
				break;
			case 3:
				s120 = "Miercuri";
				break;
			case 4:
				s120 = "Joi";
				break;
			case 5:
				s120 = "Vineri";
				break;
			case 6:
				s120 = "Sîmbătă";
				break;
			}
			tmp5 = s120;
			break;
		case "russian":
			var mondayBased102 = false;
			if(mondayBased102 == null) {
				mondayBased102 = false;
			}
			var d204 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt4,mondayBased102) , Int);
			var s121;
			var d205 = d204;
			switch(d205) {
			case 0:
				s121 = "воскресенье";
				break;
			case 1:
				s121 = "понедельник";
				break;
			case 2:
				s121 = "вторник";
				break;
			case 3:
				s121 = "среда";
				break;
			case 4:
				s121 = "четверг";
				break;
			case 5:
				s121 = "пятница";
				break;
			case 6:
				s121 = "суббота";
				break;
			}
			tmp5 = s121;
			break;
		case "somali":
			var mondayBased103 = false;
			if(mondayBased103 == null) {
				mondayBased103 = false;
			}
			var d206 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt4,mondayBased103) , Int);
			var s122;
			var d207 = d206;
			switch(d207) {
			case 0:
				s122 = "Koobin";
				break;
			case 1:
				s122 = "Lammin";
				break;
			case 2:
				s122 = "Lamatoke";
				break;
			case 3:
				s122 = "Koodaar";
				break;
			case 4:
				s122 = "Hakisa";
				break;
			case 5:
				s122 = "Hakisa-Bile";
				break;
			case 6:
				s122 = "Soo Roga";
				break;
			}
			tmp5 = s122;
			break;
		case "spanish":
			var mondayBased104 = false;
			if(mondayBased104 == null) {
				mondayBased104 = false;
			}
			var d208 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt4,mondayBased104) , Int);
			var s123;
			var d209 = d208;
			switch(d209) {
			case 0:
				s123 = "Domingo";
				break;
			case 1:
				s123 = "Lunes";
				break;
			case 2:
				s123 = "Martes";
				break;
			case 3:
				s123 = "Mieroles";
				break;
			case 4:
				s123 = "Jueves";
				break;
			case 5:
				s123 = "Viernes";
				break;
			case 6:
				s123 = "Sábado";
				break;
			}
			tmp5 = s123;
			break;
		case "swedish":
			var mondayBased105 = false;
			if(mondayBased105 == null) {
				mondayBased105 = false;
			}
			var d210 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt4,mondayBased105) , Int);
			var s124;
			var d211 = d210;
			switch(d211) {
			case 0:
				s124 = "Söndag";
				break;
			case 1:
				s124 = "Måndag";
				break;
			case 2:
				s124 = "Tisdag";
				break;
			case 3:
				s124 = "Onsdag";
				break;
			case 4:
				s124 = "Torsdag";
				break;
			case 5:
				s124 = "Fredag";
				break;
			case 6:
				s124 = "Lördag";
				break;
			}
			tmp5 = s124;
			break;
		case "turkish":
			var mondayBased106 = false;
			if(mondayBased106 == null) {
				mondayBased106 = false;
			}
			var d212 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt4,mondayBased106) , Int);
			var s125;
			var d213 = d212;
			switch(d213) {
			case 0:
				s125 = "Pazar";
				break;
			case 1:
				s125 = "Pazartesi";
				break;
			case 2:
				s125 = "Salı";
				break;
			case 3:
				s125 = "Çarşamba";
				break;
			case 4:
				s125 = "Perşembe";
				break;
			case 5:
				s125 = "Cuma";
				break;
			case 6:
				s125 = "Cumartesi";
				break;
			}
			tmp5 = s125;
			break;
		case "welsh":
			var mondayBased107 = false;
			if(mondayBased107 == null) {
				mondayBased107 = false;
			}
			var d214 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt4,mondayBased107) , Int);
			var s126;
			var d215 = d214;
			switch(d215) {
			case 0:
				s126 = "Sul";
				break;
			case 1:
				s126 = "Llun";
				break;
			case 2:
				s126 = "Mawrth";
				break;
			case 3:
				s126 = "Mercher";
				break;
			case 4:
				s126 = "Iau";
				break;
			case 5:
				s126 = "Gwener";
				break;
			case 6:
				s126 = "Sadwrn";
				break;
			}
			tmp5 = s126;
			break;
		default:
			tmp5 = null;
		}
		haxe_Log.trace("... " + tmp5,{ fileName : "src/datetimelang/util/Demo.hx", lineNumber : 25, className : "datetimelang.util.Demo", methodName : "new"});
		var this7 = datetime_DateTime.add(now,datetime_DTPeriod.Day(6));
		var dt5 = this7;
		var c7 = lang;
		var tmp6;
		switch(c7) {
		case "arabic":
			var mondayBased108 = false;
			if(mondayBased108 == null) {
				mondayBased108 = false;
			}
			var d216 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt5,mondayBased108) , Int);
			var s127;
			var d217 = d216;
			switch(d217) {
			case 0:
				s127 = "يوم الأحد";
				break;
			case 1:
				s127 = "يوم الإثنين";
				break;
			case 2:
				s127 = "يوم الثلاثاء";
				break;
			case 3:
				s127 = "يوم الأربعاء";
				break;
			case 4:
				s127 = "يوم الخميس";
				break;
			case 5:
				s127 = "يوم الجمعة";
				break;
			case 6:
				s127 = "يوم السبت";
				break;
			}
			tmp6 = s127;
			break;
		case "english":
			var mondayBased109 = false;
			if(mondayBased109 == null) {
				mondayBased109 = false;
			}
			var d218 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt5,mondayBased109) , Int);
			var s128;
			var d219 = d218;
			switch(d219) {
			case 0:
				s128 = "Sunday";
				break;
			case 1:
				s128 = "Monday";
				break;
			case 2:
				s128 = "Tuesday";
				break;
			case 3:
				s128 = "Wednesday";
				break;
			case 4:
				s128 = "Thursday";
				break;
			case 5:
				s128 = "Friday";
				break;
			case 6:
				s128 = "Saturday";
				break;
			}
			tmp6 = s128;
			break;
		case "french":
			var mondayBased110 = false;
			if(mondayBased110 == null) {
				mondayBased110 = false;
			}
			var d220 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt5,mondayBased110) , Int);
			var s129;
			var d221 = d220;
			switch(d221) {
			case 0:
				s129 = "Dimanche";
				break;
			case 1:
				s129 = "Lundi";
				break;
			case 2:
				s129 = "Mardi";
				break;
			case 3:
				s129 = "Mercredi";
				break;
			case 4:
				s129 = "Jeudi";
				break;
			case 5:
				s129 = "Vendredi";
				break;
			case 6:
				s129 = "Samedi";
				break;
			}
			tmp6 = s129;
			break;
		case "german":
			var mondayBased111 = false;
			if(mondayBased111 == null) {
				mondayBased111 = false;
			}
			var d222 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt5,mondayBased111) , Int);
			var s130;
			var d223 = d222;
			switch(d223) {
			case 0:
				s130 = "Sonntag";
				break;
			case 1:
				s130 = "Montag";
				break;
			case 2:
				s130 = "Dienstag";
				break;
			case 3:
				s130 = "Mittwoch";
				break;
			case 4:
				s130 = "Donnerstag";
				break;
			case 5:
				s130 = "Freitag";
				break;
			case 6:
				s130 = "Samtag";
				break;
			}
			tmp6 = s130;
			break;
		case "greek":
			var mondayBased112 = false;
			if(mondayBased112 == null) {
				mondayBased112 = false;
			}
			var d224 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt5,mondayBased112) , Int);
			var s131;
			var d225 = d224;
			switch(d225) {
			case 0:
				s131 = "Κυριακή";
				break;
			case 1:
				s131 = "Δευτέρα";
				break;
			case 2:
				s131 = "Τρίτη";
				break;
			case 3:
				s131 = "Τετάρτη";
				break;
			case 4:
				s131 = "Πέμπτη";
				break;
			case 5:
				s131 = "Παρασκευή";
				break;
			case 6:
				s131 = "Σάββατο";
				break;
			}
			tmp6 = s131;
			break;
		case "hebrew":
			var mondayBased113 = false;
			if(mondayBased113 == null) {
				mondayBased113 = false;
			}
			var d226 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt5,mondayBased113) , Int);
			var s132;
			var d227 = d226;
			switch(d227) {
			case 0:
				s132 = "יום ראשון";
				break;
			case 1:
				s132 = "יום שני";
				break;
			case 2:
				s132 = "יום שלישי";
				break;
			case 3:
				s132 = "יום רביעי";
				break;
			case 4:
				s132 = "יום חמישי";
				break;
			case 5:
				s132 = "יום שישי";
				break;
			case 6:
				s132 = "יום שבת";
				break;
			}
			tmp6 = s132;
			break;
		case "hindi":
			var mondayBased114 = false;
			if(mondayBased114 == null) {
				mondayBased114 = false;
			}
			var d228 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt5,mondayBased114) , Int);
			var s133;
			var d229 = d228;
			switch(d229) {
			case 0:
				s133 = "रविवार";
				break;
			case 1:
				s133 = "सोमवार";
				break;
			case 2:
				s133 = "मंगलवार";
				break;
			case 3:
				s133 = "बुधवार";
				break;
			case 4:
				s133 = "गुरुवार";
				break;
			case 5:
				s133 = "शुक्रवार";
				break;
			case 6:
				s133 = "शनिवार";
				break;
			}
			tmp6 = s133;
			break;
		case "italian":
			var mondayBased115 = false;
			if(mondayBased115 == null) {
				mondayBased115 = false;
			}
			var d230 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt5,mondayBased115) , Int);
			var s134;
			var d231 = d230;
			switch(d231) {
			case 0:
				s134 = "domenica";
				break;
			case 1:
				s134 = "lunedì";
				break;
			case 2:
				s134 = "martedì";
				break;
			case 3:
				s134 = "mercoledì";
				break;
			case 4:
				s134 = "giovedì";
				break;
			case 5:
				s134 = "venerdì";
				break;
			case 6:
				s134 = "sabato";
				break;
			}
			tmp6 = s134;
			break;
		case "norwegian":
			var mondayBased116 = false;
			if(mondayBased116 == null) {
				mondayBased116 = false;
			}
			var d232 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt5,mondayBased116) , Int);
			var s135;
			var d233 = d232;
			switch(d233) {
			case 0:
				s135 = "Søndag";
				break;
			case 1:
				s135 = "Mandag";
				break;
			case 2:
				s135 = "Tirsdag";
				break;
			case 3:
				s135 = "Onsdag";
				break;
			case 4:
				s135 = "Torsdag";
				break;
			case 5:
				s135 = "Fredag";
				break;
			case 6:
				s135 = "Lørdag";
				break;
			}
			tmp6 = s135;
			break;
		case "polish":
			var mondayBased117 = false;
			if(mondayBased117 == null) {
				mondayBased117 = false;
			}
			var d234 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt5,mondayBased117) , Int);
			var s136;
			var d235 = d234;
			switch(d235) {
			case 0:
				s136 = "Niedziela";
				break;
			case 1:
				s136 = "Poniedziałek";
				break;
			case 2:
				s136 = "Wtorek";
				break;
			case 3:
				s136 = "Środa";
				break;
			case 4:
				s136 = "Czwartek";
				break;
			case 5:
				s136 = "Piątek";
				break;
			case 6:
				s136 = "Sobota";
				break;
			}
			tmp6 = s136;
			break;
		case "portuguese":
			var mondayBased118 = false;
			if(mondayBased118 == null) {
				mondayBased118 = false;
			}
			var d236 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt5,mondayBased118) , Int);
			var s137;
			var d237 = d236;
			switch(d237) {
			case 0:
				s137 = "Domingo";
				break;
			case 1:
				s137 = "Segunda";
				break;
			case 2:
				s137 = "Terça";
				break;
			case 3:
				s137 = "Quarta";
				break;
			case 4:
				s137 = "Quinta";
				break;
			case 5:
				s137 = "Sexta";
				break;
			case 6:
				s137 = "Sábado";
				break;
			}
			tmp6 = s137;
			break;
		case "romanian":
			var mondayBased119 = false;
			if(mondayBased119 == null) {
				mondayBased119 = false;
			}
			var d238 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt5,mondayBased119) , Int);
			var s138;
			var d239 = d238;
			switch(d239) {
			case 0:
				s138 = "Duminică";
				break;
			case 1:
				s138 = "Luni";
				break;
			case 2:
				s138 = "Marţi";
				break;
			case 3:
				s138 = "Miercuri";
				break;
			case 4:
				s138 = "Joi";
				break;
			case 5:
				s138 = "Vineri";
				break;
			case 6:
				s138 = "Sîmbătă";
				break;
			}
			tmp6 = s138;
			break;
		case "russian":
			var mondayBased120 = false;
			if(mondayBased120 == null) {
				mondayBased120 = false;
			}
			var d240 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt5,mondayBased120) , Int);
			var s139;
			var d241 = d240;
			switch(d241) {
			case 0:
				s139 = "воскресенье";
				break;
			case 1:
				s139 = "понедельник";
				break;
			case 2:
				s139 = "вторник";
				break;
			case 3:
				s139 = "среда";
				break;
			case 4:
				s139 = "четверг";
				break;
			case 5:
				s139 = "пятница";
				break;
			case 6:
				s139 = "суббота";
				break;
			}
			tmp6 = s139;
			break;
		case "somali":
			var mondayBased121 = false;
			if(mondayBased121 == null) {
				mondayBased121 = false;
			}
			var d242 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt5,mondayBased121) , Int);
			var s140;
			var d243 = d242;
			switch(d243) {
			case 0:
				s140 = "Koobin";
				break;
			case 1:
				s140 = "Lammin";
				break;
			case 2:
				s140 = "Lamatoke";
				break;
			case 3:
				s140 = "Koodaar";
				break;
			case 4:
				s140 = "Hakisa";
				break;
			case 5:
				s140 = "Hakisa-Bile";
				break;
			case 6:
				s140 = "Soo Roga";
				break;
			}
			tmp6 = s140;
			break;
		case "spanish":
			var mondayBased122 = false;
			if(mondayBased122 == null) {
				mondayBased122 = false;
			}
			var d244 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt5,mondayBased122) , Int);
			var s141;
			var d245 = d244;
			switch(d245) {
			case 0:
				s141 = "Domingo";
				break;
			case 1:
				s141 = "Lunes";
				break;
			case 2:
				s141 = "Martes";
				break;
			case 3:
				s141 = "Mieroles";
				break;
			case 4:
				s141 = "Jueves";
				break;
			case 5:
				s141 = "Viernes";
				break;
			case 6:
				s141 = "Sábado";
				break;
			}
			tmp6 = s141;
			break;
		case "swedish":
			var mondayBased123 = false;
			if(mondayBased123 == null) {
				mondayBased123 = false;
			}
			var d246 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt5,mondayBased123) , Int);
			var s142;
			var d247 = d246;
			switch(d247) {
			case 0:
				s142 = "Söndag";
				break;
			case 1:
				s142 = "Måndag";
				break;
			case 2:
				s142 = "Tisdag";
				break;
			case 3:
				s142 = "Onsdag";
				break;
			case 4:
				s142 = "Torsdag";
				break;
			case 5:
				s142 = "Fredag";
				break;
			case 6:
				s142 = "Lördag";
				break;
			}
			tmp6 = s142;
			break;
		case "turkish":
			var mondayBased124 = false;
			if(mondayBased124 == null) {
				mondayBased124 = false;
			}
			var d248 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt5,mondayBased124) , Int);
			var s143;
			var d249 = d248;
			switch(d249) {
			case 0:
				s143 = "Pazar";
				break;
			case 1:
				s143 = "Pazartesi";
				break;
			case 2:
				s143 = "Salı";
				break;
			case 3:
				s143 = "Çarşamba";
				break;
			case 4:
				s143 = "Perşembe";
				break;
			case 5:
				s143 = "Cuma";
				break;
			case 6:
				s143 = "Cumartesi";
				break;
			}
			tmp6 = s143;
			break;
		case "welsh":
			var mondayBased125 = false;
			if(mondayBased125 == null) {
				mondayBased125 = false;
			}
			var d250 = js_Boot.__cast(datetime_DateTime.getWeekDay(dt5,mondayBased125) , Int);
			var s144;
			var d251 = d250;
			switch(d251) {
			case 0:
				s144 = "Sul";
				break;
			case 1:
				s144 = "Llun";
				break;
			case 2:
				s144 = "Mawrth";
				break;
			case 3:
				s144 = "Mercher";
				break;
			case 4:
				s144 = "Iau";
				break;
			case 5:
				s144 = "Gwener";
				break;
			case 6:
				s144 = "Sadwrn";
				break;
			}
			tmp6 = s144;
			break;
		default:
			tmp6 = null;
		}
		haxe_Log.trace("... " + tmp6,{ fileName : "src/datetimelang/util/Demo.hx", lineNumber : 25, className : "datetimelang.util.Demo", methodName : "new"});
		haxe_Log.trace(" ",{ fileName : "src/datetimelang/util/Demo.hx", lineNumber : 27, className : "datetimelang.util.Demo", methodName : "new"});
	}
};
datetimelang_util_Demo.__name__ = true;
datetimelang_util_Demo.prototype = {
	__class__: datetimelang_util_Demo
};
function datetimelang_util_Demo_main() {
	var divertTrace = new htmlHelper_tools_DivertTrace();
	new datetimelang_util_Demo();
}
var datetimelang_util_Lang = {};
datetimelang_util_Lang._new = function(c) {
	var this1 = c;
	return this1;
};
datetimelang_util_Lang.all = function() {
	return ["arabic","english","french","german","greek","hebrew","hindi","italian","norwegian","polish","portuguese","romanian","russian","somali","spanish","swedish","turkish","welsh"];
};
datetimelang_util_Lang.getWeekDayName = function(this1,dt,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	var c = this1;
	switch(c) {
	case "arabic":
		var mondayBased1 = mondayBased;
		if(mondayBased1 == null) {
			mondayBased1 = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased1) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "يوم الأحد";
			break;
		case 1:
			s = "يوم الإثنين";
			break;
		case 2:
			s = "يوم الثلاثاء";
			break;
		case 3:
			s = "يوم الأربعاء";
			break;
		case 4:
			s = "يوم الخميس";
			break;
		case 5:
			s = "يوم الجمعة";
			break;
		case 6:
			s = "يوم السبت";
			break;
		}
		return s;
	case "english":
		var mondayBased1 = mondayBased;
		if(mondayBased1 == null) {
			mondayBased1 = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased1) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "Sunday";
			break;
		case 1:
			s = "Monday";
			break;
		case 2:
			s = "Tuesday";
			break;
		case 3:
			s = "Wednesday";
			break;
		case 4:
			s = "Thursday";
			break;
		case 5:
			s = "Friday";
			break;
		case 6:
			s = "Saturday";
			break;
		}
		return s;
	case "french":
		var mondayBased1 = mondayBased;
		if(mondayBased1 == null) {
			mondayBased1 = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased1) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "Dimanche";
			break;
		case 1:
			s = "Lundi";
			break;
		case 2:
			s = "Mardi";
			break;
		case 3:
			s = "Mercredi";
			break;
		case 4:
			s = "Jeudi";
			break;
		case 5:
			s = "Vendredi";
			break;
		case 6:
			s = "Samedi";
			break;
		}
		return s;
	case "german":
		var mondayBased1 = mondayBased;
		if(mondayBased1 == null) {
			mondayBased1 = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased1) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "Sonntag";
			break;
		case 1:
			s = "Montag";
			break;
		case 2:
			s = "Dienstag";
			break;
		case 3:
			s = "Mittwoch";
			break;
		case 4:
			s = "Donnerstag";
			break;
		case 5:
			s = "Freitag";
			break;
		case 6:
			s = "Samtag";
			break;
		}
		return s;
	case "greek":
		var mondayBased1 = mondayBased;
		if(mondayBased1 == null) {
			mondayBased1 = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased1) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "Κυριακή";
			break;
		case 1:
			s = "Δευτέρα";
			break;
		case 2:
			s = "Τρίτη";
			break;
		case 3:
			s = "Τετάρτη";
			break;
		case 4:
			s = "Πέμπτη";
			break;
		case 5:
			s = "Παρασκευή";
			break;
		case 6:
			s = "Σάββατο";
			break;
		}
		return s;
	case "hebrew":
		var mondayBased1 = mondayBased;
		if(mondayBased1 == null) {
			mondayBased1 = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased1) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "יום ראשון";
			break;
		case 1:
			s = "יום שני";
			break;
		case 2:
			s = "יום שלישי";
			break;
		case 3:
			s = "יום רביעי";
			break;
		case 4:
			s = "יום חמישי";
			break;
		case 5:
			s = "יום שישי";
			break;
		case 6:
			s = "יום שבת";
			break;
		}
		return s;
	case "hindi":
		var mondayBased1 = mondayBased;
		if(mondayBased1 == null) {
			mondayBased1 = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased1) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "रविवार";
			break;
		case 1:
			s = "सोमवार";
			break;
		case 2:
			s = "मंगलवार";
			break;
		case 3:
			s = "बुधवार";
			break;
		case 4:
			s = "गुरुवार";
			break;
		case 5:
			s = "शुक्रवार";
			break;
		case 6:
			s = "शनिवार";
			break;
		}
		return s;
	case "italian":
		var mondayBased1 = mondayBased;
		if(mondayBased1 == null) {
			mondayBased1 = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased1) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "domenica";
			break;
		case 1:
			s = "lunedì";
			break;
		case 2:
			s = "martedì";
			break;
		case 3:
			s = "mercoledì";
			break;
		case 4:
			s = "giovedì";
			break;
		case 5:
			s = "venerdì";
			break;
		case 6:
			s = "sabato";
			break;
		}
		return s;
	case "norwegian":
		var mondayBased1 = mondayBased;
		if(mondayBased1 == null) {
			mondayBased1 = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased1) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "Søndag";
			break;
		case 1:
			s = "Mandag";
			break;
		case 2:
			s = "Tirsdag";
			break;
		case 3:
			s = "Onsdag";
			break;
		case 4:
			s = "Torsdag";
			break;
		case 5:
			s = "Fredag";
			break;
		case 6:
			s = "Lørdag";
			break;
		}
		return s;
	case "polish":
		var mondayBased1 = mondayBased;
		if(mondayBased1 == null) {
			mondayBased1 = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased1) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "Niedziela";
			break;
		case 1:
			s = "Poniedziałek";
			break;
		case 2:
			s = "Wtorek";
			break;
		case 3:
			s = "Środa";
			break;
		case 4:
			s = "Czwartek";
			break;
		case 5:
			s = "Piątek";
			break;
		case 6:
			s = "Sobota";
			break;
		}
		return s;
	case "portuguese":
		var mondayBased1 = mondayBased;
		if(mondayBased1 == null) {
			mondayBased1 = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased1) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "Domingo";
			break;
		case 1:
			s = "Segunda";
			break;
		case 2:
			s = "Terça";
			break;
		case 3:
			s = "Quarta";
			break;
		case 4:
			s = "Quinta";
			break;
		case 5:
			s = "Sexta";
			break;
		case 6:
			s = "Sábado";
			break;
		}
		return s;
	case "romanian":
		var mondayBased1 = mondayBased;
		if(mondayBased1 == null) {
			mondayBased1 = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased1) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "Duminică";
			break;
		case 1:
			s = "Luni";
			break;
		case 2:
			s = "Marţi";
			break;
		case 3:
			s = "Miercuri";
			break;
		case 4:
			s = "Joi";
			break;
		case 5:
			s = "Vineri";
			break;
		case 6:
			s = "Sîmbătă";
			break;
		}
		return s;
	case "russian":
		var mondayBased1 = mondayBased;
		if(mondayBased1 == null) {
			mondayBased1 = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased1) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "воскресенье";
			break;
		case 1:
			s = "понедельник";
			break;
		case 2:
			s = "вторник";
			break;
		case 3:
			s = "среда";
			break;
		case 4:
			s = "четверг";
			break;
		case 5:
			s = "пятница";
			break;
		case 6:
			s = "суббота";
			break;
		}
		return s;
	case "somali":
		var mondayBased1 = mondayBased;
		if(mondayBased1 == null) {
			mondayBased1 = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased1) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "Koobin";
			break;
		case 1:
			s = "Lammin";
			break;
		case 2:
			s = "Lamatoke";
			break;
		case 3:
			s = "Koodaar";
			break;
		case 4:
			s = "Hakisa";
			break;
		case 5:
			s = "Hakisa-Bile";
			break;
		case 6:
			s = "Soo Roga";
			break;
		}
		return s;
	case "spanish":
		var mondayBased1 = mondayBased;
		if(mondayBased1 == null) {
			mondayBased1 = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased1) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "Domingo";
			break;
		case 1:
			s = "Lunes";
			break;
		case 2:
			s = "Martes";
			break;
		case 3:
			s = "Mieroles";
			break;
		case 4:
			s = "Jueves";
			break;
		case 5:
			s = "Viernes";
			break;
		case 6:
			s = "Sábado";
			break;
		}
		return s;
	case "swedish":
		var mondayBased1 = mondayBased;
		if(mondayBased1 == null) {
			mondayBased1 = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased1) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "Söndag";
			break;
		case 1:
			s = "Måndag";
			break;
		case 2:
			s = "Tisdag";
			break;
		case 3:
			s = "Onsdag";
			break;
		case 4:
			s = "Torsdag";
			break;
		case 5:
			s = "Fredag";
			break;
		case 6:
			s = "Lördag";
			break;
		}
		return s;
	case "turkish":
		var mondayBased1 = mondayBased;
		if(mondayBased1 == null) {
			mondayBased1 = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased1) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "Pazar";
			break;
		case 1:
			s = "Pazartesi";
			break;
		case 2:
			s = "Salı";
			break;
		case 3:
			s = "Çarşamba";
			break;
		case 4:
			s = "Perşembe";
			break;
		case 5:
			s = "Cuma";
			break;
		case 6:
			s = "Cumartesi";
			break;
		}
		return s;
	case "welsh":
		var mondayBased1 = mondayBased;
		if(mondayBased1 == null) {
			mondayBased1 = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased1) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "Sul";
			break;
		case 1:
			s = "Llun";
			break;
		case 2:
			s = "Mawrth";
			break;
		case 3:
			s = "Mercher";
			break;
		case 4:
			s = "Iau";
			break;
		case 5:
			s = "Gwener";
			break;
		case 6:
			s = "Sadwrn";
			break;
		}
		return s;
	default:
		return null;
	}
};
datetimelang_util_Lang.getMonthName = function(this1,dt,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	var c = this1;
	switch(c) {
	case "arabic":
		var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "يناير";
			break;
		case 2:
			s = "فبراير";
			break;
		case 3:
			s = "مارس";
			break;
		case 4:
			s = "أبريل";
			break;
		case 5:
			s = "مايو";
			break;
		case 6:
			s = "يونيو";
			break;
		case 7:
			s = "يوليه";
			break;
		case 8:
			s = "أغسطس";
			break;
		case 9:
			s = "سبتمبر";
			break;
		case 10:
			s = "أكتوبر";
			break;
		case 11:
			s = "نوفمبر";
			break;
		case 12:
			s = "ديسمبر";
			break;
		}
		return s;
	case "english":
		var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "January";
			break;
		case 2:
			s = "February";
			break;
		case 3:
			s = "March";
			break;
		case 4:
			s = "April";
			break;
		case 5:
			s = "May";
			break;
		case 6:
			s = "June";
			break;
		case 7:
			s = "July";
			break;
		case 8:
			s = "August";
			break;
		case 9:
			s = "September";
			break;
		case 10:
			s = "October";
			break;
		case 11:
			s = "November";
			break;
		case 12:
			s = "December";
			break;
		}
		return s;
	case "french":
		var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "Janvier";
			break;
		case 2:
			s = "Février";
			break;
		case 3:
			s = "Mars";
			break;
		case 4:
			s = "Avril";
			break;
		case 5:
			s = "Mai";
			break;
		case 6:
			s = "Juin";
			break;
		case 7:
			s = "Juillet";
			break;
		case 8:
			s = "Août";
			break;
		case 9:
			s = "Septembre";
			break;
		case 10:
			s = "Octobre";
			break;
		case 11:
			s = "Novembre";
			break;
		case 12:
			s = "Décembre";
			break;
		}
		return s;
	case "german":
		var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "Januar";
			break;
		case 2:
			s = "Februar";
			break;
		case 3:
			s = "März";
			break;
		case 4:
			s = "April";
			break;
		case 5:
			s = "Mai";
			break;
		case 6:
			s = "Juni";
			break;
		case 7:
			s = "Juli";
			break;
		case 8:
			s = "August";
			break;
		case 9:
			s = "September";
			break;
		case 10:
			s = "Oktober";
			break;
		case 11:
			s = "November";
			break;
		case 12:
			s = "Dezember";
			break;
		}
		return s;
	case "greek":
		var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "Iανουάριος";
			break;
		case 2:
			s = "Φεβρουάριος";
			break;
		case 3:
			s = "Μάρτιος";
			break;
		case 4:
			s = "Aρίλιος";
			break;
		case 5:
			s = "Μάιος";
			break;
		case 6:
			s = "Iούνιος";
			break;
		case 7:
			s = "Iούλιος";
			break;
		case 8:
			s = "ύγουστος";
			break;
		case 9:
			s = "Σεπτέμβριος";
			break;
		case 10:
			s = "Oκτώβριος";
			break;
		case 11:
			s = "Νοέμβριος";
			break;
		case 12:
			s = "Δεκέμβριος";
			break;
		}
		return s;
	case "hebrew":
		var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "ינואר";
			break;
		case 2:
			s = "פברואר";
			break;
		case 3:
			s = "מרץ";
			break;
		case 4:
			s = "אפריל";
			break;
		case 5:
			s = "מאי";
			break;
		case 6:
			s = "יוני";
			break;
		case 7:
			s = "יולי";
			break;
		case 8:
			s = "אוגוסט";
			break;
		case 9:
			s = "ספטמבר";
			break;
		case 10:
			s = "אוקטובר";
			break;
		case 11:
			s = "נובמבר";
			break;
		case 12:
			s = "דצמבר";
			break;
		}
		return s;
	case "hindi":
		var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "जनवरी";
			break;
		case 2:
			s = "फ़रवरी";
			break;
		case 3:
			s = "मार्च";
			break;
		case 4:
			s = "अप्रैल";
			break;
		case 5:
			s = "मई";
			break;
		case 6:
			s = "जून";
			break;
		case 7:
			s = "जुलाई";
			break;
		case 8:
			s = "अगस्त";
			break;
		case 9:
			s = "सितंबर";
			break;
		case 10:
			s = "अक्टूबर";
			break;
		case 11:
			s = "नवंबर";
			break;
		case 12:
			s = "दिसंबर";
			break;
		}
		return s;
	case "italian":
		var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "Gennaio";
			break;
		case 2:
			s = "Febbraio";
			break;
		case 3:
			s = "Marzo";
			break;
		case 4:
			s = "Aprile";
			break;
		case 5:
			s = "Maggio";
			break;
		case 6:
			s = "Giugno";
			break;
		case 7:
			s = "Luglio";
			break;
		case 8:
			s = "Agosto";
			break;
		case 9:
			s = "Settembre";
			break;
		case 10:
			s = "Ottobre";
			break;
		case 11:
			s = "Novembre";
			break;
		case 12:
			s = "Dicembre";
			break;
		}
		return s;
	case "norwegian":
		var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "Januar";
			break;
		case 2:
			s = "Februar";
			break;
		case 3:
			s = "Mars";
			break;
		case 4:
			s = "April";
			break;
		case 5:
			s = "Mai";
			break;
		case 6:
			s = "Juni";
			break;
		case 7:
			s = "Juli";
			break;
		case 8:
			s = "August";
			break;
		case 9:
			s = "September";
			break;
		case 10:
			s = "Oktober";
			break;
		case 11:
			s = "November";
			break;
		case 12:
			s = "Desember";
			break;
		}
		return s;
	case "polish":
		var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "Styczeń";
			break;
		case 2:
			s = "Luty";
			break;
		case 3:
			s = "Marzec";
			break;
		case 4:
			s = "Kwiecień";
			break;
		case 5:
			s = "Maj";
			break;
		case 6:
			s = "Czerwiec";
			break;
		case 7:
			s = "Lipiec";
			break;
		case 8:
			s = "Sierpień";
			break;
		case 9:
			s = "Wrzesień";
			break;
		case 10:
			s = "Październik";
			break;
		case 11:
			s = "Listopad";
			break;
		case 12:
			s = "Grudzień";
			break;
		}
		return s;
	case "portuguese":
		var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "Janeiro";
			break;
		case 2:
			s = "Fevereiro";
			break;
		case 3:
			s = "Março";
			break;
		case 4:
			s = "Abril";
			break;
		case 5:
			s = "Maio";
			break;
		case 6:
			s = "Junho";
			break;
		case 7:
			s = "Julho";
			break;
		case 8:
			s = "Agosto";
			break;
		case 9:
			s = "Setembro";
			break;
		case 10:
			s = "Outubro";
			break;
		case 11:
			s = "Novembro";
			break;
		case 12:
			s = "Dezembro";
			break;
		}
		return s;
	case "romanian":
		var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "Ianuarie";
			break;
		case 2:
			s = "Februarie";
			break;
		case 3:
			s = "Martie";
			break;
		case 4:
			s = "Aprilie";
			break;
		case 5:
			s = "Mai";
			break;
		case 6:
			s = "Iunie";
			break;
		case 7:
			s = "Iulie";
			break;
		case 8:
			s = "August";
			break;
		case 9:
			s = "Septembrie";
			break;
		case 10:
			s = "Octombrie";
			break;
		case 11:
			s = "Noiembrie";
			break;
		case 12:
			s = "Decembrie";
			break;
		}
		return s;
	case "russian":
		var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "январь";
			break;
		case 2:
			s = "февраль";
			break;
		case 3:
			s = "март";
			break;
		case 4:
			s = "апрель";
			break;
		case 5:
			s = "май";
			break;
		case 6:
			s = "июнь";
			break;
		case 7:
			s = "июль";
			break;
		case 8:
			s = "август";
			break;
		case 9:
			s = "сентябрь";
			break;
		case 10:
			s = "октябрь";
			break;
		case 11:
			s = "ноябрь";
			break;
		case 12:
			s = "декабрь";
			break;
		}
		return s;
	case "somali":
		var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "Jannaayo";
			break;
		case 2:
			s = "Febraayo";
			break;
		case 3:
			s = "Maarso";
			break;
		case 4:
			s = "Abriil";
			break;
		case 5:
			s = "Maayo";
			break;
		case 6:
			s = "Juun";
			break;
		case 7:
			s = "Julay";
			break;
		case 8:
			s = "Ogost";
			break;
		case 9:
			s = "Setembar";
			break;
		case 10:
			s = "Oktoobar";
			break;
		case 11:
			s = "Noofeembar";
			break;
		case 12:
			s = "Desembar";
			break;
		}
		return s;
	case "spanish":
		var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "Enero";
			break;
		case 2:
			s = "Febrero";
			break;
		case 3:
			s = "Marzo";
			break;
		case 4:
			s = "Abril";
			break;
		case 5:
			s = "Mayo";
			break;
		case 6:
			s = "Junio";
			break;
		case 7:
			s = "Julio";
			break;
		case 8:
			s = "Agosto";
			break;
		case 9:
			s = "Septiembre";
			break;
		case 10:
			s = "Octubre";
			break;
		case 11:
			s = "Noviembre";
			break;
		case 12:
			s = "Diciembre";
			break;
		}
		return s;
	case "swedish":
		var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "Januari";
			break;
		case 2:
			s = "Februari";
			break;
		case 3:
			s = "Mars";
			break;
		case 4:
			s = "April";
			break;
		case 5:
			s = "Maj";
			break;
		case 6:
			s = "Juni";
			break;
		case 7:
			s = "Juli";
			break;
		case 8:
			s = "Augusti";
			break;
		case 9:
			s = "September";
			break;
		case 10:
			s = "Oktober";
			break;
		case 11:
			s = "November";
			break;
		case 12:
			s = "December";
			break;
		}
		return s;
	case "turkish":
		var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "Ocak";
			break;
		case 2:
			s = "Şubat";
			break;
		case 3:
			s = "Mart";
			break;
		case 4:
			s = "Nisan";
			break;
		case 5:
			s = "Mayis";
			break;
		case 6:
			s = "Haziran";
			break;
		case 7:
			s = "Temmuz";
			break;
		case 8:
			s = "Ağustos";
			break;
		case 9:
			s = "Eylül";
			break;
		case 10:
			s = "Ekim";
			break;
		case 11:
			s = "Kasım";
			break;
		case 12:
			s = "Aralık";
			break;
		}
		return s;
	case "welsh":
		var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "Ionawr";
			break;
		case 2:
			s = "Chwefror";
			break;
		case 3:
			s = "Mawrth";
			break;
		case 4:
			s = "Ebrill";
			break;
		case 5:
			s = "Mai";
			break;
		case 6:
			s = "Mehefin";
			break;
		case 7:
			s = "Gorffennaf";
			break;
		case 8:
			s = "Awst";
			break;
		case 9:
			s = "Medi";
			break;
		case 10:
			s = "Hydref";
			break;
		case 11:
			s = "Tachwedd";
			break;
		case 12:
			s = "Rhagfyr";
			break;
		}
		return s;
	default:
		return null;
	}
};
var datetimelang_util_ShiftDateTime = {};
datetimelang_util_ShiftDateTime._new = function(dateTime) {
	var this1 = dateTime;
	return this1;
};
datetimelang_util_ShiftDateTime.getAnotherDay = function(this1,i) {
	var this2 = datetime_DateTime.add(this1,datetime_DTPeriod.Day(i));
	return this2;
};
datetimelang_util_ShiftDateTime.getFirstWeekDay = function(this1,mondayBased) {
	if(mondayBased == null) {
		mondayBased = true;
	}
	var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
	var this2 = datetime_DateTime.monthStart(this1,datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1))) + 62135596800.0;
	var startDateForMonth = this2;
	return datetime_DateTime.getWeekDay(startDateForMonth,mondayBased);
};
datetimelang_util_ShiftDateTime.daysMonth = function(this1) {
	var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
	var month = datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1));
	return datetime_utils_DateTimeMonthUtils.days(month,month == 2 && datetime_DateTime.isLeapYear(this1));
};
datetimelang_util_ShiftDateTime.getWeekdayName = function(this1,countries) {
	var this2 = countries;
	var c = this2;
	switch(c) {
	case "arabic":
		var mondayBased = false;
		if(mondayBased == null) {
			mondayBased = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(this1,mondayBased) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "يوم الأحد";
			break;
		case 1:
			s = "يوم الإثنين";
			break;
		case 2:
			s = "يوم الثلاثاء";
			break;
		case 3:
			s = "يوم الأربعاء";
			break;
		case 4:
			s = "يوم الخميس";
			break;
		case 5:
			s = "يوم الجمعة";
			break;
		case 6:
			s = "يوم السبت";
			break;
		}
		return s;
	case "english":
		var mondayBased = false;
		if(mondayBased == null) {
			mondayBased = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(this1,mondayBased) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "Sunday";
			break;
		case 1:
			s = "Monday";
			break;
		case 2:
			s = "Tuesday";
			break;
		case 3:
			s = "Wednesday";
			break;
		case 4:
			s = "Thursday";
			break;
		case 5:
			s = "Friday";
			break;
		case 6:
			s = "Saturday";
			break;
		}
		return s;
	case "french":
		var mondayBased = false;
		if(mondayBased == null) {
			mondayBased = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(this1,mondayBased) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "Dimanche";
			break;
		case 1:
			s = "Lundi";
			break;
		case 2:
			s = "Mardi";
			break;
		case 3:
			s = "Mercredi";
			break;
		case 4:
			s = "Jeudi";
			break;
		case 5:
			s = "Vendredi";
			break;
		case 6:
			s = "Samedi";
			break;
		}
		return s;
	case "german":
		var mondayBased = false;
		if(mondayBased == null) {
			mondayBased = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(this1,mondayBased) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "Sonntag";
			break;
		case 1:
			s = "Montag";
			break;
		case 2:
			s = "Dienstag";
			break;
		case 3:
			s = "Mittwoch";
			break;
		case 4:
			s = "Donnerstag";
			break;
		case 5:
			s = "Freitag";
			break;
		case 6:
			s = "Samtag";
			break;
		}
		return s;
	case "greek":
		var mondayBased = false;
		if(mondayBased == null) {
			mondayBased = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(this1,mondayBased) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "Κυριακή";
			break;
		case 1:
			s = "Δευτέρα";
			break;
		case 2:
			s = "Τρίτη";
			break;
		case 3:
			s = "Τετάρτη";
			break;
		case 4:
			s = "Πέμπτη";
			break;
		case 5:
			s = "Παρασκευή";
			break;
		case 6:
			s = "Σάββατο";
			break;
		}
		return s;
	case "hebrew":
		var mondayBased = false;
		if(mondayBased == null) {
			mondayBased = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(this1,mondayBased) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "יום ראשון";
			break;
		case 1:
			s = "יום שני";
			break;
		case 2:
			s = "יום שלישי";
			break;
		case 3:
			s = "יום רביעי";
			break;
		case 4:
			s = "יום חמישי";
			break;
		case 5:
			s = "יום שישי";
			break;
		case 6:
			s = "יום שבת";
			break;
		}
		return s;
	case "hindi":
		var mondayBased = false;
		if(mondayBased == null) {
			mondayBased = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(this1,mondayBased) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "रविवार";
			break;
		case 1:
			s = "सोमवार";
			break;
		case 2:
			s = "मंगलवार";
			break;
		case 3:
			s = "बुधवार";
			break;
		case 4:
			s = "गुरुवार";
			break;
		case 5:
			s = "शुक्रवार";
			break;
		case 6:
			s = "शनिवार";
			break;
		}
		return s;
	case "italian":
		var mondayBased = false;
		if(mondayBased == null) {
			mondayBased = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(this1,mondayBased) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "domenica";
			break;
		case 1:
			s = "lunedì";
			break;
		case 2:
			s = "martedì";
			break;
		case 3:
			s = "mercoledì";
			break;
		case 4:
			s = "giovedì";
			break;
		case 5:
			s = "venerdì";
			break;
		case 6:
			s = "sabato";
			break;
		}
		return s;
	case "norwegian":
		var mondayBased = false;
		if(mondayBased == null) {
			mondayBased = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(this1,mondayBased) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "Søndag";
			break;
		case 1:
			s = "Mandag";
			break;
		case 2:
			s = "Tirsdag";
			break;
		case 3:
			s = "Onsdag";
			break;
		case 4:
			s = "Torsdag";
			break;
		case 5:
			s = "Fredag";
			break;
		case 6:
			s = "Lørdag";
			break;
		}
		return s;
	case "polish":
		var mondayBased = false;
		if(mondayBased == null) {
			mondayBased = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(this1,mondayBased) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "Niedziela";
			break;
		case 1:
			s = "Poniedziałek";
			break;
		case 2:
			s = "Wtorek";
			break;
		case 3:
			s = "Środa";
			break;
		case 4:
			s = "Czwartek";
			break;
		case 5:
			s = "Piątek";
			break;
		case 6:
			s = "Sobota";
			break;
		}
		return s;
	case "portuguese":
		var mondayBased = false;
		if(mondayBased == null) {
			mondayBased = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(this1,mondayBased) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "Domingo";
			break;
		case 1:
			s = "Segunda";
			break;
		case 2:
			s = "Terça";
			break;
		case 3:
			s = "Quarta";
			break;
		case 4:
			s = "Quinta";
			break;
		case 5:
			s = "Sexta";
			break;
		case 6:
			s = "Sábado";
			break;
		}
		return s;
	case "romanian":
		var mondayBased = false;
		if(mondayBased == null) {
			mondayBased = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(this1,mondayBased) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "Duminică";
			break;
		case 1:
			s = "Luni";
			break;
		case 2:
			s = "Marţi";
			break;
		case 3:
			s = "Miercuri";
			break;
		case 4:
			s = "Joi";
			break;
		case 5:
			s = "Vineri";
			break;
		case 6:
			s = "Sîmbătă";
			break;
		}
		return s;
	case "russian":
		var mondayBased = false;
		if(mondayBased == null) {
			mondayBased = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(this1,mondayBased) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "воскресенье";
			break;
		case 1:
			s = "понедельник";
			break;
		case 2:
			s = "вторник";
			break;
		case 3:
			s = "среда";
			break;
		case 4:
			s = "четверг";
			break;
		case 5:
			s = "пятница";
			break;
		case 6:
			s = "суббота";
			break;
		}
		return s;
	case "somali":
		var mondayBased = false;
		if(mondayBased == null) {
			mondayBased = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(this1,mondayBased) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "Koobin";
			break;
		case 1:
			s = "Lammin";
			break;
		case 2:
			s = "Lamatoke";
			break;
		case 3:
			s = "Koodaar";
			break;
		case 4:
			s = "Hakisa";
			break;
		case 5:
			s = "Hakisa-Bile";
			break;
		case 6:
			s = "Soo Roga";
			break;
		}
		return s;
	case "spanish":
		var mondayBased = false;
		if(mondayBased == null) {
			mondayBased = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(this1,mondayBased) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "Domingo";
			break;
		case 1:
			s = "Lunes";
			break;
		case 2:
			s = "Martes";
			break;
		case 3:
			s = "Mieroles";
			break;
		case 4:
			s = "Jueves";
			break;
		case 5:
			s = "Viernes";
			break;
		case 6:
			s = "Sábado";
			break;
		}
		return s;
	case "swedish":
		var mondayBased = false;
		if(mondayBased == null) {
			mondayBased = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(this1,mondayBased) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "Söndag";
			break;
		case 1:
			s = "Måndag";
			break;
		case 2:
			s = "Tisdag";
			break;
		case 3:
			s = "Onsdag";
			break;
		case 4:
			s = "Torsdag";
			break;
		case 5:
			s = "Fredag";
			break;
		case 6:
			s = "Lördag";
			break;
		}
		return s;
	case "turkish":
		var mondayBased = false;
		if(mondayBased == null) {
			mondayBased = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(this1,mondayBased) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "Pazar";
			break;
		case 1:
			s = "Pazartesi";
			break;
		case 2:
			s = "Salı";
			break;
		case 3:
			s = "Çarşamba";
			break;
		case 4:
			s = "Perşembe";
			break;
		case 5:
			s = "Cuma";
			break;
		case 6:
			s = "Cumartesi";
			break;
		}
		return s;
	case "welsh":
		var mondayBased = false;
		if(mondayBased == null) {
			mondayBased = false;
		}
		var d = js_Boot.__cast(datetime_DateTime.getWeekDay(this1,mondayBased) , Int);
		var s;
		var d1 = d;
		switch(d1) {
		case 0:
			s = "Sul";
			break;
		case 1:
			s = "Llun";
			break;
		case 2:
			s = "Mawrth";
			break;
		case 3:
			s = "Mercher";
			break;
		case 4:
			s = "Iau";
			break;
		case 5:
			s = "Gwener";
			break;
		case 6:
			s = "Sadwrn";
			break;
		}
		return s;
	default:
		return null;
	}
};
datetimelang_util_ShiftDateTime.getMonthName = function(this1,countries) {
	var this2 = countries;
	var c = this2;
	switch(c) {
	case "arabic":
		var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "يناير";
			break;
		case 2:
			s = "فبراير";
			break;
		case 3:
			s = "مارس";
			break;
		case 4:
			s = "أبريل";
			break;
		case 5:
			s = "مايو";
			break;
		case 6:
			s = "يونيو";
			break;
		case 7:
			s = "يوليه";
			break;
		case 8:
			s = "أغسطس";
			break;
		case 9:
			s = "سبتمبر";
			break;
		case 10:
			s = "أكتوبر";
			break;
		case 11:
			s = "نوفمبر";
			break;
		case 12:
			s = "ديسمبر";
			break;
		}
		return s;
	case "english":
		var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "January";
			break;
		case 2:
			s = "February";
			break;
		case 3:
			s = "March";
			break;
		case 4:
			s = "April";
			break;
		case 5:
			s = "May";
			break;
		case 6:
			s = "June";
			break;
		case 7:
			s = "July";
			break;
		case 8:
			s = "August";
			break;
		case 9:
			s = "September";
			break;
		case 10:
			s = "October";
			break;
		case 11:
			s = "November";
			break;
		case 12:
			s = "December";
			break;
		}
		return s;
	case "french":
		var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "Janvier";
			break;
		case 2:
			s = "Février";
			break;
		case 3:
			s = "Mars";
			break;
		case 4:
			s = "Avril";
			break;
		case 5:
			s = "Mai";
			break;
		case 6:
			s = "Juin";
			break;
		case 7:
			s = "Juillet";
			break;
		case 8:
			s = "Août";
			break;
		case 9:
			s = "Septembre";
			break;
		case 10:
			s = "Octobre";
			break;
		case 11:
			s = "Novembre";
			break;
		case 12:
			s = "Décembre";
			break;
		}
		return s;
	case "german":
		var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "Januar";
			break;
		case 2:
			s = "Februar";
			break;
		case 3:
			s = "März";
			break;
		case 4:
			s = "April";
			break;
		case 5:
			s = "Mai";
			break;
		case 6:
			s = "Juni";
			break;
		case 7:
			s = "Juli";
			break;
		case 8:
			s = "August";
			break;
		case 9:
			s = "September";
			break;
		case 10:
			s = "Oktober";
			break;
		case 11:
			s = "November";
			break;
		case 12:
			s = "Dezember";
			break;
		}
		return s;
	case "greek":
		var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "Iανουάριος";
			break;
		case 2:
			s = "Φεβρουάριος";
			break;
		case 3:
			s = "Μάρτιος";
			break;
		case 4:
			s = "Aρίλιος";
			break;
		case 5:
			s = "Μάιος";
			break;
		case 6:
			s = "Iούνιος";
			break;
		case 7:
			s = "Iούλιος";
			break;
		case 8:
			s = "ύγουστος";
			break;
		case 9:
			s = "Σεπτέμβριος";
			break;
		case 10:
			s = "Oκτώβριος";
			break;
		case 11:
			s = "Νοέμβριος";
			break;
		case 12:
			s = "Δεκέμβριος";
			break;
		}
		return s;
	case "hebrew":
		var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "ינואר";
			break;
		case 2:
			s = "פברואר";
			break;
		case 3:
			s = "מרץ";
			break;
		case 4:
			s = "אפריל";
			break;
		case 5:
			s = "מאי";
			break;
		case 6:
			s = "יוני";
			break;
		case 7:
			s = "יולי";
			break;
		case 8:
			s = "אוגוסט";
			break;
		case 9:
			s = "ספטמבר";
			break;
		case 10:
			s = "אוקטובר";
			break;
		case 11:
			s = "נובמבר";
			break;
		case 12:
			s = "דצמבר";
			break;
		}
		return s;
	case "hindi":
		var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "जनवरी";
			break;
		case 2:
			s = "फ़रवरी";
			break;
		case 3:
			s = "मार्च";
			break;
		case 4:
			s = "अप्रैल";
			break;
		case 5:
			s = "मई";
			break;
		case 6:
			s = "जून";
			break;
		case 7:
			s = "जुलाई";
			break;
		case 8:
			s = "अगस्त";
			break;
		case 9:
			s = "सितंबर";
			break;
		case 10:
			s = "अक्टूबर";
			break;
		case 11:
			s = "नवंबर";
			break;
		case 12:
			s = "दिसंबर";
			break;
		}
		return s;
	case "italian":
		var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "Gennaio";
			break;
		case 2:
			s = "Febbraio";
			break;
		case 3:
			s = "Marzo";
			break;
		case 4:
			s = "Aprile";
			break;
		case 5:
			s = "Maggio";
			break;
		case 6:
			s = "Giugno";
			break;
		case 7:
			s = "Luglio";
			break;
		case 8:
			s = "Agosto";
			break;
		case 9:
			s = "Settembre";
			break;
		case 10:
			s = "Ottobre";
			break;
		case 11:
			s = "Novembre";
			break;
		case 12:
			s = "Dicembre";
			break;
		}
		return s;
	case "norwegian":
		var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "Januar";
			break;
		case 2:
			s = "Februar";
			break;
		case 3:
			s = "Mars";
			break;
		case 4:
			s = "April";
			break;
		case 5:
			s = "Mai";
			break;
		case 6:
			s = "Juni";
			break;
		case 7:
			s = "Juli";
			break;
		case 8:
			s = "August";
			break;
		case 9:
			s = "September";
			break;
		case 10:
			s = "Oktober";
			break;
		case 11:
			s = "November";
			break;
		case 12:
			s = "Desember";
			break;
		}
		return s;
	case "polish":
		var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "Styczeń";
			break;
		case 2:
			s = "Luty";
			break;
		case 3:
			s = "Marzec";
			break;
		case 4:
			s = "Kwiecień";
			break;
		case 5:
			s = "Maj";
			break;
		case 6:
			s = "Czerwiec";
			break;
		case 7:
			s = "Lipiec";
			break;
		case 8:
			s = "Sierpień";
			break;
		case 9:
			s = "Wrzesień";
			break;
		case 10:
			s = "Październik";
			break;
		case 11:
			s = "Listopad";
			break;
		case 12:
			s = "Grudzień";
			break;
		}
		return s;
	case "portuguese":
		var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "Janeiro";
			break;
		case 2:
			s = "Fevereiro";
			break;
		case 3:
			s = "Março";
			break;
		case 4:
			s = "Abril";
			break;
		case 5:
			s = "Maio";
			break;
		case 6:
			s = "Junho";
			break;
		case 7:
			s = "Julho";
			break;
		case 8:
			s = "Agosto";
			break;
		case 9:
			s = "Setembro";
			break;
		case 10:
			s = "Outubro";
			break;
		case 11:
			s = "Novembro";
			break;
		case 12:
			s = "Dezembro";
			break;
		}
		return s;
	case "romanian":
		var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "Ianuarie";
			break;
		case 2:
			s = "Februarie";
			break;
		case 3:
			s = "Martie";
			break;
		case 4:
			s = "Aprilie";
			break;
		case 5:
			s = "Mai";
			break;
		case 6:
			s = "Iunie";
			break;
		case 7:
			s = "Iulie";
			break;
		case 8:
			s = "August";
			break;
		case 9:
			s = "Septembrie";
			break;
		case 10:
			s = "Octombrie";
			break;
		case 11:
			s = "Noiembrie";
			break;
		case 12:
			s = "Decembrie";
			break;
		}
		return s;
	case "russian":
		var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "январь";
			break;
		case 2:
			s = "февраль";
			break;
		case 3:
			s = "март";
			break;
		case 4:
			s = "апрель";
			break;
		case 5:
			s = "май";
			break;
		case 6:
			s = "июнь";
			break;
		case 7:
			s = "июль";
			break;
		case 8:
			s = "август";
			break;
		case 9:
			s = "сентябрь";
			break;
		case 10:
			s = "октябрь";
			break;
		case 11:
			s = "ноябрь";
			break;
		case 12:
			s = "декабрь";
			break;
		}
		return s;
	case "somali":
		var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "Jannaayo";
			break;
		case 2:
			s = "Febraayo";
			break;
		case 3:
			s = "Maarso";
			break;
		case 4:
			s = "Abriil";
			break;
		case 5:
			s = "Maayo";
			break;
		case 6:
			s = "Juun";
			break;
		case 7:
			s = "Julay";
			break;
		case 8:
			s = "Ogost";
			break;
		case 9:
			s = "Setembar";
			break;
		case 10:
			s = "Oktoobar";
			break;
		case 11:
			s = "Noofeembar";
			break;
		case 12:
			s = "Desembar";
			break;
		}
		return s;
	case "spanish":
		var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "Enero";
			break;
		case 2:
			s = "Febrero";
			break;
		case 3:
			s = "Marzo";
			break;
		case 4:
			s = "Abril";
			break;
		case 5:
			s = "Mayo";
			break;
		case 6:
			s = "Junio";
			break;
		case 7:
			s = "Julio";
			break;
		case 8:
			s = "Agosto";
			break;
		case 9:
			s = "Septiembre";
			break;
		case 10:
			s = "Octubre";
			break;
		case 11:
			s = "Noviembre";
			break;
		case 12:
			s = "Diciembre";
			break;
		}
		return s;
	case "swedish":
		var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "Januari";
			break;
		case 2:
			s = "Februari";
			break;
		case 3:
			s = "Mars";
			break;
		case 4:
			s = "April";
			break;
		case 5:
			s = "Maj";
			break;
		case 6:
			s = "Juni";
			break;
		case 7:
			s = "Juli";
			break;
		case 8:
			s = "Augusti";
			break;
		case 9:
			s = "September";
			break;
		case 10:
			s = "Oktober";
			break;
		case 11:
			s = "November";
			break;
		case 12:
			s = "December";
			break;
		}
		return s;
	case "turkish":
		var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "Ocak";
			break;
		case 2:
			s = "Şubat";
			break;
		case 3:
			s = "Mart";
			break;
		case 4:
			s = "Nisan";
			break;
		case 5:
			s = "Mayis";
			break;
		case 6:
			s = "Haziran";
			break;
		case 7:
			s = "Temmuz";
			break;
		case 8:
			s = "Ağustos";
			break;
		case 9:
			s = "Eylül";
			break;
		case 10:
			s = "Ekim";
			break;
		case 11:
			s = "Kasım";
			break;
		case 12:
			s = "Aralık";
			break;
		}
		return s;
	case "welsh":
		var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
		var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1)) , Int);
		var s;
		var m1 = m;
		switch(m1) {
		case 1:
			s = "Ionawr";
			break;
		case 2:
			s = "Chwefror";
			break;
		case 3:
			s = "Mawrth";
			break;
		case 4:
			s = "Ebrill";
			break;
		case 5:
			s = "Mai";
			break;
		case 6:
			s = "Mehefin";
			break;
		case 7:
			s = "Gorffennaf";
			break;
		case 8:
			s = "Awst";
			break;
		case 9:
			s = "Medi";
			break;
		case 10:
			s = "Hydref";
			break;
		case 11:
			s = "Tachwedd";
			break;
		case 12:
			s = "Rhagfyr";
			break;
		}
		return s;
	default:
		return null;
	}
};
var datetimelang_welsh_DayName = {};
datetimelang_welsh_DayName._new = function(d) {
	var this1 = d;
	return this1;
};
datetimelang_welsh_DayName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "dydd gwener":
		return 5;
	case "dydd iau":
		return 4;
	case "dydd llun":
		return 1;
	case "dydd mawrth":
		return 2;
	case "dydd mercher":
		return 3;
	case "dydd sadwrn":
		return 6;
	case "dydd sul":
		return 0;
	default:
		return null;
	}
};
datetimelang_welsh_DayName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Sul";
		break;
	case 1:
		str = "Llun";
		break;
	case 2:
		str = "Mawrth";
		break;
	case 3:
		str = "Mercher";
		break;
	case 4:
		str = "Iau";
		break;
	case 5:
		str = "Gwener";
		break;
	case 6:
		str = "Sadwrn";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_welsh_DayName.toLowerCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Sul";
		break;
	case 1:
		str = "Llun";
		break;
	case 2:
		str = "Mawrth";
		break;
	case 3:
		str = "Mercher";
		break;
	case 4:
		str = "Iau";
		break;
	case 5:
		str = "Gwener";
		break;
	case 6:
		str = "Sadwrn";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
};
datetimelang_welsh_DayName.alltoUpperCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d = this1;
	var str;
	switch(d) {
	case 0:
		str = "Sul";
		break;
	case 1:
		str = "Llun";
		break;
	case 2:
		str = "Mawrth";
		break;
	case 3:
		str = "Mercher";
		break;
	case 4:
		str = "Iau";
		break;
	case 5:
		str = "Gwener";
		break;
	case 6:
		str = "Sadwrn";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
};
datetimelang_welsh_DayName.toString = function(this1) {
	var d = this1;
	switch(d) {
	case 0:
		return "Sul";
	case 1:
		return "Llun";
	case 2:
		return "Mawrth";
	case 3:
		return "Mercher";
	case 4:
		return "Iau";
	case 5:
		return "Gwener";
	case 6:
		return "Sadwrn";
	}
};
datetimelang_welsh_DayName.toStringDydd = function(this1) {
	var d = this1;
	switch(d) {
	case 0:
		return "dydd Sul";
	case 1:
		return "dydd Llun";
	case 2:
		return "dydd Mawrth";
	case 3:
		return "dydd Mercher";
	case 4:
		return "dydd Iau";
	case 5:
		return "dydd Gwener";
	case 6:
		return "dydd Sadwrn";
	}
};
datetimelang_welsh_DayName.stringAllUpFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Sul";
		break;
	case 1:
		str = "Llun";
		break;
	case 2:
		str = "Mawrth";
		break;
	case 3:
		str = "Mercher";
		break;
	case 4:
		str = "Iau";
		break;
	case 5:
		str = "Gwener";
		break;
	case 6:
		str = "Sadwrn";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
	return s;
};
datetimelang_welsh_DayName.stringLowerFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Sul";
		break;
	case 1:
		str = "Llun";
		break;
	case 2:
		str = "Mawrth";
		break;
	case 3:
		str = "Mercher";
		break;
	case 4:
		str = "Iau";
		break;
	case 5:
		str = "Gwener";
		break;
	case 6:
		str = "Sadwrn";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
	return s;
};
datetimelang_welsh_DayName.stringShortFromDateTime = function(dt,len,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	if(len == null) {
		len = -1;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var d1 = d;
	var str;
	switch(d1) {
	case 0:
		str = "Sul";
		break;
	case 1:
		str = "Llun";
		break;
	case 2:
		str = "Mawrth";
		break;
	case 3:
		str = "Mercher";
		break;
	case 4:
		str = "Iau";
		break;
	case 5:
		str = "Gwener";
		break;
	case 6:
		str = "Sadwrn";
		break;
	}
	var s = len1 == -1 ? str : HxOverrides.substr(str,0,len1);
	return s;
};
datetimelang_welsh_DayName.stringFromDateTime = function(dt,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	var d = js_Boot.__cast(datetime_DateTime.getWeekDay(dt,mondayBased) , Int);
	var s;
	var d1 = d;
	switch(d1) {
	case 0:
		s = "Sul";
		break;
	case 1:
		s = "Llun";
		break;
	case 2:
		s = "Mawrth";
		break;
	case 3:
		s = "Mercher";
		break;
	case 4:
		s = "Iau";
		break;
	case 5:
		s = "Gwener";
		break;
	case 6:
		s = "Sadwrn";
		break;
	}
	return s;
};
var datetimelang_welsh_MonthName = {};
datetimelang_welsh_MonthName._new = function(m) {
	var this1 = m;
	return this1;
};
datetimelang_welsh_MonthName.fromString = function(s) {
	switch(s.toLowerCase()) {
	case "awst":
		return 8;
	case "chwefror":
		return 2;
	case "ebrill":
		return 4;
	case "gorffennaf":
		return 7;
	case "hydref":
		return 10;
	case "ionawr":
		return 1;
	case "mai":
		return 5;
	case "mawrth":
		return 3;
	case "medi":
		return 9;
	case "mehefin":
		return 6;
	case "rhagfyr":
		return 12;
	case "tachwedd":
		return 11;
	default:
		return null;
	}
};
datetimelang_welsh_MonthName.$name = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Ionawr";
		break;
	case 2:
		str = "Chwefror";
		break;
	case 3:
		str = "Mawrth";
		break;
	case 4:
		str = "Ebrill";
		break;
	case 5:
		str = "Mai";
		break;
	case 6:
		str = "Mehefin";
		break;
	case 7:
		str = "Gorffennaf";
		break;
	case 8:
		str = "Awst";
		break;
	case 9:
		str = "Medi";
		break;
	case 10:
		str = "Hydref";
		break;
	case 11:
		str = "Tachwedd";
		break;
	case 12:
		str = "Rhagfyr";
		break;
	}
	if(len == -1) {
		return str;
	} else {
		return HxOverrides.substr(str,0,len);
	}
};
datetimelang_welsh_MonthName.toLowerCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Ionawr";
		break;
	case 2:
		str = "Chwefror";
		break;
	case 3:
		str = "Mawrth";
		break;
	case 4:
		str = "Ebrill";
		break;
	case 5:
		str = "Mai";
		break;
	case 6:
		str = "Mehefin";
		break;
	case 7:
		str = "Gorffennaf";
		break;
	case 8:
		str = "Awst";
		break;
	case 9:
		str = "Medi";
		break;
	case 10:
		str = "Hydref";
		break;
	case 11:
		str = "Tachwedd";
		break;
	case 12:
		str = "Rhagfyr";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
};
datetimelang_welsh_MonthName.alltoUpperCase = function(this1,len) {
	if(len == null) {
		len = -1;
	}
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m = this1;
	var str;
	switch(m) {
	case 1:
		str = "Ionawr";
		break;
	case 2:
		str = "Chwefror";
		break;
	case 3:
		str = "Mawrth";
		break;
	case 4:
		str = "Ebrill";
		break;
	case 5:
		str = "Mai";
		break;
	case 6:
		str = "Mehefin";
		break;
	case 7:
		str = "Gorffennaf";
		break;
	case 8:
		str = "Awst";
		break;
	case 9:
		str = "Medi";
		break;
	case 10:
		str = "Hydref";
		break;
	case 11:
		str = "Tachwedd";
		break;
	case 12:
		str = "Rhagfyr";
		break;
	}
	return (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
};
datetimelang_welsh_MonthName.toString = function(this1) {
	var m = this1;
	switch(m) {
	case 1:
		return "Ionawr";
	case 2:
		return "Chwefror";
	case 3:
		return "Mawrth";
	case 4:
		return "Ebrill";
	case 5:
		return "Mai";
	case 6:
		return "Mehefin";
	case 7:
		return "Gorffennaf";
	case 8:
		return "Awst";
	case 9:
		return "Medi";
	case 10:
		return "Hydref";
	case 11:
		return "Tachwedd";
	case 12:
		return "Rhagfyr";
	}
};
datetimelang_welsh_MonthName.stringAllUpFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Ionawr";
		break;
	case 2:
		str = "Chwefror";
		break;
	case 3:
		str = "Mawrth";
		break;
	case 4:
		str = "Ebrill";
		break;
	case 5:
		str = "Mai";
		break;
	case 6:
		str = "Mehefin";
		break;
	case 7:
		str = "Gorffennaf";
		break;
	case 8:
		str = "Awst";
		break;
	case 9:
		str = "Medi";
		break;
	case 10:
		str = "Hydref";
		break;
	case 11:
		str = "Tachwedd";
		break;
	case 12:
		str = "Rhagfyr";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toUpperCase();
	return s;
};
datetimelang_welsh_MonthName.stringLowerFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Ionawr";
		break;
	case 2:
		str = "Chwefror";
		break;
	case 3:
		str = "Mawrth";
		break;
	case 4:
		str = "Ebrill";
		break;
	case 5:
		str = "Mai";
		break;
	case 6:
		str = "Mehefin";
		break;
	case 7:
		str = "Gorffennaf";
		break;
	case 8:
		str = "Awst";
		break;
	case 9:
		str = "Medi";
		break;
	case 10:
		str = "Hydref";
		break;
	case 11:
		str = "Tachwedd";
		break;
	case 12:
		str = "Rhagfyr";
		break;
	}
	var s = (len1 == -1 ? str : HxOverrides.substr(str,0,len1)).toLowerCase();
	return s;
};
datetimelang_welsh_MonthName.stringShortFromDateTime = function(dt,len) {
	if(len == null) {
		len = -1;
	}
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var len1 = len;
	if(len1 == null) {
		len1 = -1;
	}
	var m1 = m;
	var str;
	switch(m1) {
	case 1:
		str = "Ionawr";
		break;
	case 2:
		str = "Chwefror";
		break;
	case 3:
		str = "Mawrth";
		break;
	case 4:
		str = "Ebrill";
		break;
	case 5:
		str = "Mai";
		break;
	case 6:
		str = "Mehefin";
		break;
	case 7:
		str = "Gorffennaf";
		break;
	case 8:
		str = "Awst";
		break;
	case 9:
		str = "Medi";
		break;
	case 10:
		str = "Hydref";
		break;
	case 11:
		str = "Tachwedd";
		break;
	case 12:
		str = "Rhagfyr";
		break;
	}
	var s = len1 == -1 ? str : HxOverrides.substr(str,0,len1);
	return s;
};
datetimelang_welsh_MonthName.stringFromDateTime = function(dt) {
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var m = js_Boot.__cast(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) , Int);
	var s;
	var m1 = m;
	switch(m1) {
	case 1:
		s = "Ionawr";
		break;
	case 2:
		s = "Chwefror";
		break;
	case 3:
		s = "Mawrth";
		break;
	case 4:
		s = "Ebrill";
		break;
	case 5:
		s = "Mai";
		break;
	case 6:
		s = "Mehefin";
		break;
	case 7:
		s = "Gorffennaf";
		break;
	case 8:
		s = "Awst";
		break;
	case 9:
		s = "Medi";
		break;
	case 10:
		s = "Hydref";
		break;
	case 11:
		s = "Tachwedd";
		break;
	case 12:
		s = "Rhagfyr";
		break;
	}
	return s;
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	__class__: haxe_ValueException
});
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var htmlHelper_tools_DivertTrace = function(left,d) {
	if(left == null) {
		left = 610;
	}
	this.textStyle1 = "<span style=\"font-size:14px; color:Grey\">";
	this.textStyle0 = "<span style=\"font-size:12px; color:Silver\">";
	this.traceString = "";
	this.divertTrace(left,d);
};
htmlHelper_tools_DivertTrace.__name__ = true;
htmlHelper_tools_DivertTrace.prototype = {
	divertTrace: function(left,d) {
		if(d == null) {
			var doc = window.document;
			this.traceDiv = doc.createElement("div");
			doc.body.appendChild(this.traceDiv);
			var dom = this.traceDiv;
			var style = dom.style;
			style.position = "absolute";
			style.top = "0px";
			style.left = (left == null ? "null" : "" + left) + "px";
			style.height = "500px";
			style.width = "500px";
			style.zIndex = "99";
			style.overflow = "auto";
		} else {
			this.traceDiv = d;
		}
		haxe_Log.trace = $bind(this,this.myTrace);
	}
	,myTrace: function(v,inf) {
		if(Std.string(v) == "") {
			return;
		}
		this.traceString += this.textStyle0 + inf.className + "." + inf.methodName + " ( " + (inf.lineNumber == null ? "null" : "" + inf.lineNumber) + " )" + "</span>" + "<br> - " + this.textStyle1 + Std.string(v) + "</span>" + "<br>";
		this.traceDiv.innerHTML = this.traceString;
	}
	,__class__: htmlHelper_tools_DivertTrace
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
js_Boot.__toStr = ({ }).toString;
datetime_DateTime.UNIX_EPOCH_DIFF = 62135596800.0;
datetime_DateTime.SECONDS_IN_MINUTE = 60;
datetime_DateTime.SECONDS_IN_HOUR = 3600;
datetime_DateTime.SECONDS_IN_DAY = 86400;
datetime_DateTime.SECONDS_IN_WEEK = 604800;
datetime_DateTime.SECONDS_IN_YEAR = 31536000;
datetime_DateTime.SECONDS_IN_LEAP_YEAR = 31622400;
datetime_DateTime.SECONDS_IN_3_YEARS = 94608000;
datetime_DateTime.SECONDS_IN_QUAD = 126230400.0;
datetime_DateTime.SECONDS_IN_HALF_QUAD = 63072000.0;
datetime_DateTime.SECONDS_IN_HALF_QUAD_LEAP = 63158400.0;
datetime_DateTime.SECONDS_IN_3_PART_QUAD = 94694400.0;
datetime_DateTime.SECONDS_IN_CQUAD = 12622780800.0;
datetime_DateTime.SECONDS_IN_CENTURY = 3155673600.0;
datetime_DateTime.SECONDS_IN_LEAP_CENTURY = 3155760000.0;
datetimelang_util_Demo_main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
